var liste_des_exercices_disponibles = {
  "CM000": Tables_additions_soustractions,
  "CM001": Tables_de_multiplications,
  "CM002": Tables_de_divisions,
  "CM003": Tables_de_multiplications_et_divisions,
  "CM004": Quatre_operations,
  "CM005": Ajouter9,
  "CM006": Soustraire9,
  "CM007": Ajouter11,
  "CM008": Soustraire11,
  "CM009": Moitie,
  "CM010": Tiers,
  "CM011": Quart,
  "CM012": Complement_a_100,
  "CM013": Complement_a_une_dizaine,
  "CM014": Double_moitie_tiers_triple,
  "CM015": Somme_de_deux_nombres_maries,
  "CM016": Diviser_par_10_100_1000,
  "CM017": Diviser_decimal_par_10_100_1000,
  "CM018": Somme_de_deux_nombres_maries_et_un_entier,
  "CM019": Le_compte_est_bonV3,
  "CM020": Le_compte_est_bonV4,
  "CM021": Compte_Est_Bon,
  "c3C10-1": Tables_de_multiplications,
  "c3C10-4": Exercice_tables_d_additions_cycle3,
  "c3C10-2" : Exercice_labyrinthe_multiplesCM,
  "c3C11": Division_cycle3,
  "c3N10": Ecrire_entiers_cycle3,
  "c3N22": Lire_abscisse_decimale_trois_formesCM,
  "c3N23": lireUneAbscisseAvecZoomCM,
  "6Algo10": Colorier_Deplacement,
  "6C10": Additions_soustractions_multiplications_posees,
  "6C10-1": Tables_de_multiplications,
  "6C10-2": Exercice_tables_de_multiplications_et_multiples_de_10,
  "6C10-3": Exercice_tables_de_multiplications_et_decimaux,
  "6C10-4": Exercice_tables_d_additions,
  "6C10-5" : Exercice_labyrinthe_multiples,
  "6C11": Divisions_euclidiennes,
  "6C13": Vocabulaire_et_operations,
  "6C20": Additionner_soustraires_decimaux,
  "6C21": Divisions_euclidiennes_niv2,
  "6C23": Exercice_additionner_des_fractions_6e,
  "6C30": Multiplier_decimaux,
  "6C30-1": Multiplier_decimaux_par_10_100_1000,
  "6C30-2": Produit_de_decimaux_a_partir_d_un_produit_connu,
  "6C31": Division_decimale,
  "6C31-2": Valeur_approchee_division_decimale,
  "6C32": Probleme_course,
  "6C33": Priorites,
  //"6C99" : separation6C,
  //"6C99" : separation6C,
  "6G10": Notation_segment_droite_demi_droite,
  "6G10-2": Utiliser_le_codage_pour_decrire_6e,
  "6G11": Tracer_des_perpendiculaires,
  "6G12": Tracer_des_paralleles,
  "6G12-1": Tracer_des_perpendiculaires_et_des_paralleles,
  "6G14": Proprietes_paralleles_perpendiculaires,
  "beta6G24": Test_main_levee,
  "6G20": Nommer_et_coder_des_polygones,
  "6G20-2": Vocabulaire_des_triangles_6e,
  "6G21": Construire_un_triangle_6e,
  "6G21-1": Construire_un_triangle_avec_cible_6e,
  "6G23-2": Tracer_triangle_2_angles,
  "6G24": Transformations_6e,
  "6G24-1": Symetrie_axiale_point_6e,
  "6G24-2": Symetrie_axiale_figure_6e,
  "6G24-3": Construire_symetrique_point_6e,
  "6G25": Construire_mediatrices_6e,
  "6G25-1": Pavages_et_reflexion,
  "6G25-2": Pavages_et_symetries,
  "6G25-3" : Pavage_et_reflexion2d,
  "6G32-1": Symetrie_axiale_conservation1,
  "6G33": Reconnaitre_quadrilatere_particulier,
  "6G41": Representer_un_solide_6e,
  "6G42": Solide_6e,
  "6G43": Utiliser_vocabulaire_pave,
  "6M11-1": Perimetre_ou_aire_de_carres_rectangles_triangles,
  "6M11-2": Perimetre_ou_aire_de_figures_composees,
  "6M10": Reglages_6M10,
  "6M12": Reglages_6M12,
  "6M22": Reglages_6M22,
  "6M22-1": Perimetre_aire_disques,
  "6M22-2": Perimetre_aire_et_portions_de_disques,
  "6M23": Exercice_conversions_aires,
  "6M25": Connaitre_formules_de_perimetre_et_aires,
  "6M31": Exercice_conversions_volumes,
  "6M31-2": Unites_de_volumes_et_de_capacite,
  "6N10": Ecrire_nombres_entiers,
  "6N10-1": Exercice_numeration_entier,
  "6N10-2": Decomposition_nombre_decimal,
  "6N10-3": chiffre_nombre_de,
  "6N10-4": Ecrire_nombres_entiers_formates,
  "6N10-5" : Exercice_labyrinthe_numeration,
  "6N11": Lire_abscisse_entiere,
  "6N11-3": Encadrer_un_entier_par_deux_entiers_consecutifs,
  "6N11-4": Ranger_ordre_croissant_decroissant,
  "6N12": Multiplier_entier_par_10_100_1000,
  "6N13": Exercice_6N13,
  "6N20": Exercice_fractions_decomposer,
  "6N20-2": Exercice_fractions_differentes_ecritures,
  "6N22-1": Rapports_sur_un_segment,
  "6N22-2": Ajouter_des_fractions_d_unite,
  "6N23": Exercice_ecriture_decimale_a_partir_de_fraction_decimale,
  "6N23-0": Ecrire_nombres_decimal,
  "6N23-1": Exercice_differentes_ecritures_nombres_decimaux,
  "6N23-2": Lire_abscisse_decimale_trois_formes,
  "6N23-3": LireUneAbscisseAvecZoom,
  "6N23-4": Nombre_decimal_oralise_de_differentes_manieres,
  "6N24": Exercice_6N24,
  "6N24-1": Exercice_multiplier_ou_diviser_un_nombre_entier_par_10_100_1000,
  "6N30-2": Placer_points_sur_axe,
  "6N31": Comparer_decimaux,
  "6N31-1": Encadrer_un_decimal_par_deux_entiers_consecutifs,
  "6N31-2": Ordre_de_grandeur_operations_decimaux,
  "6N31-3": Arrondir_une_valeur_6e,
  "6N31-4": Intercaler_decimal_entre_2_decimaux,
  "6N32": Fractions_d_unite,
  "6N33": Fraction_d_un_nombre,
  "6N33-0": Fraction_d_une_quantite,
  "6N33-1": Pourcentage_d_un_nombre,
  "6N33-2": Calculer_un_pourcentage,
  "6N33-3": Appliquer_un_pourcentage,
  "6N34": Reglages_6N34,
  "6N41": Egalites_entre_fractions,
  "6N41-1" :Exercice_labyrinthe_fractions_egales,
  "6N43": Criteres_de_divisibilite,
  "6N43-2": Tableau_criteres_de_divisibilite,
  "6P10": Proportionnalite_pas_proportionnalite,
  "6P11": Proportionnalite_par_linearite,
  "6P11-1": Proportionnalite_par_linearite_bis,
  "6S10": Lecture_diagramme_barre,
  "6S11": Organiser_donnees_depuis_texte,
  "5A10": Liste_des_diviseurs_5e,
  "5A11": Tableau_criteres_de_divisibilite,
  "5A11-1" : Exercice_labyrinthe_divisibilite,
  "5A12-1": Premier_ou_pas_5e,
  "5A13": Exercice_decomposer_en_facteurs_premiers,
  "5C11": Traduire_une_phrase_par_une_expression,
  "5C11-1": Traduire_une_expression_par_une_phrase,
  "5C11-2": Ecrire_une_expression_mathador,
  "5C12": Calculer_une_expression_numerique,
  "5C12-1": Traduire_une_phrase_par_une_expression_et_calculer,
  "5G10": Symetrie_axiale_5e,
  "5G12" : Pavage_et_demi_tour2d,
  "5G12-1": Pavages_et_demi_tour,
  "5G11": Transformations_5e,
  "5G10-1": Symetrie_axiale_point_5e,
  "5G10-2": Symetrie_axiale_figure_5e,
  "5G11-1": Symetrie_centrale_point,
  "5G11-2": Symetrie_centrale_figure,
  "5G11-3": Construire_symetrique_point_5e,
  "5G21-1": Constructibilite_des_triangles_longueurs,
  "5G20" : Construire_un_triangle_avec_cible_5e,
  "5G20-1": Vocabulaire_des_triangles_5e,
  "5G22": DroiteRemarquableDuTriangle,
  "5G30": Utiliser_le_codage_pour_decrire_5e,
  "5G30-1": Egalite_d_angles,
  "5G31": Exercice_angles_triangles,
  "5G31-1": Constructibilite_des_triangles_angles,
  "5G51": Representer_un_solide_5e,
  "5N11-1": Tableaux_et_pourcentages_prix_constant,
  "5N11-2": Tableaux_et_pourcentages_pourcent_constant,
  "5N13": Exercice_fractions_simplifier,
  "5N13-2": Egalites_entre_fractions,
  "5N110": Variation_en_pourcentages,
  "5N14": Exercice_comparer_deux_fractions,
  "5N14-2": Exercice_comparer_quatre_fractions,
  "5N20": Exercice_additionner_ou_soustraire_des_fractions_5e,
  "5N20-0": Problemes_additifs_fractions_5e,
  "5L10": Ecrire_une_expression_litterale,
  "5L10-1": Traduire_une_phrase_par_une_expression_litterale,
  "5L10-2": Traduire_un_programme_de_calcul,
  "5L10-3": Traduire_une_expression_litterale_par_une_phrase,
  "5L10-4": Tableaux_et_fonction,
  "5L12": Reduire_une_expression_litterale,
  "5L12-1": Reduire_dinstinction_somme_produit,
  "5L13": Reduction_ax_bx,
  "5L14": Calculer_la_valeur_d_une_expression_litterale,
  "5L14-1": Calculer_une_expression_litterale,
  "5L14-2": Exercice_substituer,
  "5L14-3": Traduire_une_phrase_par_une_expression_litterale_et_calculer,
  "5L14-4": Calculer_une_expression_litteraleBis,
  "5L14-5": Calculer_la_valeur_d_une_expression_litterale_deg1_inc1,
  "5L14-6": Determiner_derniere_operation_exp_num,
  "5L15": Tester_une_egalite,
  "5M10": Aire_du_parallelogramme,
  "5P10": Tableaux_et_proportionnalite,
  "5R10-0": Trouver_oppose,
  "5R11": Lire_abscisse_relative,
  "5R11-2": Placer_points_sur_axe_relatifs,
  "5R12": Reperage_point_du_quart_de_plan,
  "5R12-2": Reperage_point_du_plan,
  "5R20": Exercice_additions_relatifs,
  "5R20-2": Exercice_additions_relatifs_a_trou,
  "5R20-3": Exercice_additions_de_5_relatifs, //on pourrait le corriger avec regroupement des termes de mÃªme signe 
  "5R20-4": Problemes_additifs_relatifs_5e,
  "5R20-5": Exercice_tableau_additions_relatifs,
  "5R21": Exercice_soustractions_relatifs,
  "5R22": Exercice_additions_et_soustraction_de_relatifsV2,
  "5R22-2": Exercice_simplification_somme_algebrique,
  "5S13": Calculer_des_frequences,
  "5S14": Calculer_des_moyennes,
  "5S20": Placer_probabilites,
  "5S21": fonctions_probabilite1,
  "4Algo1-0": Tracer_avec_scratch,
  "4C10-0": Signe_produit_quotient_relatifs,
  "4C10-1": Signe_produit_relatifs,
  "4C10-2": Signe_quotient_relatifs,
  "4C10-3": Exercice_multiplications_relatifs,
  "4C10-4": Exercice_quotients_relatifs,
  "4C10-5": Exercice_tableau_multiplications_relatifs,
  "4C11": Priorites_et_relatifs,
  "4C21-1": Exercice_additionner_des_fractions,
  "4C21": Exercice_additionner_ou_soustraire_des_fractions,
  "4C22": Exercice_multiplier_fractions,
  "4C22-1": Exercice_trouver_l_inverse,
  "4C22-2": Exercice_diviser_fractions,
  "4C23": Exercice_additionner_fraction_produit,
  "4C25-0": Problemes_additifs_fractions,
  "4C30": Puissances_de_dix,
  "4C30-1": Puissances_encadrement,
  "4C30-2": EcritureDecimalePuissanceDe10,
  "4C30-3": EcritureDecimalePuissance,
  "4C32": Notation_scientifique,
  "4C32-1": Calculs_avec_puissances_de_dix,
  "4C33-1": Puissances_d_un_relatif_1,
  "4C33-3": Puissances_d_un_relatif_2,
  "4L10-1": Reductions_pieges_classiques,
  "4L13-0": Mettre_en_equation_sans_resoudre,
  "4L13-1": Forme_litterale_introduire_une_lettre,
  "4L14-0": Tester_si_un_nombre_est_solution_d_une_equation,
  "4L14-1": Tester_si_un_nombre_est_solution_d_une_equation_deg1,
  "4L14-2": Tester_si_un_nombre_est_solution_d_une_equation_deg2,
  "4L15-0": Trouver_erreur_resol_eq_deg1,
  "4L15-1": Equations_fractions,
  "4C21-1": Exercice_additionner_des_fractions,
  "4C21": Exercice_additionner_ou_soustraire_des_fractions,
  "4C22-1": Exercice_trouver_l_inverse,
  "4C22": Exercice_multiplier_fractions,
  "4C22-2": Exercice_diviser_fractions,
  "4C23": Exercice_additionner_fraction_produit,
  "beta4C30": Comparer_puissance10,
  "4F12": Exploiter_representation_graphique,
  "4P10": Problemes_grandeurs_composees,
  "4P10-1": Graphiques_et_proportionnalite,
  "4P10-2": Tableaux_et_quatrieme_proportionnelle,
  "4G10": Construire_translate_point_4e,
  "4G11" :Pavage_et_translation2d,
  "4G11-1": Pavages_et_translation,
  "4G20": Pythagore2D,
  "4G20-1": Egalite_Pythagore2D, // Anciennement Egalite_Pythagore,
  "4G20-2": Racine_caree_de_carres_parfaits,
  "4G20MG32": Exercice_Pythagore,
  "4G21": Reciproque_Pythagore,
  "4G22": Problemes_Pythagore,
  "4G30": Thales2D_4e,
  "4G30-1": Thales_4eme,
  "4G31": Reciproque_Thales_4eme,
  "4G40": Transformations_4e,
  "4G40": Exercice_Trigo_longueurs_4e,
  "4G41": Exercice_Trigo_angles_4e,
  "4G51": Representer_un_solide_4e,
  "3G10-2": Transformations_3e,
  "3G12-1": Pavages_et_rotation,
  "3G20": Thales2D_3e,
  "3G20-2": Exercice_Thales,
  "3G21": Reciproque_Thales,
  "3G30": Exercice_Trigo_longueurs,
  "3G31": Exercice_Trigo_angles,
  "3F13-1": Antecedent_et_image_graphique,
  "3F13-2": Premier_escape_game_mathalea,
  "3F21-1": Lecture_expression_fonctions_affines,
  "3S15": Calculer_des_etendues,
  "beta3L11-5": identites_calculs,
  "beta3Algo1": Instruction_conditionelle,
  "betaTESTseb": Tests_du_Seb,
  "betaSVG": AfficherSVG,
  //"betaExoZero" : Exercice_zero_mathalea2d,
  "betaExoConstruction" : Exercice_constructions_basiques,
  P001: Code_LaTeX_personnalise,
  // 'P002': LaTeX_static,
  "cours": Questions_de_cours,
  "LaTeX": Code_LaTeX_personnalise,
  // 'Perso' : HTML_personnalise,
  // 'TsvgjsKatex' : tests_SVGJS_KATEX,  
};

//Pour modifier les exercices lorsqu'ils sont en mode diaporama
var est_diaporama = false;

if (window.location.href.indexOf("cm.html") > 0) {
  est_diaporama = true;
}

//Efface de la liste des exercices disponibles tout ceux qui n'ont pas de version HTML
if (sortie_html) {
  var codeMG32 = "";
}

for (var i in liste_des_exercices_disponibles) {
  let exercice = new liste_des_exercices_disponibles[i]();
  if (sortie_html && exercice.pas_de_version_HMTL) {
    delete liste_des_exercices_disponibles[i];
  }
  if (!sortie_html && exercice.pas_de_version_LaTeX) {
    delete liste_des_exercices_disponibles[i];
  }
}



/**
 * Lire l'abscisse entiÃ¨re d'un point
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence : 6N11
 */
function Lire_abscisse_entiere() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire l'abscisse entiÃ¨re d'un point (grands nombres)";
  this.consigne = "Lire l'abscisse de chacun des points suivants.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 4;
  this.liste_packages = ["tkz-euclide"];

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
      abs0,
      l1,
      l2,
      l3,
      x1,
      x2,
      x3,
      x11,
      x22,
      x33,
      pas1,
      pas2,
      id_unique,
      texte,
      texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);
      switch (type_de_questions[i]) {
        case 1: // Placer des entiers sur un axe (milliers)
          abs0 = randint(1, 9) * 1000;
          pas1 = 0.001;
          pas2 = 10;
          break;

        case 2: // Placer des entiers sur un axe (dizaines de mille)
          abs0 = randint(5, 15) * 10000;
          pas1 = 0.0001;
          pas2 = 10;
          break;

        case 3: // Placer des entiers sur un axe (centaines de mille)
          abs0 = randint(35, 85) * 100000;
          pas1 = 0.00001;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      if (sortie_html) {
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11],
            [l2, x2, x22],
            [l3, x3, x33],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = Latex_reperage_sur_un_axe(
          2,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Milliers\n2 : Dizaines de mille\n3 : Centaines de mille\n4 : MÃ©lange",
  ];
}


/**
 * Questions statiques issues d'un fichier Markdown
 *
 * Les thÃ¨mes sont des titres de niveaux 2
 *
 * suivies d'une liste qui alterne question et rÃ©ponse
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence : cours
 */
function Questions_de_cours() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Questions de cours";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.consigne_modifiable = false;
  this.sup = ""; // thÃ¨me des questions
  this.sup2 = "questions_de_cours.txt"; //url des questions
  this.pas_de_version_LaTeX = true;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let liste_questions = []; // Liste de questions
    let liste_corrections = []; // Liste de questions corrigÃ©es
    let dictionnaire_de_questions = {};
    let dictionnaire_de_questions_pret = false;
    let contenu_HTML = "";
    let contenu_correction_HTML = "";
    $.get(this.sup2, function (txt) {
      // RÃ©cupÃ¨re le fichier txt et transforme en un dictionnaire {'id_theme':[[questions],[rÃ©ponses]]}
      let tableau_par_theme = txt
        .match(/##((?=[^#]).|\n)*/g)
        .map((v) => v.trim());
      // Recherche les chaines de caractÃ¨res commenÃ§ant par ## et ne comportant pas d'autres #
      for (let i = 0; i < tableau_par_theme.length; i++) {
        let tableau_titre = tableau_par_theme[i].match(/##.*/g);
        let questions_et_reponses = tableau_par_theme[i]
          .match(/\*((?=[^*#]).|\n)*/g)
          .map((v) => v.trim());
        // Recherche les chaines de caractÃ¨res commenÃ§ant par * et ne comportant pas d'autres * ou de #
        let titre = tableau_titre[0].replace("## ", "");
        // RÃ©cupÃ¨re le titre du thÃ¨me sans ##
        let tableau_questions = [];
        let tableau_reponses = [];
        for (let i = 0; i < questions_et_reponses.length; i++) {
          if (i % 2 == 0) {
            //rang pair => questions
            tableau_questions[i / 2] = questions_et_reponses[i].replace(
              "* ",
              ""
            );
            // Supprime les * devant chaque questions
          } else {
            //rang impair => rÃ©ponses
            tableau_reponses[(i - 1) / 2] = questions_et_reponses[i].replace(
              "* ",
              ""
            );
          }
          dictionnaire_de_questions[titre] = [
            tableau_questions,
            tableau_reponses,
          ];
        }
      }

      // Je n'utilise pas this.nb_questions ou this.sup car this n'est pas clairement dÃ©fini dans cette fonction
      if (exercice[numero_de_l_exercice].sup == "") {
        exercice[numero_de_l_exercice].sup = choice(
          Object.keys(dictionnaire_de_questions)
        ); // Si on n'a pas spÃ©cifiÃ© un thÃ¨me, on en prend un au hasard.
      }

      let nb_questions = exercice[numero_de_l_exercice].nb_question;
      if (dictionnaire_de_questions[exercice[numero_de_l_exercice].sup]) {
        // Si le thÃ¨me existe dans le dictionnaire alors on adapte le nombre de questions
        nb_questions = Math.min(
          exercice[numero_de_l_exercice].nb_questions,
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][0]
            .length
        );
      }
      for (let i = 0; i < nb_questions; i++) {
        liste_questions.push(
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][0][i]
        );
        liste_corrections.push(
          dictionnaire_de_questions[exercice[numero_de_l_exercice].sup][1][i]
        );
      }
      shuffle2tableaux(liste_questions, liste_corrections);
      // MÃ©lange les questions et les rÃ©ponses (sans perdre les associations)
      dictionnaire_de_questions_pret = true;
    });

    let id_unique = `${numero_de_l_exercice}_${Date.now()}`;
    if (sortie_html) {
      this.contenu = `<div id=div_exo${id_unique}></div>`;
      this.contenu_correction = `<div id=div_corr_exo${id_unique}></div>`;
    }

    if (!window.divExist) {
      window.divExist = [];
    } // Si divExist n'existe pas on le crÃ©e
    // divExist est un tableau dans lequel on stocke les listenner sur la crÃ©ation des div
    window.divExist[id_unique] = setInterval(function () {
      if ($(`#div_exo${id_unique}`).length && dictionnaire_de_questions_pret) {
        // Attends que le div existe et que le dictionnaire de questions soit prÃªt
        contenu_HTML = html_enumerate(liste_questions, this.spacing);
        contenu_correction_HTML = html_enumerate(
          liste_corrections,
          this.spacing
        );
        $(`#div_exo${id_unique}`).html(contenu_HTML); //Vide le div pour Ã©viter les SVG en doublon
        $(`#div_corr_exo${id_unique}`).html(contenu_correction_HTML); //Vide le div pour Ã©viter les SVG en doublon
        renderMathInElement(document.body, {
          delimiters: [
            { left: "\\[", right: "\\]", display: true },
            { left: "$", right: "$", display: false },
          ],
          throwOnError: true,
          errorColor: "#CC0000",
          strict: "warn",
          trust: false,
        });
        clearInterval(divExist[numero_de_l_exercice]); //ArrÃªte le timer
      }
    }, 100); // VÃ©rifie toutes les 100ms
  };
  this.besoin_formulaire_texte = ["ThÃ¨me des questions", "De la forme 6M1"];
  this.besoin_formulaire2_texte = [
    "Liste des questions",
    "URL du fichier texte contenant les questions et rÃ©ponses.",
  ];
}





/**
 * Placer un point d'abscisse dÃ©cimale
 * @Auteur Jean-Claude Lhote et RÃ©mi Angot
 * rÃ©fÃ©rence : 6N30-2
 */
function Placer_points_sur_axe() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Placer un point d'abscisse dÃ©cimale";
  this.consigne = " Placer trois points sur un axe graduÃ©.";
  this.nb_questions = 5;
  this.nb_questions_modifiable = true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.sup = 1;
  this.type_exercice = "SVGJS";
  this.liste_packages = "tkz-euclide";

  this.nouvelle_version = function (numero_de_l_exercice) {
    // numero_de_l_exercice est 0 pour l'exercice 1
    let type_de_questions;
    this.liste_questions = [];
    this.liste_corrections = [];
    this.contenu = ""; // Liste de questions
    this.contenu_correction = ""; // Liste de questions corrigÃ©es
    if (this.sup == 4)
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    else
      type_de_questions = combinaison_listes(
        [parseInt(this.sup)],
        this.nb_questions
      );

    this.contenu = html_consigne(this.consigne);
    for (
      let i = 0,
      abs0,
      abs1,
      abs2,
      abs3,
      l1,
      l2,
      l3,
      x1,
      x2,
      x3,
      x11,
      x22,
      x33,
      pas1,
      pas2,
      id_unique,
      texte,
      texte_corr;
      i < this.nb_questions;
      i++
    ) {
      l1 = lettre_depuis_chiffre(i * 3 + 1);
      l2 = lettre_depuis_chiffre(i * 3 + 2);
      l3 = lettre_depuis_chiffre(i * 3 + 3);

      switch (type_de_questions[i]) {
        case 1: // Placer un point sur un axe (1 dÃ©cimale)
          abs0 = randint(0, 9);
          pas1 = 1;
          pas2 = 10;
          break;

        case 2: // Placer un point sur un axe (2 dÃ©cimales)
          abs0 = randint(0, 90) / 10;
          pas1 = 10;
          pas2 = 10;
          break;

        case 3: // Placer un point sur un axe (3 dÃ©cimales)
          abs0 = randint(0, 990) / 100;
          pas1 = 100;
          pas2 = 10;
          break;
      }
      x1 = randint(0, 2);
      x2 = randint(3, 4);
      x3 = randint(5, 6);
      x11 = randint(1, 9);
      x22 = randint(1, 9);
      x33 = randint(1, 3);
      abs1 = arrondi(
        abs0 + x1 / pas1 + x11 / pas1 / pas2,
        type_de_questions[i]
      ); // le type de questions est Ã©gal au nombre de dÃ©cimales.
      abs2 = arrondi(
        abs0 + x2 / pas1 + x22 / pas1 / pas2,
        type_de_questions[i]
      );
      abs3 = arrondi(
        abs0 + x3 / pas1 + x33 / pas1 / pas2,
        type_de_questions[i]
      );

      if (sortie_html) {
        texte_corr = "";
        this.contenu += `<h3>Placer les points : ${l1}(${tex_nombrec(
          abs1
        )}), ${l2}(${tex_nombrec(abs2)}), ${l3}(${tex_nombrec(abs3)})</h3>`;
        id_unique = `${i}_${Date.now()}`;
        this.contenu += `<div id="div_svg${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        this.contenu_correction += `<div id="div_svg_corr${numero_de_l_exercice}${id_unique}" style="width: 90%; height: 200px;  "></div>`;
        SVG_reperage_sur_un_axe(
          `div_svg_corr${numero_de_l_exercice}${id_unique}`,
          abs0,
          6,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
      } else {
        //sortie Latex
        texte = `{\\small Placer les points : $${l1}$(${tex_nombrec(
          abs1
        )}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(abs3)})}<br>`;
        texte += Latex_reperage_sur_un_axe(
          2.4,
          abs0,
          pas1,
          pas2,
          [],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );
        texte_corr = `{\\small Les points $${l1}$(${tex_nombrec(
          abs1
        )}), $${l2}$(${tex_nombrec(abs2)}), $${l3}$(${tex_nombrec(
          abs3
        )}) sont placÃ©s ci dessus}<br>`;
        texte_corr += Latex_reperage_sur_un_axe(
          2.4,
          abs0,
          pas1,
          pas2,
          [
            [l1, x1, x11, true],
            [l2, x2, x22, true],
            [l3, x3, x33, true],
          ],
          [
            [calcul(abs0, 0), 0, 0],
            [calcul(abs0 + 1 / pas1, 0), 1, 0],
          ],
          false
        );

        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
      }
    }
    if (!sortie_html) liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Un chiffre aprÃ¨s la virgule\n2 : Deux chiffres aprÃ¨s la virgule \n3 : Trois chiffres aprÃ¨s la virgule\n4 : MÃ©lange",
  ];
}









/**
 * Additions et/ou soustractions classique et/ou Ã  trou.
 *
 * Par dÃ©faut c'est un mÃ©lange d'additions, soustractions avec et sans trou avec des nombres jusqu'Ã  20.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6D12
 */
function Tables_additions_soustractions() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 20;
  this.sup2 = 6; // additions|additions Ã  trous|soustractions|soustractions Ã  trous|mÃ©lange sans trou|mÃ©lange avec trou
  this.titre = "Additions et de soustractions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_type_de_questions = [];
    if (this.sup2 == 1) {
      liste_type_de_questions = combinaison_listes(
        ["addition"],
        this.nb_questions
      );
    }
    if (this.sup2 == 2) {
      liste_type_de_questions = combinaison_listes(
        ["addition_a_trou"],
        this.nb_questions
      );
    }
    if (this.sup2 == 3) {
      liste_type_de_questions = combinaison_listes(
        ["soustraction"],
        this.nb_questions
      );
    }
    if (this.sup2 == 4) {
      liste_type_de_questions = combinaison_listes(
        ["soustraction_a_trou"],
        this.nb_questions
      );
    }
    if (this.sup2 == 5) {
      liste_type_de_questions = combinaison_listes(
        ["addition", "soustraction"],
        this.nb_questions
      );
    }
    if (this.sup2 == 6) {
      liste_type_de_questions = combinaison_listes(
        ["addition", "addition_a_trou", "soustraction", "soustraction_a_trou"],
        this.nb_questions
      );
    }
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = randint(2, this.sup);
      b = randint(2, this.sup);

      switch (liste_type_de_questions[i]) {
        case "addition":
          texte = `$${a} + ${b} = \\dotfill$`;
          texte_corr = `$${a} + ${b} = ${a + b}$`;
          break;
        case "addition_a_trou":
          texte = `$${a} + \\ldots\\ldots = ${a + b}$`;
          texte_corr = `$${a} + ${mise_en_evidence(b)} = ${a + b}$`;
          break;
        case "soustraction":
          if (a == b) {
            a = randint(2, this.sup, b);
          }
          if (a < b) {
            b = [a, (a = b)][0]; //Ã©change les variables a et b
          }
          texte = `$${a} - ${b} = \\dotfill$`;
          texte_corr = `$${a} - ${b} = ${a - b}$`;
          break;
        case "soustraction_a_trou":
          if (a == b) {
            a = randint(2, this.sup, b);
          }
          if (a < b) {
            b = [a, (a = b)][0]; //Ã©change les variables a et b
          }
          texte = `$${a} - \\ldots\\ldots = ${a - b}$`;
          texte_corr = `$${a} - ${mise_en_evidence(b)} = ${a - b}$`;
          break;
      }

      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 9999]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    6,
    "1 : Additions\n2: Additions Ã  trous\n3: Soustractions\n4 : Soustractions Ã  trous\n5 : Additions et soustractions \n6 : Additions et soustractions avec ou sans trous",
  ];
}



/**
 * Tables de divisions classiques, Ã  trou ou un mÃ©lange des deux.
 *
 * Par dÃ©faut ce sont les tables de 2 Ã  9 mais on peut choisir les tables que l'on veut
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM002
  */
function Tables_de_divisions(tables_par_defaut = "2-3-4-5-6-7-8-9") {
  //Diviser deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.sup2 = 1; // classique|a_trous|melange
  this.titre = "Tables de divisions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    let liste_type_de_questions = combinaison_listes(
      ["classique", "a_trous"],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    var type_de_questions = "a_trous";
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = couples[i][0];
      b = couples[i][1];
      if (this.sup2 == 1) {
        type_de_questions = "classique";
      } else if (this.sup2 == 2) {
        type_de_questions = "a_trous";
      } else {
        type_de_questions = liste_type_de_questions[i];
      }
      if (type_de_questions == "classique") {
        // classique
        texte = "$ " + a * b + " \\div " + a + " = \\dotfill $";
      } else {
        // a trous
        if (choice([true, false])) {
          texte = `$ ${a * b} \\div \\ldots\\ldots = ${b}$`;
        } else {
          texte = `$ \\ldots\\ldots \\div ${a}  = ${b}$`;
        }
      }
      texte_corr = `$ ${a * b} \\div ${a} = ${b}$`;
      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    3,
    "1 : Classique\n2: Ã trous\n3: MÃ©langÃ©",
  ];
}

/**
 * Tables de multiplications et de divisions classiques, Ã  trou ou un mÃ©lange des deux.
 *
 * Par dÃ©faut ce sont les tables de 2 Ã  9 mais on peut choisir les tables que l'on veut
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM003
 */
function Tables_de_multiplications_et_divisions(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier ou diviser deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.sup2 = 1; // classique|a_trous|melange
  this.titre = "Tables de multiplications et de divisions";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    let liste_type_de_questions = combinaison_listes(
      ["classique", "a_trous"],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let operation = combinaison_listes(["x", "div"], this.nb_questions); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let type_de_questions;
    for (let i = 0, a, b, texte, texte_corr; i < this.nb_questions; i++) {
      a = couples[i][0];
      b = couples[i][1];
      if (this.sup2 == 1) {
        type_de_questions = "classique";
      } else if (this.sup2 == 2) {
        type_de_questions = "a_trous";
      } else {
        type_de_questions = liste_type_de_questions[i];
      }

      if (operation[i] == "x") {
        if (type_de_questions == "classique") {
          // classique
          texte = "$ " + a + " \\times " + b + " = \\dotfill $";
          texte_corr = "$ " + a + " \\times " + b + " = " + a * b + " $";
        } else {
          // a trous
          if (tables.length > 2) {
            // Si pour le premier facteur il y a plus de 2 posibilitÃ©s on peut le chercher
            texte = choice([
              "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $",
              "$ \\ldots\\ldots" + " \\times " + b + " = " + a * b + " $",
            ]);
          } else {
            // Sinon on demande forcÃ©ment le 2e facteur
            texte = "$ " + a + " \\times \\ldots\\ldots = " + a * b + " $";
          }

          texte_corr = "$ " + a + " \\times " + b + " = " + a * b + " $";
        }
      } else {
        if (type_de_questions == "classique") {
          // classique
          texte = "$ " + a * b + " \\div " + b + " = \\dotfill $";
        } else {
          // a trous
          if (choice([true, false])) {
            texte = `$ ${a * b} \\div \\ldots\\ldots = ${a}$`;
          } else {
            texte = `$ \\ldots\\ldots \\div ${b}  = ${a}$`;
          }
        }
        texte_corr = `$ ${a * b} \\div ${b} = ${a}$`;
      }
      if (est_diaporama) {
        texte = texte.replace("= \\dotfill", "");
      }
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_numerique = [
    "Style de questions",
    3,
    "1 : Classique\n2: Ã trous\n3: MÃ©langÃ©",
  ];
}

/**
 * MÃ©lange Ã©quitable d'additions, de soustractions, de multiplications et de divisions
 *
 * * Niveau 1 Addition 2 chiffres + 1 chiffre, soustraction 2 chiffres - 1 chiffre, tables de 2 Ã  5
 * * Niveau 2 Addition 2 chiffres + 2 chiffres ne dÃ©passant pas 100, soustraction dont le rÃ©sultat est entre 11 et 19, tables de 6 Ã  9
 * * Niveau 3 Addition 2 chiffre + 2 chiffres dÃ©passant 100, soustraction dont le rÃ©sultat est entre 21 et 39, table de 7, 8, 11 ou 12,
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM004
  */
function Quatre_operations() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Les quatre opÃ©rations";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // addition
          if (this.sup == 1) {
            a = randint(11, 89);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(11, 69);
            b = randint(11, 29);
          }
          if (this.sup == 3) {
            a = randint(11, 89);
            b = randint(110 - a, 110 - a + 50);
          }
          texte = `$${a}+${b}$`;
          texte_corr = `$${a}+${b}=${a + b}$`;
          break;
        case 2: // soustraction
          if (this.sup == 1) {
            a = randint(11, 89);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(20, 89);
            b = randint(a - 19, a - 11);
          }
          if (this.sup == 3) {
            a = randint(40, 89);
            b = randint(a - 39, a - 21);
          }
          texte = `$${a}-${b}$`;
          texte_corr = `$${a}-${b}=${a - b}$`;
          break;
        case 3: // multiplication
          if (this.sup == 1) {
            a = randint(2, 5);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(6, 9);
            b = randint(6, 9);
          }
          if (this.sup == 3) {
            a = choice([7, 8, 11, 12]);
            b = randint(2, 9);
          }
          texte = `$${a}\\times${b}$`;
          texte_corr = `$${a}\\times${b}=${a * b}$`;
          break;
        case 4: // division
          if (this.sup == 1) {
            a = randint(2, 5);
            b = randint(2, 9);
          }
          if (this.sup == 2) {
            a = randint(6, 9);
            b = randint(6, 9);
          }
          if (this.sup == 3) {
            a = choice([7, 8, 11, 12]);
            b = randint(2, 9);
          }
          texte = `$${a * b}\\div${a}$`;
          texte_corr = `$${a * b}\\div${a}=${b}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Niveau de difficultÃ©", 3];
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM005
*/
function Ajouter9() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Ajouter 9";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.bouton_aide = modal_texte_court(
      numero_de_l_exercice,
      "Ajouter 9 revient Ã  ajouter 10 et Ã  soustraire 1."
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(0, 9) * 10 + randint(1, 9);
      texte = `$${a}+9$`;
      texte_corr = `$${a}+9=${a + 9}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N12
 */
function Multiplier_entier_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplier un entier par 10, 100, 1 000...";
  this.consigne = "Calculer";
  this.nb_questions = 8;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.bouton_aide = modal_url(numero_de_l_exercice, 'https://mathix.org/glisse-nombre/index.html',
      "Glisse-nombre"
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1, 2, 3, 4, choice([5, 6]), 7, 8, 9];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_de_b = []
    if (this.sup == 2) {
      liste_de_b = combinaison_listes([10, 100, 1000, 10000, 100000], this.nb_questions)
    } else {
      liste_de_b = combinaison_listes([10, 100, 1000], this.nb_questions)
    }
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          a = randint(1, 9)
          break;
        case 2:
          a = randint(2, 9) * 10
          break;
        case 3:
          a = randint(2, 9) * 100
          break;
        case 4:
          a = randint(2, 9) * 1000
          break;
        case 5:
          a = randint(1, 9) * 100 + randint(1, 9)
          break;
        case 6:
          a = randint(1, 9) * 1000 + randint(1, 9)
          break;
        case 7:
          a = randint(1, 9) * 100 + randint(1, 9) * 10 + randint(1, 9)
          break;
        case 8:
          a = randint(1, 9) * 10000 + randint(1, 9) * 100
          break;
        case 9:
          a = randint(1, 9) * 10 + randint(1, 9)
          break;

      }

      b = liste_de_b[i]
      if (choice([true, false])) {
        texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`
        texte_corr = `$${tex_nombre(a)}\\times${tex_nombre(b)}=${tex_nombre(a * b)}$`
      } else {
        texte = `$${tex_nombre(b)}\\times${tex_nombre(a)}$`
        texte_corr = `$${tex_nombre(b)}\\times${tex_nombre(a)}=${tex_nombre(a * b)}$`
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 2, '1 : Multiplication par 10, 100 ou 1 000\n2 : Multiplication par 10, 100, 1 000, 10 000 ou 100 000'];
}

/**
 * Un nombre Ã  2 chiffres ne terminant pas par 9 - 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM006
*/
function Soustraire9() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Soustraire 9";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(1, 9) * 10 + randint(0, 8);
      texte = `$${a}-9$`;
      texte_corr = `$${a}-9=${a - 9}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres non multiple de 10 + 11
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM007
*/
function Ajouter11() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Ajouter 11";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(0, 9) * 10 + randint(1, 9);
      texte = `$${a}+11$`;
      texte_corr = `$${a}+11=${a + 11}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Un nombre Ã  2 chiffres -11
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM008
*/
function Soustraire11() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Soustraire 11";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 1, 1, 1, 2];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (liste_type_de_questions[i] == 1) {
        a = randint(12, 99);
      } else {
        a = randint(2, 9) * 10;
      }

      texte = `$${a}-11$`;
      texte_corr = `$${a}-11=${a - 11}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Somme de deux nombres dont les chiffres des unitÃ©s sont des complÃ©ments Ã  10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM015
*/
function Somme_de_deux_nombres_maries() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Somme de deux nombres mariÃ©s";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, u1, u2, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      u1 = randint(1, 9);
      u2 = 10 - u1;
      a = randint(1, 9) * 10 + u1;
      b = randint(1, 9) * 10 + u2;

      texte = `$${a}+${b}$`;
      texte_corr = `$${a}+${b}=${a + b}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Somme de 3 nombres dont 2 ont des chiffres des unitÃ©s complÃ©ments Ã  10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM018
*/
function Somme_de_deux_nombres_maries_et_un_entier() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Somme de deux nombres mariÃ©s et un entier";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, c, u1, u2, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      u1 = randint(1, 9);
      u2 = 10 - u1;
      a = randint(1, 4) * 10 + u1;
      b = randint(1, 4) * 10 + u2;
      c = randint(1, 100 - a - b);

      switch (liste_type_de_questions[i]) {
        case 1:
          texte = `$${a}+${b}+${c}$`;
          texte_corr = `$${a}+${b}+${c}=${a + b + c}$`;
          break;
        case 2:
          texte = `$${a}+${c}+${b}$`;
          texte_corr = `$${a}+${c}+${b}=${a + b + c}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Mettre en relation un calcul, une traduction en franÃ§ais, une expression, un rÃ©sultat, pour les dÃ©cliner dans diffÃ©rents exercices.
 * Exercice sur le vocabulaire : somme,diffÃ©rence, produit, quotient...
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6C13
 */
function Vocabulaire_et_operations() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Traduire des phrases en calculs et rÃ©ciproquement";
  this.consigne = "";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 4;
  this.sup2 = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let decimal;
    let expf, expn, expc, resultats;
    let type_de_questions_disponibles;
    if (this.sup < 4) type_de_questions_disponibles = [parseInt(this.sup)];
    else type_de_questions_disponibles = [1, 2, 3];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup2) decimal = 10 ** randint(1, 2);
    else decimal = 1;

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      resultats = Choisir_expression_numerique(1, decimal);
      expf = resultats[0];
      expn = resultats[1];
      expc = resultats[2];
      texte = ``;
      texte_corr = ``;
      switch (liste_type_de_questions[i]) {
        case 1:
          texte +=
            num_alpha(i) +
            `Traduire la phrase par un calcul (il nâest pas demandÃ© dâeffectuer ce calcul) : `;
          expf = `l` + expf.substring(1);
          texte += `${expf}.`;
          texte_corr += num_alpha(i) + `${expf} s'Ã©crit ${expn}.`;
          break;
        case 2:
          if (expn.indexOf("ou") > 0)
            expn = expn.substring(0, expn.indexOf("ou")); // on supprime la deuxiÃ¨me expression fractionnaire
          texte +=
            num_alpha(i) + `Traduire le calcul par une phrase en franÃ§ais : `;
          texte += `${expn}`;
          expf = `l` + expf.substring(1);
          texte_corr += num_alpha(i) + `${expn} est ${expf}.`;
          break;
        case 3:
          texte +=
            num_alpha(i) +
            `Traduire la phrase par un calcul et effectuer ce calcul : `;
          expf = `l` + expf.substring(1);
          texte += `${expf}.`;
          expf = `L` + expf.substring(1);
          texte_corr += num_alpha(i) + `${expf} s'Ã©crit ${expn}.<br>`;
          texte_corr += `${expc}.`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de questions",
    4,
    "1 : Phrase -> Calcul\n 2 : Calcul -> Phrase\n 3 : Phrase -> Calcul + rÃ©sultat\n 4 : MÃ©lange",
  ];
  this.besoin_formulaire2_case_a_cocher = ["DÃ©cimaux", false];
}

/**
 * Un "Le compte est bon" avec des solutions "formatÃ©es" pour travailler certains incontournables du calcul mental
 *  @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence CM020
 */
function Compte_Est_Bon() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Atteindre le rÃ©sultat souhaitÃ© avec 6 nombres et les 4 opÃ©rations";
  this.consigne =
    "Trouve le rÃ©sultat en utilisant les quatre opÃ©rations et les nombres du tirage (une seule fois).";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de calcul souhaitÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions, a, b, c, d, e, f, cible, tirage, choix;
    if (!this.sup) {
      // Si rien n'est saisi
      type_de_questions = combinaison_listes([1, 2, 3], this.nb_questions);
    } else {
      if (typeof this.sup == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        type_de_questions = combinaison_listes(
          [parseInt(this.sup)],
          this.nb_questions
        );
      } else {
        type_de_questions = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        for (let i = 0; i < type_de_questions.length; i++)
          type_de_questions[i] = parseInt(type_de_questions[i]);
        this.nb_questions = type_de_questions.length;
      }
    }
    choix = combinaison_listes(range1(5), this.nb_questions);
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (type_de_questions[i]) {
        case 1:
          a = randint(2, 9);
          b = randint(2, 8, a);
          c = randint(1, 9, [a, b]);
          d = randint(1, 9, [a, b, c]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * 100 + b * 10 + c + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times${b}+${c}+${d}$`;
              break;
            case 2:
              cible = calcul(a * 100 + b * 10 + c - d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times${b}+${c}-${d}$`;
              break;
            case 3:
              cible = calcul(a * 100 - b * 10 + c + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}-10\\times${b}+${c}+${d}$`;
              break;
            case 4:
              cible = calcul(a * 100 - b * 10 + c - d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}-10\\times${b}+${c}-${d}$`;
              break;
            default:
              cible = calcul(a * 100 + (b + c) * 10 + d);
              tirage = shuffle([100, 10, a, b, c, d]);
              texte_corr = `Le compte est bon : $${cible}=100\\times${a}+10\\times(${b}+${c})+${d}$`;
          }
          break;

        case 2:
          a = randint(3, 9);
          b = randint(3, 8, a);
          c = randint(3, 9, [a, b]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * 100 + b * 10 + c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}+10\\times${b}+${c}$`;
              break;
            case 2:
              cible = calcul(a * 100 + b * 10 - c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}+10\\times${b}-${c}$`;
              break;
            case 3:
              cible = calcul(a * 100 - b * 10 + c);
              tirage = shuffle([50, 50, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=(50+50)\\times${a}-10\\times${b}+${c}$`;
              break;
            case 4:
              cible = calcul(a * 100 - b * 10 - c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=2\\times50\\times${a}-10\\times${b}-${c}$`;
              break;
            default:
              cible = calcul(a * 100 + b * 10 - c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=4\\times25\\times${a}+10\\times${b}-${c}$`;
          }
          break;
        case 3:
          a = randint(2, 5);
          b = randint(3, 8, a);
          c = randint(3, 9, [a, b]);
          switch (choix[i]) {
            case 1:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(50\\times2+10\\times${b})+${c}$`;
              break;
            case 2:
              cible = calcul(a * (100 + b * 10) - c);
              tirage = shuffle([50, 2, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(50\\times2+10\\times${b})-${c}$`;
              break;
            case 3:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(25\\times4+10\\times${b})+${c}$`;
              break;
            case 4:
              cible = calcul(a * (100 + b * 10) - c);
              tirage = shuffle([25, 4, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times(25\\times4+10\\times${b})-${c}$`;
              break;
            default:
              cible = calcul(a * (100 + b * 10) + c);
              tirage = shuffle([25, 75, 10, a, b, c]);
              texte_corr = `Le compte est bon : $${cible}=${a}\\times((25+75)+10\\times${b})+${c}$`;
          }
          break;
      }
      texte = `Voici le tirage : `;
      for (let i = 0; i < 5; i++) texte += `${tirage[i]} ; `;
      texte += `${tirage[5]}.<br>`;
      texte += `Et le nombre Ã  trouver est : ${cible}.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Niveaux de difficultÃ©s (1 Ã  3)",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}


/**
 * GÃ©nÃ©rateur de tirages pour un compte est bon avec en correction la solution mathador (4 opÃ©rations diffÃ©rentes).
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence CM019
 */

function Le_compte_est_bonV3() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = 'GÃ©nÃ©rateur de "Le compte est bon"';
  this.consigne =
    "Ãcrire un calcul Ã©gal au nombre cible en utilisant les 5 nombres, 4 opÃ©rations diffÃ©rentes et Ã©ventuellement des parenthÃ¨ses.";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 30;
  this.sup2 = 70;
  var max_solution = 70;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let solution_mathador = [];
    let tirage, solution, expression;
    let min_solution = parseInt(this.sup);
    max_solution = parseInt(this.sup2);
    if (min_solution > max_solution) {
      min_solution = max_solution;
      this.sup = this.sup2;
    }
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      solution_mathador = Trouver_solution_mathador(min_solution, max_solution);
      tirage = solution_mathador[0];
      solution = solution_mathador[1];
      expression = solution_mathador[3];

      texte = `Le tirage est le suivant : $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ <br>La cible est : $${solution}$`;
      texte_corr = `Pour le tirage $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ et pour la cible $${solution}$, la solution est : $${expression}=${solution}$ `;
      texte_corr += `ou $${solution_mathador[4]}$.<br>`;
      texte_corr += `En effet : <br>`;
      for (let i = 0; i < 4; i++) {
        texte_corr += `$${solution_mathador[2][i]}$<br>`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Limite infÃ©rieure", max_solution];
  this.besoin_formulaire2_numerique = ["Limite supÃ©rieure", 100];
}
/**
 * @Auteur Jean-Claude Lhote
  * rÃ©fÃ©rence CM020
 * Dans cette version, il est possible de choisir 1,2,3,4 ou 5 nombres du tirage et de contraindre la cible entre deux valeurs
 */
function Le_compte_est_bonV4() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = 'GÃ©nÃ©rateur de "Le compte est bon" version semi-alÃ©atoire';
  this.consigne =
    "Ãcrire un calcul Ã©gal au nombre cible en utilisant les 5 nombres, 4 opÃ©rations diffÃ©rentes et Ã©ventuellement des parenthÃ¨ses.";
  this.nb_questions = 1;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let solution_mathador = [];
    let tirage, solution, expression, min, max, texte, texte_corr;
    let minmax = [];
    let a, b, c, d, e;
    if (!this.sup2) {
      // Si rien n'est saisi
      min = 0;
      max = 100;
    } else {
      if (typeof this.sup2 == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        min = 0;
        max = this.sup2;
      } else {
        minmax = this.sup2.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        min = minmax[0];
        max = minmax[1];
      }
    }
    if (!this.sup) {
      // Si rien n'est saisi
      solution_mathador = Trouver_solution_mathador(min, max);
    } else {
      if (typeof this.sup == "number") {
        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur
        solution_mathador = Trouver_solution_mathador(min, max, this.sup);
      } else {
        tirage = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des -
        for (let i = 0; i < tirage.length; i++) tirage[i] = parseInt(tirage[i]);
        solution_mathador = Trouver_solution_mathador(min, max, ...tirage);
      }
    }

    tirage = solution_mathador[0];
    solution = solution_mathador[1];
    expression = solution_mathador[3];

    texte = `Le tirage est le suivant : $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ <br>La cible est : $${solution}$`;
    texte_corr = `Pour le tirage $${tirage[0]}~;~${tirage[1]}~;~${tirage[2]}~;~${tirage[3]}~;~${tirage[4]}$ et pour la cible $${solution}$, la solution est : $${expression}=${solution}$ `;
    texte_corr += `ou $${solution_mathador[4]}$.<br>`;
    texte_corr += `En effet : <br>`;
    for (let i = 0; i < 4; i++) {
      texte_corr += `$${solution_mathador[2][i]}$<br>`;
    }
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des nombres du tirage (de aucun Ã  cinq)",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
  this.besoin_formulaire2_texte = [
    "Intervalle pour la cible (ou rien pour cible non contrainte)",
    "Minimum-Maximum (Ã©viter de trop contraindre la cible, cela peut bloquer le programme)",
  ]; // Texte, tooltip

  // this.besoin_formulaire2_numerique = ['Limite supÃ©rieure',100];
}
/**
 * @Auteur Jean-Claude Lhote
 * @param {number} min Valeur minimum pour la solution
 * @param {number} max Valeur maximum pour la solution
 * Cette fonction produit alÃ©atoirement un tirage de 5 nombres, une solution, un tableau contenant les calculs successifs, une chaine contenant l'expression mathador correspondante
 * @returns {array} [tirage=[a,b,c,d,e],solution (compris entre min et max),operations_successives=[string1,string2,string3,string4,string5],expression]
 * les string1 Ã  5 ainsi que l'expresion sont ) mettre en mode maths.
 * sert dans les exercices CM019,
 */
function Trouver_solution_mathador(
  min,
  max,
  A = 1,
  B = 4,
  C = 8,
  D = 3,
  E = 5
) {
  let eureka,
    a,
    b,
    c,
    d,
    e,
    tirage,
    nombres_restants,
    operations_restantes,
    expression_en_cours_f,
    expression_en_cours_d,
    op,
    part1_f,
    part2_f,
    part1_d,
    part2_d,
    operations_successives = [],
    solution;
  let liste_choix = [
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
  ];
  eureka = false;
  let nb_determines = arguments.length - 2;
  while (eureka == false) {
    tirage = [];

    if (nb_determines < 1) a = parseInt(choice(liste_choix));
    else a = A;
    if (nb_determines < 2)
      b = parseInt(choice(liste_choix, [13, 14, 15, 16, 17, 18, 19, 20, a]));
    else b = B;
    if (nb_determines < 3)
      c = parseInt(
        choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20, a, b])
      );
    else c = C;
    if (nb_determines < 4)
      d = parseInt(
        choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20, b, c])
      );
    else d = D;
    if (nb_determines < 5)
      e = parseInt(choice(liste_choix, [12, 13, 14, 15, 16, 17, 18, 19, 20]));
    else e = E;
    tirage.push(a, b, c, d, e);
    nombres_restants = shuffle(tirage);
    operations_restantes = ["\\times", "+", "-", "\\div"];
    operations_restantes = shuffle(operations_restantes);
    expression_en_cours_f = [
      `${nombres_restants[0]}`,
      `${nombres_restants[1]}`,
      `${nombres_restants[2]}`,
      `${nombres_restants[3]}`,
      `${nombres_restants[4]}`,
    ];
    expression_en_cours_d = [
      `${nombres_restants[0]}`,
      `${nombres_restants[1]}`,
      `${nombres_restants[2]}`,
      `${nombres_restants[3]}`,
      `${nombres_restants[4]}`,
    ];

    while (nombres_restants.length > 1) {
      b = nombres_restants.pop();
      a = nombres_restants.pop();
      part2_f = expression_en_cours_f.pop();
      part1_f = expression_en_cours_f.pop();
      part2_d = expression_en_cours_d.pop();
      part1_d = expression_en_cours_d.pop();

      op = operations_restantes.pop();
      if (op == "\\times") {
        c = a * b;
        expression_en_cours_f.push(`${part1_f}${op}${part2_f}`);
        expression_en_cours_d.push(`${part1_d}${op}${part2_d}`);
        nombres_restants.push(c);
      } else if (op == "\\div") {
        if (a % b == 0) {
          c = a / b;
          if (part1_f[0] == "\\") {
            part1_f = part1_f.substring(6, part1_f.length);
            part1_f = part1_f.substring(0, part1_f.length - 7);
          }
          if (part2_f[0] == "\\") {
            part2_f = part2_f.substring(6, part2_f.length);
            part2_f = part2_f.substring(0, part2_f.length - 7);
          }
          expression_en_cours_f.push(`\\dfrac{${part1_f}}{${part2_f}}`);
          expression_en_cours_d.push(`${part1_d}${op}${part2_d}`);
          nombres_restants.push(c);
        } else break;
      } else if (op == "-") {
        if (a > b) {
          c = a - b;
          expression_en_cours_f.push(
            `\\left(${part1_f}${op}${part2_f}\\right)`
          );
          expression_en_cours_d.push(
            `\\left(${part1_d}${op}${part2_d}\\right)`
          );
          nombres_restants.push(c);
        } else break;
      } else if (op == "+") {
        c = a + b;
        if (part2_f.substring(0, 2) == "\\l") {
          part2_f = part2_f.substring(6, part2_f.length);
          part2_f = part2_f.substring(0, part2_f.length - 7);
        }
        expression_en_cours_f.push(`\\left(${part1_f}${op}${part2_f}\\right)`);
        if (part2_d.substring(0, 2) == "\\l") {
          part2_d = part2_d.substring(6, part2_d.length);
          part2_d = part2_d.substring(0, part2_d.length - 7);
        }
        expression_en_cours_d.push(`\\left(${part1_d}${op}${part2_d}\\right)`);
        nombres_restants.push(c);
      }
      operations_successives.push(`${a}` + op + `${b}=${c}`);
    }

    if (nombres_restants.length == 1 && operations_restantes.length == 0) {
      solution = nombres_restants[0];
      if (solution >= min && solution <= max) {
        eureka = true;
        if (
          expression_en_cours_f[0][0] == "\\" &&
          expression_en_cours_f[0][1] == `l`
        ) {
          expression_en_cours_f[0] = expression_en_cours_f[0].substring(
            6,
            expression_en_cours_f[0].length
          );
          expression_en_cours_f[0] = expression_en_cours_f[0].substring(
            0,
            expression_en_cours_f[0].length - 7
          );
        }
        if (
          expression_en_cours_d[0][0] == "\\" &&
          expression_en_cours_d[0][1] == `l`
        ) {
          expression_en_cours_d[0] = expression_en_cours_d[0].substring(
            6,
            expression_en_cours_d[0].length
          );
          expression_en_cours_d[0] = expression_en_cours_d[0].substring(
            0,
            expression_en_cours_d[0].length - 7
          );
        }
        return [
          tirage,
          solution,
          operations_successives,
          expression_en_cours_f,
          expression_en_cours_d,
        ];
      } else operations_successives = [];
    } else operations_successives = [];
  }
}
/**
 * Lire un nombre / Ã©crire un nombre : passer d'une Ã©criture Ã  une autre et inversement
 * On peut fixer la classe maximale : unitÃ©s, miliers, millions, milliards
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N10
 */

function Ecrire_nombres_entiers() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire un nombre en chiffres ou en lettres"
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 3
  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 2)
      this.consigne = "Ãcrire le nombre en chiffres"
    else
      this.consigne = "Ãcrire le nombre en lettres"
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es 
    let type_de_questions_disponibles;
    if (this.sup2 == 1) type_de_questions_disponibles = [1, 1, 1, 2, 2]
    else if (this.sup2 == 2) type_de_questions_disponibles = [1, 2, 2, 2, 3]
    else if (this.sup2 == 3) type_de_questions_disponibles = [2, 2, 3, 3, 4]
    else type_de_questions_disponibles = [2, 3, 3, 4, 4]

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, c, nombre, tranche, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {

      nombre = 0
      tranche = []
      while (nombre == 0) {
        tranche.splice(0)
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          a = randint(1, 9)
          b = randint(1, 9)
          c = randint(1, 9)
          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))
        }
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          nombre += tranche[j] * 10 ** (j * 3)
        }
        if (tranche[liste_type_de_questions[i] - 1] == 0) nombre = 0
      }
      if (this.sup == 1) {
        if (!est_diaporama) texte = `$${tex_nombre(nombre)}$ : \\dotfill`
        else texte = `$${tex_nombre(nombre)}$`
        if (!est_diaporama) texte_corr = `$${tex_nombre(nombre)}$ : ${nombreEnLettres(nombre)}.`
        else texte_corr = `${nombreEnLettres(nombre)}.`
      }
      else {
        if (!est_diaporama) texte = `${nombreEnLettres(nombre)} : \\dotfill`
        else texte = `${nombreEnLettres(nombre)}`
        if (!est_diaporama) texte_corr = `${nombreEnLettres(nombre)} : $${tex_nombre(nombre)}$.`
        else texte_corr = `$${tex_nombre(nombre)}$.`
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  this.besoin_formulaire2_numerique = ['Niveau', 4, '1 : ÃlÃ©mentaire\n2 : Facile\n3 : Moyen\n4 : Difficile']
}

/**
 * 6N10-4
 * Supprimer les zÃ©ros inutiles, sÃ©parer les classes d'un nombre entier.
 * @Auteur Jean-Claude Lhote
 */
function Ecrire_nombres_entiers_formates() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire correctement les grands nombres entiers."
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 2
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.consigne = `Ãcrire les nombres en chiffres en supprimant les zÃ©ros inutiles et en sÃ©parant les classes.`
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es 
    function zeroSuperflus(n) {
      let nzero = randint(0, 2), nombrestring = n.toString()
      for (let k = 0; k < nzero; k++) nombrestring = `0` + nombrestring
      return nombrestring
    }
    for (
      let i = 0, texte, texte_corr, a, b, c, nombre, tranche, nombrestring, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {

      nombre = 0
      tranche = []
      while (nombre == 0) {
        tranche.splice(0)
        for (let j = 0; j < 3; j++) {
          a = randint(1, 9)
          b = randint(1, 9)
          c = randint(1, 9)
          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))
        }
        for (let j = 0; j < 3; j++) {
          nombre += tranche[j] * 10 ** (j * 3)
        }
        if (tranche[2] == 0) nombre = 0
      }
      nombrestring = zeroSuperflus(nombre)
      if (!est_diaporama) texte = `$${nombrestring}$ : \\dotfill`
      else texte = `$${nombrestring}$`
      if (!est_diaporama) texte_corr = `$${nombrestring}=${tex_nombre(nombre)}$.`
      else texte_corr = `${tex_nombre(nombre)}.`
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  //this.besoin_formulaire2_numerique = ['Niveau', 3, '1 : Facile\n2 : Moyen\n3 : Difficile']
}
/**
 * Lire un nombre / Ã©crire un nombre : passer d'une Ã©criture Ã  une autre et inversement
 * On peut fixer la classe maximale : unitÃ©s, miliers, millions, milliards
 * @Auteur Jean-Claude Lhote
 * 6N23-0
 */

function Ecrire_nombres_decimal() {
  "use strict"
  Exercice.call(this)
  this.titre = "Ãcrire un nombre dÃ©cimal en chiffres ou en lettres"
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.sup2 = 1
  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.sup == 2)
      this.consigne = "Ãcrire le nombre en chiffres"
    else
      this.consigne = "Ãcrire le nombre en lettres"
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es 
    let type_de_questions_disponibles = [parseInt(this.sup2) + 1]; // <1 000, <1 000 000) 
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, c, nombre, tranche, part_ent, part_dec, nb_dec, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {

      nombre = 0
      tranche = []
      while (nombre == 0) {
        tranche.splice(0)
        part_ent = 0
        part_dec = 0
        for (let j = 0; j < liste_type_de_questions[i]; j++) {
          a = randint(1, 9)
          b = randint(1, 9)
          c = randint(1, 9)
          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))
        }
        for (let j = 1; j < liste_type_de_questions[i]; j++) {
          part_ent += tranche[j] * 10 ** ((j - 1) * 3)
          // nombre += tranche[j] * 10 ** ((j-1)*3)
        }
        part_dec = tranche[0]
        nombre = calcul(part_ent + part_dec / 1000)
        // if (tranche[liste_type_de_questions[i]-1]==0) nombre=0
        if (tranche[1] < 2) nombre = 0
        if (tranche[0] == 0) nombre = 0

      }
      if (part_dec % 10 != 0) nb_dec = 3
      else if (part_dec % 100 != 0) nb_dec = 2
      if (this.sup == 1) {
        if (!est_diaporama) texte = `$${tex_nombre(nombre)}$ : \\dotfill`
        else texte = `$${tex_nombre(nombre)}$`
        if (!est_diaporama) texte_corr = `$${tex_nombre(nombre)}$ : ${nombreEnLettres(nombre)}.`
        else texte_corr = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)}.`
      }
      else {
        if (!est_diaporama) texte = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)} : \\dotfill`
        else texte = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)}`
        if (!est_diaporama) texte_corr = `${nombreEnLettres(part_ent)} unitÃ©s et ${nombreEnLettres(part_dec)} : $${tex_nombre(nombre)}$.`
        else texte_corr = `$${tex_nombre(nombre)}$.`
      }
      texte = texte.replace('et-un unitÃ©s', 'et-une unitÃ©s')
      texte_corr = texte_corr.replace('et-un unitÃ©s', 'et-une unitÃ©s')
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type d\'exercice', 2, '1 : Ãcrire en lettres un nombre donnÃ© en chiffres\n2 : Ãcrire en chiffres un nombre donnÃ© en lettres'];
  this.besoin_formulaire2_numerique = ['Classe maximum', 2, '1 : UnitÃ©s\n2 : Milliers']
}

/**
 * Le nombre de dizaines, centaines et milliers Ã©tant donnÃ©, il faut Ã©crire le nombre.
 *
 * 2 fois sur 5 il y a chevauchement entre les classes
 * @Auteur RÃ©mi Angot
 * 6N10-1
 */
function Exercice_numeration_entier() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Ãcrire un nombre Ã  partir de son nombre de dizaines, de centaines, de milliers...";
  this.consigne = "Ãcrire en chiffres chacun des nombres.";
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2]; // sans chevauchement ou avec chevauchement
    let liste_type_de_questions = combinaison_listes(
      [1, 1, 1, 2, 2],
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, rang_a, rang_b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, 8) * 10 + randint(1, 5);
      b = randint(2, 8) * 10 + randint(1, 5);
      let rangs = [
        "unitÃ©s",
        "dizaines",
        "centaines",
        "milliers",
        "dizaines de mille",
        "centaines de mille",
        "millions",
      ];
      rang_a = randint(0, 2);
      if (liste_type_de_questions[i] == 1) {
        rang_b = randint(rang_a + 2, 6);
      } else {
        rang_b = rang_a + 1;
      }

      texte = `$\\text{${b}  ${rangs[rang_b]} et ${a} ${rangs[rang_a]}}$`;
      texte_corr = `$${b} \\text{ ${rangs[rang_b]} et }${a} \\text{ ${rangs[rang_a]
        } : } ${tex_nombre(b * Math.pow(10, rang_b))} + ${a * tex_nombre(Math.pow(10, rang_a))} =${tex_nombre(
          b * Math.pow(10, rang_b) + a * Math.pow(10, rang_a)
        )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Des questions sur le nombre ou le chiffre de centaines, de dizaines, de dixiÃ¨mes, de centiÃ¨mes...
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N10-2
 */
function Decomposition_nombre_decimal() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DÃ©composer un nombre dÃ©cimal (nombre de..., chiffre de...)";
  this.consigne = "ComplÃ©ter les phrases suivantes.";
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [
      1,
      2,
      choice([3, 4, 5]),
      choice([6, 7, 8]),
      choice([9, 10]),
      choice([11, 12]),
    ]; // sans chevauchement ou avec chevauchement
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let m = randint(1, 9); // le nombre sera le mÃªme pour tout l'exercice
    let c = randint(0, 9, [m]);
    let d = randint(0, 9, [m, c]);
    let u = randint(0, 9, [m, c, d]);
    let di = randint(0, 9, [m, c, d, u]);
    let ci = randint(0, 9, [m, c, d, u, di]);
    let mi = randint(1, 9, [m, c, d, u, di, ci]);
    let n =
      m.toString() +
      "" +
      c.toString() +
      d.toString() +
      u.toString() +
      "," +
      di.toString() +
      ci.toString() +
      mi;
    //calcul ne semble pas marcher avec 7 chiffres significatifs
    this.consigne = `On considÃ¨re le nombre $${n}$. ComplÃ©ter les phrases suivantes.`;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          texte = "La partie entiÃ¨re de ce nombre est : ";
          texte_corr =
            texte + `$${tex_nombrec(m * 1000 + c * 100 + d * 10 + u)}$`;
          break;
        case 2:
          texte = "La partie dÃ©cimale de ce nombre est : ";
          texte_corr =
            texte + `$${tex_nombrec(di / 10 + ci / 100 + mi / 1000)}$`;
          break;
        case 3:
          texte = "Le chiffre des dizaines de ce nombre est : ";
          texte_corr = texte + `$${d}$`;
          break;
        case 4:
          texte = "Le chiffre des centaines de ce nombre est : ";
          texte_corr = texte + `$${c}$`;
          break;
        case 5:
          texte = "Le chiffre des miliers de ce nombre est : ";
          texte_corr = texte + `$${m}$`;
          break;
        case 6:
          texte = "Le chiffre des dixiÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${di}$`;
          break;
        case 7:
          texte = "Le chiffre des centiÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${ci}$`;
          break;
        case 8:
          texte = "Le chiffre des milliÃ¨mes de ce nombre est : ";
          texte_corr = texte + `$${mi}$`;
          break;
        case 9:
          texte = "Le nombre de dizaines de ce nombre est : ";
          texte_corr = texte + `$${tex_nombrec(d + c * 10 + m * 100)}$`;
          break;
        case 10:
          texte = "Le nombre de centaines de ce nombre est : ";
          texte_corr = texte + `$${tex_nombrec(c + m * 10)}$`;
          break;
        case 11:
          texte = "Le nombre de dixiÃ¨mes de ce nombre est : ";
          texte_corr =
            texte +
            `$${tex_nombrec(di + u * 10 + d * 100 + c * 1000 + m * 10000)}$`;
          break;
        case 12:
          texte = "Le nombre de centiÃ¨mes de ce nombre est : ";
          texte_corr =
            texte +
            `$${tex_nombrec(
              ci + di * 10 + u * 100 + d * 1000 + c * 10000 + m * 100000
            )}$`;
          break;
      }

      texte_corr += ".";
      texte += "\\ldots";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * 100-...=
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM012
 */
function Complement_a_100() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ComplÃ©ment Ã  100";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(11, 89);
      texte = `$100-${a}$`;
      texte_corr = `$100-${a}=${100 - a}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Une soustraction dont le premier terme est un multiple de 10
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM013
*/
function Complement_a_une_dizaine() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ComplÃ©ment Ã  une dizaine";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, 9) * 10;
      b = randint(2, a - 11);
      texte = `$${a}-${b}$`;
      texte_corr = `$${a}-${b}=${a - b}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Division d'un entier par 10, 100, 1000
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM016
*/
function Diviser_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Diviser un entier par 10, 100 ou 1000";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice([randint(1, 9), randint(11, 99), randint(101, 999)]);
      b = choice([10, 100, 1000]);
      texte = `$${tex_nombre(a)}\\div${tex_nombre(b)}$`;
      texte_corr = `$${tex_nombre(a)}\\div${tex_nombre(b)}=${tex_nombrec(
        a / b
      )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Un entier Ã  un 1 ou 2 chiffres, un nombre dÃ©cimal avec une partie dÃ©cimale Ã  un ou 2 chiffres Ã  diviser par 10, 100 ou 1000
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM017
*/
function Diviser_decimal_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Diviser un nombre dÃ©cimal par 10, 100 ou 1000";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice([
        randint(1, 9),
        randint(11, 99),
        calcul(randint(11, 99) / 10),
        calcul(randint(101, 999) / 100),
        calcul(randint(1, 9) / 10),
      ]);
      b = choice([10, 100, 1000]);
      texte = `$${tex_nombre(a)}\\div${tex_nombre(b)}$`;
      texte_corr = `$${tex_nombre(a)}\\div${tex_nombre(b)}=${tex_nombrec(
        a / b
      )}$`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer la moitiÃ© d'un nombre pair, d'un impair infÃ©rieur Ã  20, d'un multiple de 200, d'un nombre de la forme a00 avec a impair, d'un nombre de la forme
 *  a,b avec a et b pairs ou 1xx avec xx un nombre pair
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM009
*/
function Moitie() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "MoitiÃ©";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(6);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 2
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${a * 2} \\text{ est } ${a}$`;
          break;
        case 2: // Impair infÃ©rieur Ã  20
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${a * 2 + 1}$`;
          texte_corr = `$\\text{La moitiÃ© de }${a * 2 + 1
            } \\text{ est } ${tex_nombrec(a + 5 / 10)}$`;
          break;
        case 3: // Table de 200
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombre(a * 2 * 100)}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombre(
            a * 2 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 4: // a00 avec a impair
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombre((a * 2 + 1) * 100)}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombre(
            (a * 2 + 1) * 100
          )} \\text{ est } ${tex_nombre(a * 100 + 50)}$`;
          break;
        case 5: // a,b avec a et b pairs
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${tex_nombrec(
            a * 2 + (b * 2) / 100
          )}$`;
          texte_corr = `$\\text{La moitiÃ© de }${tex_nombrec(
            a * 2 + (b * 2) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
        case 6: // 1xx avec xx un nombre pair
          a = randint(2, 9);
          texte = `$\\text{La moitiÃ© de }${100 + a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${100 + a * 2} \\text{ est } ${50 + a
            }$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le tiers d'un multiple de 3, d'un multiple de 300, d'un multiple de 30 ou d'un nombre a,b avec a et b multiples de 3
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM010
 */
function Tiers() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tiers";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 3
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${a * 3}$`;
          texte_corr = `$\\text{Le tiers de }${a * 3} \\text{ est } ${a}$`;
          break;
        case 2: // Table de 300
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombre(a * 3 * 100)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombre(
            a * 3 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 3: // Table de 30
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombre(a * 3 * 10)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombre(
            a * 3 * 10
          )} \\text{ est } ${tex_nombre(a * 10)}$`;
          break;
        case 4: // a,b avec a et b divisibles par 3
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{Le tiers de }${tex_nombrec(a * 3 + (b * 3) / 100)}$`;
          texte_corr = `$\\text{Le tiers de }${tex_nombrec(
            a * 3 + (b * 3) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le quart d'un multiple de 4, d'un impair, d'un multiple de 400, d'un multiple de 40, d'un nombre a,b avec a et b multiples de 4
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence CM011
*/
function Quart() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Quart";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(5);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Table de 4
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${a * 4}$`;
          texte_corr = `$\\text{Le quart de }${a * 4} \\text{ est } ${a}$`;
          break;
        case 2: // Impair
          a = randint(2, 9);
          b = choice([1, 2, 3]);
          texte = `$\\text{Le quart de }${a * 4 + b}$`;
          texte_corr = `$\\text{Le quart de }${a * 4 + b
            } \\text{ est } ${tex_nombrec(a + b / 4)}$`;
          break;
        case 3: // Table de 400
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombre(a * 4 * 100)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombre(
            a * 4 * 100
          )} \\text{ est } ${tex_nombre(a * 100)}$`;
          break;
        case 4: // Table de 40
          a = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombre(a * 4 * 10)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombre(
            a * 4 * 10
          )} \\text{ est } ${tex_nombre(a * 10)}$`;
          break;
        case 5: // a,b avec a et b divisibles par 4
          a = randint(2, 9);
          b = randint(2, 9);
          texte = `$\\text{Le quart de }${tex_nombrec(a * 4 + (b * 4) / 100)}$`;
          texte_corr = `$\\text{Le quart de }${tex_nombrec(
            a * 4 + (b * 4) / 100
          )} \\text{ est } ${tex_nombrec(a + b / 100)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Calculer le double ou le triple d'un nombre, calculer la moitiÃ© d'un nombre pair ou le tiers d'un multiple de 3
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence CM014
 */
function Double_moitie_tiers_triple() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Double, moitiÃ©, tiers, triple";
  this.consigne = "Calculer";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 1; // niveau de difficultÃ©

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(4);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, a, b, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1: // Double
          a = randint(2, 9);
          texte = `$\\text{Le double de }${a}$`;
          texte_corr = `$\\text{Le double de }${a} \\text{ est } ${a * 2}$`;
          break;
        case 2: // MoitiÃ©
          a = randint(2, 9) * 2;
          texte = `$\\text{La moitiÃ© de }${a * 2}$`;
          texte_corr = `$\\text{La moitiÃ© de }${a * 2} \\text{ est } ${a}$`;
          break;
        case 3: // Triple
          a = randint(2, 9);
          texte = `$\\text{Le triple de }${a}$`;
          texte_corr = `$\\text{Le triple de }${a} \\text{ est } ${a * 3}$`;
          break;
        case 4: // Tiers
          a = randint(2, 9);
          texte = `$\\text{Le tiers de }${a * 3}$`;
          texte_corr = `$\\text{Le tiers de }${a * 3} \\text{ est } ${a}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * Les 2 facteurs peuvent terminer par aucun, 1, 2 ou 3 zÃ©ros
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence 6C10-2
 */
function Exercice_tables_de_multiplications_et_multiples_de_10(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.titre = "Tables de multiplications et multiples de 10";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    for (
      let i = 0, a, b, k1, k2, texte, texte_corr, melange;
      i < this.nb_questions;
      i++
    ) {
      a = couples[i][0];
      b = couples[i][1];
      if (a > 1) {
        k1 = choice([1, 10, 100, 1000]);
      } else {
        k1 = choice([10, 100, 1000]);
      }
      k2 = choice([1, 10, 100, 1000]);
      a = k1 * a;
      b = k2 * b;
      melange = randint(0, 1);
      if (melange == 1) {
        // Ã©change a et b pour que les multiplications ne soient pas toujours dans le mÃªme ordre (surtout lorsque tables n'a qu'un seul Ã©lÃ©ment)
        let c = a;
        a = b;
        b = c;
      }

      texte =
        "$ " + tex_nombre(a) + " \\times " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " \\times " +
        tex_nombre(b) +
        " = " +
        tex_nombre(a * b) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}

/**
 * Multiplier deux nombres dÃ©cimaux
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10-3
 */
function Exercice_tables_de_multiplications_et_decimaux(
  tables_par_defaut = "2-3-4-5-6-7-8-9"
) {
  //Multiplier deux nombres
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = tables_par_defaut;
  this.titre = "Tables de multiplications et nombres dÃ©cimaux";
  this.consigne = "Calculer";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (!this.sup) {
      // Si aucune table n'est saisie
      this.sup = "2-3-4-5-6-7-8-9";
    }
    let tables = [];
    if (typeof this.sup == "number") {
      // Si c'est un nombre c'est qu'il y a qu'une seule table
      tables[0] = this.sup;
    } else {
      tables = this.sup.split("-"); // Sinon on crÃ©e un tableau Ã  partir des valeurs sÃ©parÃ©es par des ;
    }
    let couples = creer_couples(
      tables,
      [2, 3, 4, 5, 6, 7, 8, 9, 10],
      this.nb_questions
    ); //Liste tous les couples possibles (2,3)â (3,2)
    for (
      let i = 0, a, b, k1, k2, couple, texte, texte_corr;
      i < this.nb_questions;
      i++
    ) {
      a = couples[i][0];
      b = couples[i][1];
      couple = choice([
        [1, 10],
        [1, 100],
        [1, 1000],
        [10, 100],
        [10, 1000],
        [100, 100],
        [100, 1000],
      ]);
      k1 = couple[0];
      k2 = couple[1];
      a = Algebrite.eval(a / k1);
      b = Algebrite.eval(b / k2);
      if (a == 1) {
        a = 0.01;
      }
      if (b == 1) {
        b = 0.1;
      }
      texte =
        "$ " + tex_nombre(a) + " \\times " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " \\times " +
        tex_nombre(b) +
        " = " +
        tex_nombre(Algebrite.eval(a * b)) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_texte = [
    "Choix des tables",
    "Nombres sÃ©parÃ©s par des tirets",
  ]; // Texte, tooltip
}

/**
 * Additionner deux entiers
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10-4
 */
function Exercice_tables_d_additions(max = 20) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Addition de deux entiers";
  this.consigne = "Calculer";
  this.sup = max; // Le paramÃ¨tre accessible Ã  l'utilisateur sera la valeur maximale
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = randint(2, this.sup);
      b = randint(2, this.sup);
      texte = "$ " + tex_nombre(a) + " + " + tex_nombre(b) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_nombre(a) +
        " + " +
        tex_nombre(b) +
        " = " +
        tex_nombre(a + b) +
        " $";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 99999];
}

/**
 * Simplifier une fraction, le facteur commun est infÃ©rieur Ã  une valeur donnÃ©e en paramÃ¨tre qui est 11 par dÃ©faut
 * @Auteur RÃ©mi Angot
 *  5N13
 */
function Exercice_fractions_simplifier(max = 11) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = max; // Correspond au facteur commun
  this.titre = "Simplification de fractions";
  this.consigne = "Simplifier les fractions suivantes.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux
    for (
      let i = 0, fraction, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions;
      i++
    ) {
      fraction = choice(liste_fractions); //
      a = fraction[0];
      b = fraction[1];
      k = randint(2, this.sup);
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme rÃ©ponse
      texte =
        "$ " +
        tex_fraction(k * a, k * b) +
        " = " +
        tex_fraction("\\phantom{00000000000000}", "") +
        " = " +
        tex_fraction("\\phantom{0000}", "") +
        " $";
      texte_corr =
        "$ " +
        tex_fraction(k * a, k * b) +
        " = " +
        tex_fraction(k + " \\times " + a, k + " \\times " + b) +
        " = " +
        tex_fraction(a, b) +
        " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
  this.besoin_formulaire_numerique = [
    "Valeur maximale du facteur commun",
    99999,
  ];
}

/**
 * Ãcrire une fraction avec un nouveau dÃ©nominateur qui est un multiple de son dÃ©nominateur (ce multiple est infÃ©rieur Ã  une valeur maximale de 11 par dÃ©faut)
 * @Auteur RÃ©mi Angot
 * 5N13-2 et 6N41
 */
function Egalites_entre_fractions() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 11; // Correspond au facteur commun
  this.titre = "ÃgalitÃ©s entre fractions simples";
  this.consigne = "ComplÃ©ter les Ã©galitÃ©s.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux
    let liste_type_de_questions = combinaison_listes(
      [1, 1, 1, 1, 2],
      this.nb_questions
    );
    for (
      let i = 0, fraction, a, b, c, d, k, texte, texte_corr, cpt = 0;
      i < this.nb_questions;
      i++
    ) {
      if (liste_type_de_questions[i] == 1) {
        // Ã©galitÃ© entre 2 fractions
        fraction = choice(liste_fractions); //
        a = fraction[0];
        b = fraction[1];
        k = randint(2, this.sup);
        c = k * a;
        d = k * b;
        enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme fraction de dÃ©part
        texte = `$${tex_fraction(a, b)} = ${tex_fraction(
          "\\phantom{00000000000000}",
          "\\phantom{00000000000000}"
        )} = ${tex_fraction("\\phantom{0000}", d)}$`;
        texte_corr = `$${tex_fraction(a, b)} = ${tex_fraction(
          a + mise_en_evidence("\\times" + k),
          b + mise_en_evidence("\\times" + k)
        )} = ${tex_fraction(c, d)}$`;
      } else {
        //Ã©crire un entier sous la forme d'une fraction
        a = randint(1, 9);
        d = randint(2, 9);
        c = a * d;
        texte = `$${a} = ${tex_fraction(
          "\\phantom{00000000000000}",
          "\\phantom{00000000000000}"
        )} = ${tex_fraction("\\phantom{0000}", d)}$`;
        texte_corr = `$${a} = \\dfrac{${a}}{1} =${tex_fraction(
          a + mise_en_evidence("\\times" + d),
          "1" + mise_en_evidence("\\times" + d)
        )} = ${tex_fraction(c, d)}$`;
      }

      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale du facteur commun", 99];
}

/**
 * Un nombre est-il divisible par :
 *
 * * 2, 5, 10 ?
 * * 3, 9 ?
 * * 2, 3, 5, 9, 10 ?
 * * 2, 3, 5, 9, 10  et un autre nombre qui peut Ãªtre 7, 13, 17, ou 19 ?
 * @Auteur RÃ©mi Angot
 * 6N43
 */
function Criteres_de_divisibilite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 4; // Correspond au facteur commun
  this.titre = "CritÃ¨res de divisibilitÃ©";
  this.consigne = "RÃ©pondre aux questions suivantes en justifiant.";
  this.spacing = 2;
  this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_des_exercices_disponibles;
    if (this.sup == 1) {
      liste_des_exercices_disponibles = [2, 5, 10];
    }
    if (this.sup == 2) {
      liste_des_exercices_disponibles = [3, 9];
    }
    if (this.sup == 3) {
      liste_des_exercices_disponibles = [2, 3, 5, 9, 10];
    }
    if (this.sup > 3) {
      liste_des_exercices_disponibles = [2, 3, 5, 9, 10, "autre"];
    }
    let liste_type_de_questions = combinaison_listes(
      liste_des_exercices_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, fraction, n, u, texte, texte_corr, somme_string, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 2:
          u = randint(1, 2);
          n = randint(10, 999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $2$ ?`;
          if (u % 2 == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $2$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $2$.`;
          }
          break;

        case 3:
          n = choice([randint(100, 999), randint(10000, 99999)]).toString(); // transformÃ© en string pour avoir accÃ¨s aux chiffres
          somme_string = somme_des_chiffre(n);
          texte = `$${tex_nombre(n)}$ est-il divisible par $3$ ?`;
          if (calcul(somme_string) % 3 == 0) {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=3\\times${calcul(somme_string) / 3
              }$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ est divisible par $3$ donc $${tex_nombre(
              n
            )}$ est divisible par $3$.`;
          } else {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=3\\times${(calcul(somme_string) - (calcul(somme_string) % 3)) / 3
              }+${calcul(somme_string) % 3}$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ n'est pas divisible par $3$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $3$.`;
          }
          break;

        case 9:
          n = choice([randint(100, 999), randint(10000, 99999)]).toString(); // transformÃ© en string pour avoir accÃ¨s aux chiffres
          somme_string = somme_des_chiffre(n);
          texte = `$${tex_nombre(n)}$ est-il divisible par $9$ ?`;
          if (calcul(somme_string) % 9 == 0) {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=9\\times${calcul(somme_string) / 9
              }$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ est divisible par $9$ donc $${tex_nombre(
              n
            )}$ est divisible par $9$.`;
          } else {
            texte_corr = `$${somme_string}=${calcul(somme_string)}=9\\times${(calcul(somme_string) - (calcul(somme_string) % 9)) / 9
              }+${calcul(somme_string) % 9}$<br>`;
            texte_corr += `La somme des chiffres de $${tex_nombre(
              n
            )}$ n'est pas divisible par $9$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $9$.`;
          }
          break;

        case 5:
          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]); // 1 fois sur 2 Ã§a sera divisible par 5
          n = randint(10, 9999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $5$ ?`;
          if (u % 5 == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $5$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $5$.`;
          }
          break;

        case 10:
          u = choice([randint(1, 9), 0]); // 1 fois sur 2 Ã§a sera divisible par 10
          n = randint(10, 9999) * 10 + u;
          texte = `$${tex_nombre(n)}$ est-il divisible par $10$ ?`;
          if (u == 0) {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(n)}$ est divisible par $10$.`;
          } else {
            texte_corr = `Le chiffre des unitÃ©s de $${tex_nombre(
              n
            )}$ est $${u}$ donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $10$.`;
          }
          break;

        case "autre":
          n = randint(100, 999);
          u = choice([7, 7, 7, 7, 13, 17, 19]);
          if (u == 7) {
            n = choice(
              [randint(10, 99) * 10 + 7],
              7 * randint(11, 99),
              randint(100, 999)
            ); //un nombre qui se termine par 7, un divisible par 7, un au hasard
          } else {
            n = choice(
              [randint(10, 99) * 100 + u],
              u * randint(11, 99),
              randint(100, 999)
            ); //un nombre qui se termine par u, un divisible par u, un au hasard
          }
          texte = `$${tex_nombre(n)}$ est-il divisible par $${u}$ ?`;
          texte_corr = `On ne connait pas de critÃ¨re de divisibilitÃ© par $${u}$, on calcule donc la division euclidienne de $${tex_nombre(
            n
          )}$ par $${u}$.<br>`;
          if (n % u == 0) {
            texte_corr += `$${tex_nombre(n)}=${u}\\times${tex_nombre(
              n / u
            )}$<br>`;
            texte_corr += `Le reste de la division euclidienne est nul donc $${tex_nombre(
              n
            )}$ est divisible par $${u}$.`;
          } else {
            texte_corr += `$${tex_nombre(n)}=${u}\\times${(n - (n % u)) / u}+${n % u
              }$<br>`;
            texte_corr += `Le reste de la division euclidienne n'est pas nul donc $${tex_nombre(
              n
            )}$ n'est pas divisible par $${u}$.`;
          }

          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Choix des questions",
    4,
    "1 : CritÃ¨res de divisibilitÃ© par 2, 5, 10\n\
2 : CritÃ¨res de divisibilitÃ© par 3,9\n3 : CritÃ¨res de divisibilitÃ© par 2, 3, 5, 9, 10\n4 : Avec ou sans critÃ¨re de divisibilitÃ©",
  ];
}

/**
 * Un nombre est-il divisible par 2, 3, 5, 9 ?
 *
 *
 * @Auteur RÃ©mi Angot
 * 6N43-2
 */
function Tableau_criteres_de_divisibilite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = 4; // Correspond au facteur commun
  this.titre = "CritÃ¨res de divisibilitÃ©";
  this.consigne =
    "ComplÃ©ter le tableau en mettant oui ou non dans chaque case.";
  this.spacing = 1;
  this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_des_nombres_possibles = [
      "div2",
      "div3",
      "div39",
      "div5",
      "div25",
      "div23",
      "div239",
      "div35",
      "div2359",
      "divrien",
    ];
    // divisible par 2, divisible par 3, divisible par 3 et 9...

    let liste_des_types_de_nombres = combinaison_listes(
      liste_des_nombres_possibles,
      this.nb_questions
    );
    let tableau_de_nombres = [];
    let tableau_de_nombres_avec_correction = [];
    let liste_de_facteurs = [
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151,
      157,
      163,
      167,
      173,
      179,
      181,
      191,
      193,
      197,
      199,
      211,
      223,
      227,
      229,
      233,
      239,
      241,
      251,
      257,
      263,
      269,
      271,
      277,
      281,
      283,
      293,
    ];
    for (let i = 0; i < this.nb_questions; i++) {
      switch (liste_des_types_de_nombres[i]) {
        case "div2":
          tableau_de_nombres[i] = 2 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div3":
          tableau_de_nombres[i] = 3 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div39":
          tableau_de_nombres[i] = 9 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} \\\\`;
          break;
        case "div5":
          tableau_de_nombres[i] = 5 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div25":
          tableau_de_nombres[i] = 10 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div23":
          tableau_de_nombres[i] = 6 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} \\\\`;
          break;
        case "div239":
          tableau_de_nombres[i] = 18 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} & \\color{blue} \\text{oui} \\\\`;
          break;
        case "div35":
          tableau_de_nombres[i] = 15 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\color{blue} \\text{oui} & \\color{blue} \\text{oui} & \\text{non} \\\\`;
          break;
        case "div2359":
          tableau_de_nombres[i] = 90 * choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\color{blue} \\text{oui} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
        case "divrien":
          tableau_de_nombres[i] = choice(liste_de_facteurs);
          tableau_de_nombres_avec_correction[i] = `${tex_nombre(
            tableau_de_nombres[i]
          )} & \\text{non} & \\text{non} & \\text{non} & \\text{non} \\\\`;
          break;
      }
    }

    if (sortie_html) {
      texte = `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|c|}\n`;
    } else {
      texte = `$\\begin{array}{|l|c|c|c|c|}\n`;
    }

    texte += `\\hline\n`;
    texte += `\\text{... est divisible} & \\text{par }2 & \\text{par }3 & \\text{par }5 & \\text{par }9\\\\\n`;
    texte += `\\hline\n`;
    for (var i = 0; i < this.nb_questions; i++) {
      texte += `${tex_nombre(tableau_de_nombres[i])} & & & & \\\\\n`;
      texte += `\\hline\n`;
    }

    texte += `\\end{array}\n$`;

    if (sortie_html) {
      texte_corr = `$\\def\\arraystretch{2.5}\\begin{array}{|l|c|c|c|c|}\n`;
    } else {
      texte_corr = `$\\begin{array}{|l|c|c|c|c|}\n`;
    }
    texte_corr += `\\hline\n`;
    texte_corr += `\\text{... est divisible} & \\text{par }2 & \\text{par }3 & \\text{par }5 & \\text{par }9\\\\\n`;
    texte_corr += `\\hline\n`;
    for (var i = 0; i < this.nb_questions; i++) {
      texte_corr += tableau_de_nombres_avec_correction[i];
      texte_corr += `\\hline\n`;
    }

    texte_corr += `\\end{array}$\n`;

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
}

/**
 * Exercice sur la notion de proportionnalitÃ© (ou pas)
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6P10
 */
function Proportionnalite_pas_proportionnalite() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ReconnaÃ®tre une situation de proportionnalitÃ©";
  this.consigne = "RÃ©pondre aux questions posÃ©es en justifiant";
  sortie_html ? this.spacing = 1.5 : this.spacing = 1.4;
  sortie_html ? this.spacing_corr = 1.5 : this.spacing_corr = 1;
  this.nb_questions = 5;
  this.nb_cols_corr = 1;
  this.nb_cols = 1;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_index_disponibles = [0, 1, 2, 3, 4];
    let liste_index = combinaison_listes(
      liste_index_disponibles,
      this.nb_questions
    );
    let liste_choix_disponibles = [1, 2, 3, 4, 5, 6];
    let liste_choix = combinaison_listes(
      liste_choix_disponibles,
      this.nb_questions
    );
    let liste_de_lieux = [
      "dans un magasin de bricolage",
      "dans une animalerie",
      "au supermarchÃ© local",
      "Ã  l'Ã©picerie",
      "dans la boutique du musÃ©e",
    ];
    let liste_de_choses = [[]];
    let liste_de_prix_unit = [[]];
    let tirages = [[]];
    let index3 = [];
    let villes = ["Moscou", "Berlin", "Paris", "Bruxelles", "Rome", "Belgrade"];
    let verbes = [
      "double",
      "triple",
      "quadruple",
      "est multipliÃ© par 5",
      "est multipliÃ© par 6",
    ];
    liste_de_choses[0] = [
      "articles",
      "outils",
      "accessoires",
      "piÃ¨ces d'outillage",
      "pinceaux",
      "ampoules",
      "tournevis",
      "spatules",
      "raccords de tuyaux",
    ];
    liste_de_choses[1] = [
      "poissons rouges",
      "canetons",
      "perruches",
      "phasmes",
      "colliers anti-puces",
      "souris",
      "lapereaux",
      "paquets de graines",
    ];
    liste_de_choses[2] = [
      "sets de tables",
      "verres",
      "assiettes",
      "os Ã  macher",
      "dosettes de cafÃ©",
      "packs de lait",
      "paquets de pÃ¢tes",
    ];
    liste_de_choses[3] = [
      "mangues",
      "ananas",
      "fruits de la passion",
      "melons",
      "paquets de madeleines de Commercy",
      "bergamottes",
      "bredeles",
      "pots de cancoillotte",
    ];
    liste_de_choses[4] = [
      "cartes",
      "livres",
      "gravures",
      "puzzles",
      "maquettes",
      "roches",
      "jeux de sociÃ©tÃ©",
    ];
    liste_de_prix_unit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5];
    liste_de_prix_unit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8];
    liste_de_prix_unit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3];
    liste_de_prix_unit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3];
    liste_de_prix_unit[4] = [0.5, 5, 7, 13.5, 10, 15, 20];

    for (
      let i = 0,
      x,
      y,
      z,
      pu,
      n,
      p,
      somme,
      prenoms,
      index1,
      index2,
      objet,
      met,
      choix,
      texte,
      texte_corr,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_choix[i]) {
        case 1:
          index1 = liste_index[i];
          prenoms = [prenomF(), prenomM()];
          index2 = randint(0, liste_de_choses[index1].length - 1);
          objet = liste_de_choses[index1][index2];
          pu =
            liste_de_prix_unit[index1][index2] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          y = randint(2, 5);
          somme = calcul(y * pu, 2);
          p = y * randint(2, 5);
          z = calcul(p * pu, 2);
          texte = `${prenoms[0]} achÃ¨te ${liste_de_lieux[index1]} des ${objet}. `;
          texte += `Elle  repart avec ${y} ${objet} pour $${tex_prix(
            somme
          )}$â¬. ${prenoms[1]
            } achÃ¨te quant Ã  lui, au mÃªme endroit ${p} ${objet} pour $${tex_prix(
              z
            )}$â¬.<br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quantitÃ© achetÃ©e  ?<br>`;
          texte_corr = `${prenoms[0]} dÃ©pense $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>`;
          texte_corr = `${prenoms[1]} a achetÃ©  $${mise_en_evidence(
            tex_nombre(p / y)
          )}$ fois la quantitÃ© des ${objet} achetÃ©e par ${prenoms[0]
            } pour $${mise_en_evidence(
              tex_prix(somme),
              "blue"
            )}$â¬.<br>Il a payÃ© $${tex_prix(z)}$â¬ $=${mise_en_evidence(
              tex_nombrec(p / y)
            )}\\times${mise_en_evidence(tex_prix(somme), "blue")}$â¬.<br>`;
          texte_corr += `A l'aide de ces donnÃ©es, on constate que le prix des ${objet} et leur quantitÃ© sont tous les deux multipliÃ©s par le mÃªme nombre, donc ces deux grandeurs sont proportionnelles.<br>`;
          break;
        case 2:
          index1 = liste_index[i];
          prenoms = [prenomF(), prenomM()];
          index2 = randint(0, liste_de_choses[index1].length - 1);
          objet = liste_de_choses[index1][index2];
          pu =
            liste_de_prix_unit[index1][index2] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          y = randint(2, 5);
          somme = calcul(y * pu, 2);
          pu -= 0.1;
          p = y * randint(2, 5);
          z = calcul(p * pu, 2);
          texte = `${prenoms[0]} achÃ¨te ${liste_de_lieux[index1]} des ${objet}. `;
          texte += `Elle a obtenu ${y} ${objet} pour $${tex_prix(somme)}$â¬. ${prenoms[1]
            } achÃ¨te quant Ã  lui, au mÃªme endroit ${p} ${objet} pour $${tex_prix(
              z
            )}$â¬.<br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quantitÃ© achetÃ©e  ?<br>`;
          texte_corr = `${prenoms[0]} dÃ©pense $${mise_en_evidence(
            tex_prix(somme),
            "blue"
          )}$â¬.<br>`;
          texte_corr = `${prenoms[1]} a achetÃ©  $${mise_en_evidence(
            tex_nombrec(p / y)
          )}$ fois la quantitÃ© des ${objet} achetÃ©e par ${prenoms[0]
            } pour $${mise_en_evidence(
              tex_prix(somme),
              "blue"
            )}$â¬.<br>Il a payÃ© $${tex_prix(z)}$â¬.<br>Mais $${mise_en_evidence(
              tex_nombrec(p / y)
            )}\\times${mise_en_evidence(tex_prix(somme), "blue")}$â¬ $=${tex_prix(
              calcul((p * somme) / y)
            )}$â¬.<br>`;
          texte_corr += `Ã l'aide de ces donnÃ©es, on constate que le prix unitaire des ${objet} n'est pas le mÃªme pour ${prenoms[0]} qui en a achetÃ© $${y}$ que pour ${prenoms[1]} qui en a achetÃ© ${p}, donc ces deux grandeurs ne sont pas proportionnelles.<br>`;
          break;
        case 3:
          prenoms = [prenomF(), prenomM()];
          x = randint(5, 20);
          y = randint(5, 20, x) * 100;
          x = x * 100;
          n = arrondi(calcul((x / 60) * (1 + randint(0, 2) * 0.2)), 0);
          p = arrondi(calcul((y / 60) * (1 + randint(0, 2) * 0.2)), 0);
          index1 = calcul(x / n); //vitesse fille
          index2 = calcul(y / p); //vitesse garÃ§on

          texte = `${prenoms[0]} habite Ã  $${tex_nombre(x)}$ m du collÃ¨ge. Elle met ${n} minutes pour s'y rendre depuis chez elle.<br>`;
          texte += `${prenoms[1]}, lui, habite Ã  $${tex_nombre(y)}$ m du collÃ¨ge. Il met ${p} minutes pour s'y rendre depuis chez lui.<br>`;
          texte += `Le temps mis pour venir au collÃ¨ge est-il proportionnel Ã  la distance du foyer au collÃ¨ge ?<br>`;
          texte_corr = `${prenoms[0]} parcourt chaque minute environ $${tex_nombrec(arrondi(index1, 1))}$ m.<br>`;
          texte_corr += `${prenoms[1]
            } parcourt chaque minute environ $${tex_nombrec(arrondi(index2, 1))}$ m.<br>`;
          if (index1 == index2)
            texte_corr += `Pour ces deux Ã©lÃ¨ves le temps mis et la distance parcourue sont proportionnelles (si l'on compare leur vitesse moyenne)`;
          else
            texte_corr += `Pour ces deux Ã©lÃ¨ves le temps mis et la distance parcourue ne sont pas proportionnelles (si l'on compare leur vitesse moyenne).<br>`;
          break;
        case 4:
          prenoms = [prenomF(), prenomM()];
          x = randint(5, 20);
          y = x + randint(25, 35);
          texte = `${prenoms[0]} vient d'avoir ${x} ans cette annÃ©e. Son pÃ¨re ${prenoms[1]} vient de fÃªter  son ${y}Ã¨me anniversaire.<br>`;
          texte += `L'Ã¢ge de son pÃ¨re est-il proportionnel Ã  l'Ã¢ge de ${prenoms[0]} ?<br>`;
          texte_corr = `Aujourd'hui la diffÃ©rence d'Ã¢ge entre ${prenoms[0]
            } et ${prenoms[1]} est de ${y - x} ans.<br>`;
          texte_corr += `Dans ${x} annÃ©es, ${prenoms[0]} aura ${2 * x
            } ans, c'est Ã  dire le double d'aujourd'hui.<br>`;
          texte_corr += `Son pÃ¨re ${prenoms[1]} aura ${x + y
            } ans cette annÃ©e-lÃ .<br>Quand l'Ã¢ge de ${prenoms[0]
            } double, l'Ã¢ge de ${prenoms[1]} ne double pas, donc l'Ã¢ge de ${prenoms[0]
            } et l'Ã¢ge de son pÃ¨re ne sont pas propotionnels.<br>`;
          break;
        case 5:
          index1 = randint(0, 5);
          index2 = randint(0, 4);
          texte = `Une Ã©pidÃ©mie se rÃ©pand dans la ville de ${villes[index1]}.<br>`;
          texte += `Le nombre de malades ${verbes[index2]} tous les ${index2 + 2
            } jours.<br>`;
          texte += `Le nombre de malades est-il proportionnel au nombre de jours passÃ©s depuis le dÃ©but de l'Ã©pidÃ©mie ?<br>`;
          texte_corr = `Admettons qu'il y ait 10 malades le premier jour. Le ${1 + 2 + index2
            }Ã¨me jour il y aura $10 \\times ${index2 + 2} = ${10 * (index2 + 2)
            }$ malades.<br>`;
          texte_corr += `Entre le premier jour et le ${3 + index2
            }Ã¨me jour, le nombre de malades est multipliÃ© par ${index2 + 2
            } mais le nombre de jours est multipliÃ© par ${3 + index2}.<br>`;
          texte_corr += `Donc le nombre de malades n'est pas proportionnel au nombre de jours passÃ©s.<br>`;
          break;
        case 6:
          prenoms = [prenomF(), prenomM()];
          index1 = randint(0, 5);
          objet = liste_de_choses[4][index1];
          index2 = randint(0, 4);
          pu =
            liste_de_prix_unit[4][index1] *
            (1 + randint(1, 2) * 0.2 * randint(-1, 1));
          n = randint(2, 6);
          p = randint(0, 3);
          tirages[0] = [n, n * pu];
          tirages[1] = [n + 1, (n + 1) * pu];
          tirages[2] = [2 * n + 1, (2 * n + 1) * pu];
          tirages[3] = [3 * n + 3, (3 * n + 3) * pu];
          met = choice([true, false]);
          if (!met) tirages[p][1] -= 0.1;
          texte = `${prenoms[1]} relÃ¨ve les prix des ${objet} sur un catalogue par correspondance en fonction de la quantitÃ© saisie dans le panier<br>`;
          texte += `Il note les prix dans le tableau suivant :<br> <br>`;
          texte += `$\\def\\arraystretch{1.5}\\begin{array}{|c`; // construction du tableau des effectifs en un seul morceau
          for (let j = 0; j <= tirages.length; j++) texte += `|c`;
          texte += `|}\\hline  \\text{${objet}}`;
          for (let j = 0; j < tirages.length; j++) texte += `&${tirages[j][0]}`;
          texte += `\\\\\\hline \\text{Prix (en â¬})`;
          for (let j = 0; j < tirages.length; j++)
            texte += `&${tex_prix(arrondi(tirages[j][1], 2))}`;
          texte += `\\\\\\hline\\end{array}$<br> <br>`;
          texte += `Le prix des ${objet} est-il proportionnel Ã  la quantitÃ© achetÃ©e ?<br>`;
          texte_corr = `Il faut calculer le prix unitaire des ${objet} dans chaque cas de figure :<br><br>`;
          if (met) index3 = range(3);
          else index3 = range(3, [p]);
          texte_corr += `$`;
          for (let j = 0; j < index3.length; j++) {
            texte_corr += `\\dfrac{${tex_prix(
              arrondi(tirages[index3[j]][1], 2)
            )}}{${tirages[index3[j]][0]}}=`;
          }
          texte_corr += `${tex_prix(pu)}$<br><br>`;
          if (!met) {
            texte_corr += `Mais $\\dfrac{${tex_prix(
              arrondi(tirages[p][1], 2)
            )}}{${tirages[p][0]}}=${tex_prix(
              arrondi(calcul(tirages[p][1] / tirages[p][0]), 2)
            )}$â¬/${objet.substring(0, objet.length - 1)}<br>`;
            texte_corr += `Le prix des ${objet} n'est pas proportionnel Ã  leur nombre.<br>`;
          } else {
            texte_corr += `Le prix des ${objet} est bien proportionnel Ã  leur nombre.<br>`;
          }
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * On donne une relation de proportionnalitÃ© du type n objets coÃ»tent xâ¬ et on demande le prix de y objets
 * et le nombre d'objets qu'on peut acheter avec zâ¬.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6P11
*/
function Proportionnalite_par_linearite() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "RÃ©soudre des problÃ¨mes de proportionnalitÃ© en utilisant la linÃ©aritÃ© simple";
  this.consigne = "RÃ©pondre aux questions posÃ©es en justifiant";
  sortie_html ? (this.spacing = 2) : (this.spacing = 1);
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1);
  this.nb_questions = 5;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_index_disponibles = [0, 1, 2, 3, 4];
    let liste_index = combinaison_listes(
      liste_index_disponibles,
      this.nb_questions
    );
    let liste_de_lieux = [
      "dans un magasin de bricolage",
      "dans une animalerie",
      "au supermarchÃ© local",
      "Ã  l'Ã©picerie",
      "dans la boutique du musÃ©e",
    ];
    let liste_de_choses = [[]];
    let liste_de_prix_unit = [[]];
    liste_de_choses[0] = [
      "articles",
      "outils",
      "accessoires",
      "piÃ¨ces d'outillage",
      "pinceaux",
      "ampoules",
      "tournevis",
      "spatules",
      "raccords de tuyaux",
    ];
    liste_de_choses[1] = [
      "poissons rouges",
      "cannetons",
      "perruches",
      "phasmes",
      "colliers anti-puces",
      "souris",
      "lapereaux",
      "paquets de graines",
    ];
    liste_de_choses[2] = [
      "sets de tables",
      "verres",
      "assiettes",
      "os Ã  macher",
      "dosettes de cafÃ©",
      "packs de lait",
      "paquets de pÃ¢tes",
    ];
    liste_de_choses[3] = [
      "mangues",
      "ananas",
      "fruits de la passion",
      "melons",
      "paquets de madeleines de Commercy",
      "bergamottes",
      "bredeles",
      "pots de cancoillotte",
    ];
    liste_de_choses[4] = [
      "cartes",
      "livres",
      "gravures",
      "puzzles",
      "maquettes",
      "roches",
      "jeux de sociÃ©tÃ©",
    ];
    liste_de_prix_unit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5];
    liste_de_prix_unit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8];
    liste_de_prix_unit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3];
    liste_de_prix_unit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3];
    liste_de_prix_unit[4] = [0.5, 5, 7, 13.5, 10, 15, 20];
    for (
      let i = 0,
      x,
      y,
      z,
      pu,
      n,
      p,
      somme,
      prenoms,
      index1,
      index2,
      objet,
      met,
      texte,
      texte_corr,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      index1 = liste_index[i];
      prenoms = [prenomF(), prenomM()];
      index2 = randint(0, liste_de_choses[index1].length - 1);
      objet = liste_de_choses[index1][index2];
      pu =
        liste_de_prix_unit[index1][index2] *
        (1 + randint(1, 2) * 0.2 * randint(-1, 1));
      n = randint(3, 6);
      y = n * randint(2, 5);
      x = calcul(n * pu, 2);
      somme = calcul(y * pu, 2);
      met = false;
      while (met == false) {
        p = n * randint(2, 5);
        if (p != y) met = true;
      }
      z = calcul(p * pu, 2);

      texte = `${prenoms[0]} a repÃ©rÃ© ${liste_de_lieux[index1]} des ${objet} qui l\'intÃ©ressent.<br> `;
      texte += `Elle lit que ${n} ${objet} coÃ»tent ${tex_prix(x)} â¬. `;
      texte += `Elle veut en acheter ${y}.<br> Combien va-t-elle dÃ©penser ?<br>`;
      texte_corr = `${y} ${objet}, c'est ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${texte_en_couleur(
        n,
        "blue"
      )} ${objet}.<br> Si ${texte_en_couleur(
        n,
        "blue"
      )} ${objet} coÃ»tent ${tex_prix(x)} â¬, alors ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${texte_en_couleur(
        n,
        "blue"
      )} ${objet} coutent ${texte_en_couleur(
        tex_nombrec(y / n)
      )} fois ${tex_prix(x)} â¬.<br>`;
      texte_corr += `Donc ${prenoms[0]} dÃ©pensera ${texte_en_couleur(
        tex_nombrec(y / n)
      )} $\\times$ ${tex_prix(x)} â¬ = ${tex_prix(somme)} â¬.<br>`;
      texte += `${prenoms[1]
        } veut lui aussi acheter ces ${objet}. Il dispose de ${tex_prix(
          z
        )} â¬.<br> Combien peut-il en acheter ?<br>`;
      texte_corr += `${tex_prix(z)} â¬, c'est ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${tex_prix(x)} â¬.<br> Si avec ${tex_prix(
        x
      )} â¬ on peut acheter ${texte_en_couleur(
        n,
        "blue"
      )} ${objet}, alors avec ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${tex_prix(x)} â¬, on peut acheter ${texte_en_couleur(
        tex_nombrec(z / x)
      )} fois ${texte_en_couleur(n, "blue")} ${objet}.<br>`;
      texte_corr += `Donc ${prenoms[1]} pourra acheter ${texte_en_couleur(
        tex_nombrec(z / x)
      )} $\\times$ ${texte_en_couleur(n, "blue")} = ${p} ${objet}.<br>`;
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}

/**
 * DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1) puis donner l'Ã©criture dÃ©cimale.
 * @Auteur RÃ©mi Angot
 * 6N20-2
 */
function Exercice_fractions_differentes_ecritures() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1) puis donner l'Ã©criture dÃ©cimale.";
  this.consigne =
    "Ãcrire sous la forme de la somme d'un nombre entier et d'une fraction infÃ©rieure Ã  1 puis donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 5, ",2"],
      [2, 5, ",4"],
      [3, 5, ",6"],
      [4, 5, ",8"],
      [1, 8, ",125"],
      [3, 8, ",375"],
      [1, 10, ",1"],
      [3, 10, ",3"],
      [7, 10, ",7"],
      [9, 10, ",9"],
    ]; // Fractions irrÃ©ductibles avec une Ã©criture dÃ©cimale exacte
    liste_fractions1 = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 8, ",125"],
    ];
    liste_fractions1.push(
      choice([
        [1, 10, ",1"],
        [2, 10, ",2"],
        [3, 10, ",3"],
        [7, 10, ",7"],
        [9, 10, ",9"],
      ])
    );
    liste_fractions1.push(
      choice([
        [1, 5, ",2"],
        [2, 5, ",4"],
        [3, 5, ",6"],
        [4, 5, ",8"],
      ])
    ); // liste_fractions pour les 6 premiÃ¨res questions
    for (
      let i = 0, cpt = 0, fraction, a, b, c, n, texte, texte_corr;
      i < this.nb_questions && cpt < 50;

    ) {
      if (i < 6) {
        fraction = choice(liste_fractions1);
        enleve_element(liste_fractions1, fraction);
      } else {
        fraction = choice(liste_fractions);
      }
      //
      c = fraction[0];
      b = fraction[1];
      n = randint(1, 4);
      a = n * b + c;
      ed = n + fraction[2];
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme partie dÃ©cimale
      texte =
        "$ " +
        tex_fraction(a, b) +
        " = \\phantom{0000} + " +
        tex_fraction("\\phantom{00000000}", "") +
        " =  $";
      texte_corr =
        "$ " +
        tex_fraction(a, b) +
        " = " +
        n +
        "+" +
        tex_fraction(c, b) +
        " = " +
        ed +
        " $";

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}
/**
 * @Auteur RÃ©mi Angot
 * 6N20
 */
function Exercice_fractions_decomposer() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "DÃ©composer une fraction (partie entiÃ¨re + fraction infÃ©rieure Ã  1).";
  this.consigne =
    "Ãcrire sous la forme de la somme d'un nombre entier et d'une fraction infÃ©rieure Ã  1.";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.sup = false; // Donner l'Ã©criture dÃ©cimale

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 5, ",2"],
      [2, 5, ",4"],
      [3, 5, ",6"],
      [4, 5, ",8"],
      [1, 8, ",125"],
      [3, 8, ",375"],
      [1, 10, ",1"],
      [3, 10, ",3"],
      [7, 10, ",7"],
      [9, 10, ",9"],
    ]; // Fractions irrÃ©ductibles avec une Ã©criture dÃ©cimale exacte
    liste_fractions1 = [
      [1, 2, ",5"],
      [1, 4, ",25"],
      [3, 4, ",75"],
      [1, 8, ",125"],
    ];
    liste_fractions1.push(
      choice([
        [1, 10, ",1"],
        [2, 10, ",2"],
        [3, 10, ",3"],
        [7, 10, ",7"],
        [9, 10, ",9"],
      ])
    );
    liste_fractions1.push(
      choice([
        [1, 5, ",2"],
        [2, 5, ",4"],
        [3, 5, ",6"],
        [4, 5, ",8"],
      ])
    ); // liste_fractions pour les 6 premiÃ¨res questions
    for (
      let i = 0, fraction, a, b, c, n, texte, texte_corr;
      i < this.nb_questions;
      i++
    ) {
      if (i < 6) {
        fraction = choice(liste_fractions1);
        enleve_element(liste_fractions1, fraction);
      } else {
        fraction = choice(liste_fractions);
      }
      //
      c = fraction[0];
      b = fraction[1];
      n = randint(1, 4);
      a = n * b + c;
      ed = n + fraction[2];
      enleve_element(liste_fractions, fraction); // Il n'y aura pas 2 fois la mÃªme partie dÃ©cimale
      texte =
        "$ " +
        tex_fraction(a, b) +
        " = \\phantom{0000} + " +
        tex_fraction("\\phantom{00000000}", "") +
        " $";
      texte_corr =
        "$ " + tex_fraction(a, b) + " = " + n + "+" + tex_fraction(c, b) + " $";
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
    }
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque questions.
  };
}





/**
 * Conversions de longueur en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * * 1 : De dam, hm, km vers m
 * * 2 : De dm, cm, mm vers m
 * * 3 : Conversions en mÃ¨tres
 * * 4 : Toutes les conversions de longueurs
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 */
function Exercice_conversions_de_longueurs(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions de longueurs";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      [" da", 10],
      [" h", 100],
      [" k", 1000],
    ];
    let prefixe_div = [
      [" d", 10],
      [" c", 100],
      [" m", 1000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    let liste_unite1 = combinaison_listes([0, 1, 2, 3, 4, 5, 6], this.nb_questions)
    let liste_de_k = combinaison_listes([0, 1, 2], this.nb_questions);
    for (
      let i = 0,
      a,
      k,
      div,
      resultat,
      type_de_questions,
      texte,
      texte_corr,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let type_de_questions
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      // k = randint(0,2); // Choix du prÃ©fixe
      k = liste_de_k[i]; //PlutÃ´t que de prendre un prÃ©fix au hasard, on alterne entre 10,100 et 1000
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";

        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (div && type_de_questions < 4) {
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          tex_nombre(prefixe_div[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else {
        // pour type de question = 4
        let unite1 = liste_unite1[i]
        let unite2 = randint(Math.max(0, unite1 - 3), Math.min(unite1 + 3, 6), unite1)
        if (unite1 > unite2) {
          [unite1, unite2] = [unite2, unite1]
        }
        let ecart = unite2 - unite1; // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, ecart)) +
            tex_texte(liste_unite[unite1]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, ecart)) +
            tex_texte(liste_unite[unite2]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "$";
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : De dam, hm, km vers m\n\
2 : De dm, cm, mm vers m\n3 : Conversions en mÃ¨tres\n4 : Toutes les conversions de longueurs",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions  mÃ¨tres, litres, grammes, octets (et euros pour la version LaTeX) en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * * 1 : De da, h, k vers l'unitÃ© de rÃ©fÃ©rence
 * * 2 : De d, c, m vers l'unitÃ© de rÃ©fÃ©rence
 * * 3 : Multiplications ou divisions vers l'unitÃ© de rÃ©fÃ©rence
 * * 4 : Conversions d'octets
 * * 5 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 */
function Exercice_conversions(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre =
    "Conversions de longueurs, masses, contenance, prix ou unitÃ©s informatiques";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.correction_avec_des_fractions = false;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      ["da", 10],
      ["h", 100],
      ["k", 1000],
    ]; //['M',1000000],['G',1000000000],['T',1000000000000]];
    let prefixe_div = [
      ["d", 10],
      ["c", 100],
      ["m", 1000],
    ]; //['$\\mu{}$',1000000]];
    for (
      let i = 0,
      a,
      k,
      div,
      resultat,
      unite,
      type_de_questions,
      texte,
      texte_corr,
      liste_unite_info,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      k = randint(0, 2); // Choix du prÃ©fixe
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        liste_unite_info = ["o", "ko", "Mo", "Go", "To"];
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir
        if (k < 2) {
          // Choix de l'unitÃ©
          unite = choice(["m", "L", "g"]);
        } else if (k == 2) {
          if (sortie_html) {
            unite = choice(["m", "L", "g"]); // pas de signe â¬ pour KaTeX
          } else {
            unite = choice(["m", "L", "g", "â¬"]);
          }
        } else {
          unite = "o";
        }
        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (
        div &&
        type_de_questions < 4 &&
        this.correction_avec_des_fractions
      ) {
        unite = choice(["m", "L", "g"]);
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_fraction(tex_nombre(a), tex_nombre(prefixe_div[k][1])) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else if (div && type_de_questions < 4) {
        unite = choice(["m", "L", "g"]);
        resultat = Algebrite.eval(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " = \\dotfill " +
          tex_texte(unite) +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          tex_nombre(prefixe_div[k][1]) +
          tex_texte(unite) +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "$";
      } else {
        // pour type de question = 4
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 1000 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite2]) +
            " = \\dotfill " +
            tex_texte(liste_unite_info[unite1]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite2]) +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, 3 * ecart)) +
            tex_texte(liste_unite_info[unite1]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite_info[unite1]) +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite1]) +
            " = \\dotfill " +
            tex_texte(liste_unite_info[unite2]) +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite_info[unite1]) +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, 3 * ecart)) +
            tex_texte(liste_unite_info[unite2]) +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite_info[unite2]) +
            "$";
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    5,
    "1 : De da, h, k vers l'unitÃ© de rÃ©fÃ©rence\n\
2 : De d, c, m vers l'unitÃ© de rÃ©fÃ©rence\n3 : Multiplications ou divisions vers l'unitÃ© de rÃ©fÃ©rence\n4 : Conversions avec les octets\n5: Toutes les conversions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions d'aires en utilisant le prÃ©fixe pour dÃ©terminer la multiplication ou division Ã  faire.
 *
 * Dans la correction, on montre que l'on multiplie ou divisie Ã  2 reprises par le coefficient donnÃ© par le prÃ©fixe
 *
 * * 1 : De damÂ², hmÂ², kmÂ² vers mÂ²
 * * 2 : De dmÂ², cmÂ², mmÂ² vers mÂ²
 * * 3 : Conversions en mÃ¨tres-carrÃ©s
 * * 4 : Conversions avec des multiplications ou des divisions
 * * 5 : Conversions avec des ares, des centiares et des hectares
 * * 6 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M23
 */
function Exercice_conversions_aires(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions d'aires";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      [" da", "\\times10\\times10", 100],
      [" h", "\\times100\\times100", 10000],
      [" k", "\\times1~000\\times1~000", 1000000],
    ];
    let prefixe_div = [
      [" d", "\\div10\\div10", 100],
      [" c", "\\div100\\div100", 10000],
      [" m", "\\div1~000\\div1~000", 1000000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    let liste_de_k = combinaison_listes([0, 1, 2], this.nb_questions);
    for (
      let i = 0,
      a,
      k,
      div,
      resultat,
      type_de_questions,
      texte,
      texte_corr,
      liste_unite_info,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 6) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 5);
      }
      // k = randint(0,2); // Choix du prÃ©fixe
      k = liste_de_k[i];
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        prefixe_multi = [
          [" da", "\\times10\\times10", 100],
          [" h", "\\times100\\times100", 10000],
          [" k", "\\times1~000\\times1~000", 1000000],
        ]; // On rÃ©initialise cette liste qui a pu Ãªtre modifiÃ©e dans le cas des ares
        resultat = Algebrite.eval(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^2" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^2" +
          " =  " +
          tex_nombre(a) +
          prefixe_multi[k][1] +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      } else if (div && type_de_questions < 4) {
        prefixe_div = [
          [" d", "\\div10\\div10", 100],
          [" c", "\\div100\\div100", 10000],
          [" m", "\\div1~000\\div1~000", 1000000],
        ];
        k = randint(0, 1); // Pas de conversions de mm^2 en m^2 avec des nombres dÃ©cimaux car rÃ©sultat infÃ©rieur Ã  10e-8
        resultat = Algebrite.eval(a / prefixe_div[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^2" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^2" +
          " =  " +
          tex_nombre(a) +
          prefixe_div[k][1] +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      } else if (type_de_questions == 4) {
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        if (randint(0, 1) > 0) {
          resultat = Algebrite.eval(a * Math.pow(10, 2 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " =  " +
            tex_nombre(a) +
            "\\times" +
            tex_nombre(Math.pow(10, 2 * ecart)) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            "$";
        } else {
          resultat = Algebrite.eval(a / Math.pow(10, 2 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^2" +
            " =  " +
            tex_nombre(a) +
            "\\div" +
            tex_nombre(Math.pow(10, 2 * ecart)) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "^2" +
            "$";
        }
      } else if (type_de_questions == 5) {
        // Pour type_de_questions==5
        prefixe_multi = [
          ["ha", 10000],
          ["a", 100],
        ];
        k = randint(0, 1);
        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0]) +
          " = \\dotfill " +
          tex_texte(unite) +
          "^2" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0]) +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(prefixe_multi[k][1]) +
          tex_texte(unite) +
          "^2" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^2" +
          "$";
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    6,
    "1 : Conversions en mÂ² avec des multiplications\n\
2 : Conversions en mÂ² avec des divisions\n3 : Conversions en mÂ² avec des multiplications ou divisions\n4 : Conversions avec des multiplications ou divisions\n\
5 : Conversions d'hectares et ares en mÂ² \n6 : Toutes les conversions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions de volumes.
 *
 * Dans la correction, on ne voit qu'une multiplication ou qu'un division pour obtenir le rÃ©sultat
 *
 * * 1 : Conversions en mÃ¨tres-cubes avec des multiplications
 * * 2 : Conversions en mÃ¨tres-cubes avec des divisions
 * * 3 : Conversions en mÃ¨tres-cubes avec des multiplications ou divisions
 * * 4 : Conversions avec des multiplications ou divisions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M31
 */
function Exercice_conversions_volumes(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions de volume";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prefixe_multi = [
      ["da", "10\\times10\\times10", 1000],
      ["h", "100\\times100\\times100", 1000000],
      ["k", "1~000\\times1~000\\times1~000", 1000000000],
    ];
    let prefixe_div = [
      ["d", "10\\div10\\div10", 1000],
      ["c", "100\\div100\\div100", 1000000],
      ["m", "1~000\\div1~000\\div1~000", 1000000000],
    ];
    let unite = "m";
    let liste_unite = ["mm", "cm", "dm", "m", "dam", "hm", "km"];
    for (
      let i = 0,
      a,
      k,
      div,
      resultat,
      type_de_questions,
      texte,
      texte_corr,
      liste_unite_info,
      cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // On limite le nombre d'essais pour chercher des valeurs nouvelles
      if (this.sup < 5) {
        type_de_questions = this.sup;
      } else {
        type_de_questions = randint(1, 4);
      }
      k = randint(0, 2); // Choix du prÃ©fixe
      if (type_de_questions == 1) {
        // niveau 1
        div = false; // Il n'y aura pas de division
      } else if (type_de_questions == 2) {
        // niveau 2
        div = true; // Avec des divisions
      } else if (type_de_questions == 3) {
        div = choice([true, false]); // Avec des multiplications ou des divisions
      } else if (type_de_questions == 4) {
        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2
      }

      if (this.sup2) {
        // Si la case pour les nombres dÃ©cimaux est cochÃ©e
        a = choice([
          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 10, 1),
          arrondi(randint(1, 9) / 100, 2),
          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),
        ]);
        // XX,X 0,X 0,0X X,XX
      } else {
        a = choice([
          randint(1, 9),
          randint(1, 9) * 10,
          randint(1, 9) * 100,
          randint(1, 9) * 10 + randint(1, 9),
        ]);
        // X, X0, X00, XX
      }

      if (!div && type_de_questions < 4) {
        // Si il faut multiplier pour convertir

        resultat = Algebrite.eval(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^3" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^3" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_multi[k][0] + unite) +
          "^3" +
          " =  " +
          tex_nombre(a) +
          "\\times" +
          prefixe_multi[k][1] +
          tex_texte(unite) +
          "^3" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^3" +
          "$";
      } else if (div && type_de_questions < 4) {
        k = randint(0, 1); // Pas de conversions de mm^3 en m^3 avec des nombres dÃ©cimaux car rÃ©sultat infÃ©rieur Ã  10e-8
        resultat = Algebrite.eval(a / prefixe_multi[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8
        texte =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^3" +
          " = \\dotfill " +
          tex_texte(unite) +
          "^3" +
          "$";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          tex_texte(prefixe_div[k][0] + unite) +
          "^3" +
          " =  " +
          tex_nombre(a) +
          "\\div" +
          prefixe_div[k][1] +
          tex_texte(unite) +
          "^3" +
          " = " +
          tex_nombre(resultat) +
          tex_texte(unite) +
          "^3" +
          "$";
      } else if (type_de_questions == 4) {
        let unite1 = randint(0, 3);
        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un Ã  l'autre
        if (ecart > 4 - unite1) {
          ecart = 4 - unite1;
        }
        let unite2 = unite1 + ecart;
        let multiplications_par_1000 = "";

        if (randint(0, 1) > 0) {
          switch (ecart) {
            case 1:
              multiplications_par_1000 = "\\times 1~000";
              break;
            case 2:
              multiplications_par_1000 = "\\times 1~000 \\times 1~000";
              break;
            case 3:
              multiplications_par_1000 =
                "\\times 1~000 \\times 1~000 \\times 1~000";
              break;
          }
          resultat = Algebrite.eval(a * Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " =  " +
            tex_nombre(a) +
            multiplications_par_1000 +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            "$";
        } else {
          switch (ecart) {
            case 1:
              multiplications_par_1000 = "\\div 1~000";
              break;
            case 2:
              multiplications_par_1000 = "\\div 1~000 \\div 1~000";
              break;
            case 3:
              multiplications_par_1000 = "\\div 1~000 \\div 1~000 \\div 1~000";
              break;
          }
          resultat = Algebrite.eval(a / Math.pow(10, 3 * ecart));
          texte =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " = \\dotfill " +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            "$";
          texte_corr =
            "$ " +
            tex_nombre(a) +
            tex_texte(liste_unite[unite1]) +
            "^3" +
            " =  " +
            tex_nombre(a) +
            multiplications_par_1000 +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            " = " +
            tex_nombre(resultat) +
            tex_texte(liste_unite[unite2]) +
            "^3" +
            "$";
        }
      }
      // else if(type_de_questions==5) { // Pour type_de_questions==5
      // 	prefixe_multi = [['L',0.001],['dL',0.0001],['cL',0.00001],['mL',0.000001]];
      // 	k = randint(0,1)
      // 	resultat = Algebrite.eval(a*prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le rÃ©sultat exact mÃªme avec des dÃ©cimaux
      // 	texte = '$ '+ tex_nombre(a) + tex_texte(prefixe_multi[k][0]) + ' = \\dotfill ' + tex_texte(unite)  + '^3' + '$';
      // 	texte_corr = '$ '+ tex_nombre(a) + tex_texte(prefixe_multi[k][0]) + ' =  ' + tex_nombre(a) + '\\times' + tex_nombre(prefixe_multi[k][1]) + tex_texte(unite)  + '^3'
      // 		 + ' = ' + tex_nombre(resultat) + tex_texte(unite)+ '^2' + '$';
      // }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        if (est_diaporama) {
          texte = texte.replace("= \\dotfill", "\\text{ en }");
        }
        if (sortie_html) {
          texte = texte.replace(
            "\\dotfill",
            "................................................"
          );
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    4,
    "1 : Conversions en mÃ¨tres-cubes avec des multiplications\n\
2 : Conversions en mÃ¨tres-cubes avec des divisions\n3 : Conversions en mÃ¨tres-cubes avec des multiplications ou divisions\n4 : Conversions avec des multiplications ou divisions",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * Conversions d'unitÃ©s de volumes vers les unitÃ©s de capacitÃ© ou inversement.
 *
 * Dans la correction, on passe systÃ©matiquement par l'Ã©quivalence dm3 = L
 *
 * * 1 : De dam3, m3, dm3, cm3 ou mm3 vers L ou inversement
 * * 2 :
 * * 3 :
 * * 4 :
 * * 5 :
 * * 6 : Un mÃ©lange de toutes les conversions
 * * ParamÃ¨tre supplÃ©mentaire : utiliser des nombres dÃ©cimaux (par dÃ©faut tous les nombres sont entiers)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M31-2
 */
function Unites_de_volumes_et_de_capacite(niveau = 1) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = niveau; // Niveau de difficultÃ© de l'exercice
  this.sup2 = false; // Avec des nombres dÃ©cimaux ou pas
  this.titre = "Conversions avec des unitÃ©s de volumes ou de capacitÃ©s";
  this.consigne = "ComplÃ©ter";
  this.spacing = 2;
  this.nb_questions = 8;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup == 1) {
      liste_type_de_questions = combinaison_listes(
        ["dam3toL", "m3toL", "dm3toL", "cm3toL"],
        this.nb_questions
      );
    }
    if (this.sup == 2) {
      liste_type_de_questions = combinaison_listes(
        ["Ltodm3", "Ltocm3", "Ltom3"],
        this.nb_questions
      );
    }
    if (this.sup == 3) {
      liste_type_de_questions = combinaison_listes(
        [
          "dam3toL",
          "m3toL",
          "dm3toL",
          "cm3toL",
          "mm3toL",
          "Ltodm3",
          "Ltocm3",
          "Ltom3",
        ],
        this.nb_questions
      );
    }
    let liste_de_n = [];
    if (this.sup2) {
      liste_de_n = combinaison_listes([1, 2, 3, 4], this.nb_questions);
    } else {
      liste_de_n = combinaison_listes([1, 2, 3, 4, 5, 6], this.nb_questions);
    }
    for (
      let i = 0, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      if (this.sup2) {
        switch (liste_de_n[i]) {
          case 1:
            n = calcul(randint(2, 9) / 10);
            break;
          case 2:
            n = calcul(randint(11, 99) / 100);
            break;
          case 3:
            n = calcul(randint(1, 9) * 10 + randint(1, 9) / 10);
            break;
          case 4:
            n = calcul(
              randint(11, 99, [10, 20, 30, 40, 50, 60, 70, 80, 90]) / 100
            );
            break;
        }
      } else {
        switch (liste_de_n[i]) {
          case 1:
            n = randint(2, 9);
            break;
          case 2:
            n = randint(11, 99);
            break;
          case 3:
            n = randint(1, 9) * 10;
            break;
          case 4:
            n = randint(1, 9) * 100;
            break;
          case 5:
            n = randint(11, 99) * 100;
            break;
          case 6:
            n = randint(1, 9) * 1000;
            break;
        }
      }
      switch (liste_type_de_questions[i]) {
        case "dam3toL":
          texte = `$${tex_nombre(n)}~\\text{dam}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{dam}^3=${tex_nombre(
            n
          )}\\times1~000\\times1~000~\\text{dm}^3=${tex_nombrec(
            n * 1000000
          )}~\\text{L}$`;
          break;
        case "m3toL":
          texte = `$${tex_nombre(n)}~\\text{m}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{m}^3=${tex_nombre(
            n
          )}\\times1~000~\\text{dm}^3=${tex_nombrec(n * 1000)}~\\text{L}$`;
          break;
        case "dm3toL":
          texte = `$${tex_nombre(n)}~\\text{dm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{dm}^3=${tex_nombre(
            n
          )}~\\text{L}$`;
          break;
        case "cm3toL":
          texte = `$${tex_nombre(n)}~\\text{cm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{cm}^3=${tex_nombre(
            n
          )}\\div 1~000~\\text{dm}^3=${tex_nombrec(n / 1000)}~\\text{L}$`;
          break;
        case "mm3toL":
          texte = `$${tex_nombre(n)}~\\text{mm}^3=\\dotfill~\\text{L}$`;
          texte_corr = `$${tex_nombre(n)}~\\text{mm}^3=${tex_nombre(
            n
          )}\\div1~000\\div 1~000~\\text{dm}^3=${tex_nombrec(
            n / 1000000
          )}~\\text{L}$`;
          break;
        case "Ltodm3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{dm}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3$`;
          break;
        case "Ltocm3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{cm}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3=${tex_nombre(
            n
          )}\\times1~000~\\text{cm}^3=${tex_nombrec(n * 1000)}~\\text{cm}^3$`;
          break;
        case "Ltom3":
          texte = `$${tex_nombre(n)}~\\text{L}=\\dotfill~\\text{m}^3$`;
          texte_corr = `$${tex_nombre(n)}~\\text{L}=${tex_nombre(
            n
          )}~\\text{dm}^3=${tex_nombre(n)}\\div1~000~\\text{m}^3=${tex_nombrec(
            n / 1000
          )}~\\text{m}^3$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : UnitÃ©s de volume vers litre\n2 : Litre vers unitÃ©s de volume\n3 : UnitÃ©s de volumes vers litre ou inversement ",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des nombres dÃ©cimaux"];
}

/**
 * DÃ©terminer le pÃ©rimÃ¨tre et l'aire d'un carrÃ©, d'un rectangle, d'un triangle rectangle, d'un cercle
 *
 * * 1 : CarrÃ©, rectangle et triangle rectangle
 * * 2: Uniquement des cercles
 * * 3 : Les 4 sont demandÃ©s
 * @Auteur RÃ©mi Angot// modifiÃ© par Mireille Gain pour le support des dÃ©cimaux
 */
function Exercice_perimetres_et_aires(difficulte = 1) {
  //Calculer le pÃ©rimÃ¨tre et l'aire de figures
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.sup = difficulte;
  this.titre = "Calculs de pÃ©rimÃ¨tres et d'aires";
  this.consigne =
    "Pour chacune des figures, calculer son pÃ©rimÃ¨tre puis son aire (valeur exacte et si nÃ©cessaire valeur approchÃ©e au dixiÃ¨me prÃ¨s).";
  this.spacing = 1;
  this.nb_questions = 4;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let triplets_pythagoriciens = [
      [3, 4, 5],
      [6, 8, 10],
      [15, 8, 17],
      [24, 10, 26],
      [5, 12, 13],
      [12, 16, 20],
      [21, 20, 29],
      [9, 40, 41],
    ];
    let type_de_questions_disponibles = [
      "carre",
      "rectangle",
      "triangle_rectangle",
      "cercle",
    ];
    let partieDecimale1, partieDecimale2, partieDecimale3;
    if (this.sup2) {
      partieDecimale1 = calcul(randint(1, 9) / 10);
      partieDecimale2 = calcul(randint(1, 9) / 10);
      partieDecimale3 = calcul(randint(1, 9) / 10 * randint(0, 1));
    }
    else {
      partieDecimale1 = 0;
      partieDecimale2 = 0;
      partieDecimale3 = 0;
    }

    if (this.sup == 1) {
      enleve_element(type_de_questions_disponibles, "cercle");
      this.nb_cols = 1;
    } else if (this.sup == 2) {
      type_de_questions_disponibles = ["cercle"];
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case "carre":
          let cote = calcul(randint(2, 11) + partieDecimale1);
          let nom_carre = creerNomDePolygone(4);
          if (choice([true, false])) {
            // 2 Ã©noncÃ©s possibles Ã©quiprobables
            texte = `Un carrÃ© $${nom_carre}$ de $${tex_nombre(cote)}$ cm de cÃ´tÃ© .`;
          } else {
            texte = `Un carrÃ© $${nom_carre}$ tel que $${nom_carre[0] + nom_carre[1]
              } = ${tex_nombre(cote)}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_carre}}=4\\times${tex_nombre(cote)}~\\text{cm}=${tex_nombrec(4 * cote)
            }~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_carre}}=${tex_nombre(cote)}~\\text{cm}\\times${tex_nombre(cote)}~\\text{cm}=${tex_nombrec(cote * cote)
            }~\\text{cm}^2$`;
          break;
        case "rectangle":
          let L = calcul(randint(3, 11) + partieDecimale2);
          let l = randint(2, L - 1);
          let nom_rectangle = creerNomDePolygone(4);
          if (choice([true, false])) {
            // 2 Ã©noncÃ©s possibles Ã©quiprobables
            texte = `Un rectangle $${nom_rectangle}$ de $${tex_nombre(L)}$ cm de longueur et de $${l}$ cm de largeur.`;
          } else {
            texte = `Un rectangle $${nom_rectangle}$ tel que $${nom_rectangle[0] + nom_rectangle[1] + " = " + tex_nombre(L)
              }$ cm et $${nom_rectangle[1] + nom_rectangle[2] + " = " + l}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_rectangle}}=(${tex_nombre(L)}~\\text{cm}+${l}~\\text{cm})\\times2=${tex_nombrec((L + l) * 2)
            }~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_rectangle}}=${tex_nombre(L)}~\\text{cm}\\times${l}~\\text{cm}=${tex_nombrec(L * l)
            }~\\text{cm}^2$`;
          break;
        case "triangle_rectangle":
          let triplet = choice(triplets_pythagoriciens);
          enleve_element(triplets_pythagoriciens, triplet);
          let a = calcul(triplet[0] * (1 + partieDecimale1));
          let b = calcul(triplet[1] * (1 + partieDecimale1));
          let c = calcul(triplet[2] * (1 + partieDecimale1));
          let nom_triangle = creerNomDePolygone(3);
          if (choice([true, false])) {
            texte = `Un triangle $${nom_triangle}$ rectangle en $${nom_triangle[1]
              }$ tel que $${nom_triangle[0] + nom_triangle[1] + " = " + tex_nombre(a)
              }$ cm, $${nom_triangle[1] + nom_triangle[2] + " = " + tex_nombre(b)}$ cm\
 et $${nom_triangle[0] + nom_triangle[2] + " = " + tex_nombre(c)}$ cm.`;
          } else {
            texte = `Un triangle rectangle $${nom_triangle}$ a pour cÃ´tÃ©s : $${tex_nombre(a)}$ cm, $${tex_nombre(c)}$ cm et $${tex_nombre(b)}$ cm.`;
          }

          texte_corr = `$\\mathcal{P}_{${nom_triangle}}=${tex_nombre(a)}~\\text{cm}+${tex_nombre(b)}
          ~\\text{cm}+${tex_nombre(c)}~\\text{cm}=${tex_nombre(a + b + c)}~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}_{${nom_triangle}}=${tex_nombre(a)}~\\text{cm}\\times${tex_nombre(b)}~\\text{cm}\\div2=${tex_nombrec(a * b / 2)}~\\text{cm}^2$`;
          break;
        case "cercle":
          let R = randint(3, 11);
          let donne_le_diametre = choice([true, false]);
          if (donne_le_diametre) {
            texte = `Un cercle de $${2 * R}$ cm de diamÃ¨tre.`;
            texte_corr = `Le diamÃ¨tre est de $${2 * R
              }$ cm donc le rayon est de $${R}$ cm.<br>`;
          } else {
            texte = `Un cercle de $${R}$ cm de rayon.`;
            texte_corr = "";
          }

          texte_corr += `$\\mathcal{P}=2\\times${R}\\times\\pi~\\text{cm}=${2 * R
            }\\pi~\\text{cm}\\approx${arrondi_virgule(
              2 * R * Math.PI,
              1
            )}~\\text{cm}$<br>`;
          texte_corr += `$\\mathcal{A}=${R}\\times${R}\\times\\pi~\\text{cm}^2=${R * R
            }\\pi~\\text{cm}^2\\approx${arrondi_virgule(
              R * R * Math.PI,
              1
            )}~\\text{cm}^2$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : CarrÃ©, rectangle et triangle rectangle\n2: Cercles\n3: MÃ©langÃ©",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des dÃ©cimaux", false];
}
/**
 * On donne une fraction qui a pour dÃ©nominateur 10, 100 ou 1 000, il faut donner l'Ã©criture dÃ©cimale.
 *
 * Le numÃ©rateur est de la forme X, XX, X0X, X00X ou XXX
 * @Auteur RÃ©mi Angot
 * 6N23
 */
function Exercice_ecriture_decimale_a_partir_de_fraction_decimale() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Donner l'Ã©criture dÃ©cimale d'une fraction dÃ©cimale";
  this.consigne = "Donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 8;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice(
        [
          randint(2, 9),
          randint(11, 99),
          randint(1, 9) * 100 + randint(1, 9),
          randint(1, 9) * 1000 + randint(1, 9),
        ],
        randint(101, 999)
      );
      // X, XX, X0X, X00X,XXX
      b = choice([10, 100, 1000]);
      texte =
        "$ " + tex_fraction(tex_nombre(a), tex_nombre(b)) + " = \\dotfill $";
      texte_corr =
        "$ " +
        tex_fraction(tex_nombre(a), tex_nombre(b)) +
        " = " +
        tex_nombre(Algebrite.eval(a / b)) +
        " $";
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        if (est_diaporama) {
          texte = texte.replace("=\\dotfill", "");
        }
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Multiplier ou diviser un nombre entier par 10, 100 ou 1 000
 *
 * Le nombre entier est de la forme X, XX, X0X, X00X ou XXX
 * @Auteur RÃ©mi Angot
 * 6N24-1
 */
function Exercice_multiplier_ou_diviser_un_nombre_entier_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplier ou diviser un nombre entier par 10, 100 ou 1 000";
  this.consigne = "Donner l'Ã©criture dÃ©cimale";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    for (
      let i = 0, a, b, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      a = choice(
        [
          randint(2, 9),
          randint(11, 99),
          randint(1, 9) * 100 + randint(1, 9),
          randint(1, 9) * 1000 + randint(1, 9),
        ],
        randint(101, 999)
      );
      // X, XX, X0X, X00X,XXX
      b = choice([10, 100, 1000]);
      if (choice([true, false])) {
        texte =
          "$ " + tex_fraction(tex_nombre(a), tex_nombre(b)) + " = \\dotfill $";
        texte_corr =
          "$ " +
          tex_fraction(tex_nombre(a), tex_nombre(b)) +
          " = " +
          tex_nombre(Algebrite.eval(a / b)) +
          " $";
      } else {
        texte =
          "$ " + tex_nombre(a) + "\\times" + tex_nombre(b) + " = \\dotfill $";
        texte_corr =
          "$ " +
          tex_nombre(a) +
          "\\times" +
          tex_nombre(b) +
          " = " +
          tex_nombre(Algebrite.eval(a * b)) +
          " $";
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Valeur maximale", 99999];
}

/**
 * Comparer deux nombres dÃ©cimaux
 *
 * Les types de comparaisons sont :
 * * ab ? ba
 * * aa,bb ? aa,cc
 * * a,b  a,cc avec b>c
 * * 0,ab 0,ba
 * * 0,a0b 0,b0a
 * * a,b a,b0
 * * 0,0ab 0,0a0b
 * * a,bb  a,ccc avec b>c
 * * a+1,bb  a,cccc avec cccc>bb
 *
 * aa, bb, cc correspondent Ã  des nombres Ã  2 chiffres (ces 2 chiffres pouvant Ãªtre distincts)
 * @Auteur RÃ©mi Angot
 * 6N31
 */
function Comparer_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Comparer des nombres dÃ©cimaux";
  this.consigne = "ComplÃ©ter avec le signe < , > ou =.";
  this.nb_questions = 8;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [
      choice([1, 4, 5]),
      2,
      2,
      3,
      6,
      7,
      8,
      9,
    ]; // une seule question du type inversion de chiffres (1,4,5)
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let x,
        y,
        a,
        b,
        c,
        d,
        zero_inutile = false;

      switch (liste_type_de_questions[i]) {
        case 1: // ab ba
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = a * 10 + b;
          y = b * 10 + a;
          break;
        case 2: // aa,bb aa,cc
          a = randint(1, 99);
          b = randint(11, 99);
          c = randint(11, 99);
          x = calcul(a + b / 100);
          y = calcul(a + c / 100);
          break;
        case 3: // a,b  a,cc avec b>c
          a = randint(1, 99);
          b = randint(1, 8);
          c = randint(1, b * 10);
          x = calcul(a + b / 10);
          y = calcul(a + c / 100);
          break;
        case 4: // 0,ab 0,ba
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = calcul((a * 10 + b) / 100);
          y = calcul((b * 10 + a) / 100);
          break;
        case 5: // 0,a0b 0,b0a
          a = randint(1, 9);
          b = randint(1, 9, a);
          x = calcul((a * 100 + b) / 1000);
          y = calcul((b * 100 + a) / 1000);
          break;
        case 6: // a,b a,b0
          a = randint(11, 999);
          while (a % 10 == 0) {
            // pas de nombre divisible par 10
            a = randint(11, 999);
          }
          x = calcul(a / 10);
          y = x;
          zero_inutile = true;
          break;
        case 7: // 0,0ab 0,0a0b
          a = randint(1, 9);
          b = randint(1, 9);
          x = calcul(a / 100 + b / 1000);
          y = calcul(a / 100 + b / 10000);
          break;
        case 8: // a,bb  a,ccc avec b>c
          a = randint(11, 99);
          b = randint(11, 99);
          c = randint(100, b * 10);
          x = calcul(a + b / 100);
          y = calcul(a + c / 1000);
          if (randint(1, 2) == 1) {
            [x, y] = [y, x];
          }
          break;
        case 9: // a+1,bb  a,cccc avec cccc>bb
          a = randint(11, 98);
          b = randint(11, 99);
          c = randint(b * 100, 10000);
          x = calcul(a + 1 + b / 100);
          y = calcul(a + c / 10000);
          if (randint(1, 2) == 1) {
            [x, y] = [y, x];
          }
          break;
      }

      texte = `${tex_nombre(x)}\\ldots\\ldots${tex_nombre(y)}`;
      if (parseFloat(x) > parseFloat(y)) {
        texte_corr = `${tex_nombre(x)} > ${tex_nombre(y)}`;
      } else if (parseFloat(x) < parseFloat(y)) {
        texte_corr = `${tex_nombre(x)} < ${tex_nombre(y)}`;
      } else {
        texte_corr = `${tex_nombre(x)} = ${tex_nombre(y)}`;
      }

      if (zero_inutile) {
        if (randint(1, 2) == 1) {
          texte = `${tex_prix(x)}\\ldots\\ldots${tex_nombre(y)}`;
          if (parseFloat(x) > parseFloat(y)) {
            texte_corr = `${tex_prix(x)} > ${tex_nombre(y)}`;
          } else if (parseFloat(x) < parseFloat(y)) {
            texte_corr = `${tex_prix(x)} < ${tex_nombre(y)}`;
          } else {
            texte_corr = `${tex_prix(x)} = ${tex_nombre(y)}`;
          }
        } else {
          texte = `${tex_nombre(x)}\\ldots\\ldots${tex_prix(y)}`;
          if (parseFloat(x) > parseFloat(y)) {
            texte_corr = `${tex_nombre(x)} > ${tex_prix(y)}`;
          } else if (parseFloat(x) < parseFloat(y)) {
            texte_corr = `${tex_nombre(x)} < ${tex_prix(y)}`;
          } else {
            texte_corr = `${tex_nombre(x)} = ${tex_prix(y)}`;
          }
        }
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * DÃ©duire un pourcentage par complÃ©ment Ã  100%
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N33-2
 */
function Calculer_un_pourcentage() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨mes de calcul de pourcentage par complÃ©ment Ã  100%";
  this.nb_questions = 1;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles = [1, 2, 3]
    let liste_choix = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_moyens = [`en bus`, `en deux-roues`, `Ã   pieds`, `en voiture`]
    let liste_sports = [`le foot`, `la natation`, `le basket`, `le ping-pong`, `le volley`, `la gym`]
    let liste_hobbies = [`la couture`, `le cinÃ©ma`, `la musique`, `le sport`, `la programmation`, `le jardinage`, `la cuisine`]
    let p1, p2, p3, moy1, moy2, moy3
    let objets, centre = point(5, 5), depart = point(10, 5)

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;
    ) {
      objets = []
      p1 = randint(6, 9) * 5
      p2 = randint(6, 9) * 5
      p3 = 100 - p1 - p2
      switch (liste_choix[i]) {
        case 1: // Les moyens de dÃ©placement maison collÃ¨ge
          [moy1, moy2, moy3] = combinaison_listes(liste_moyens, 3)
          texte = `Dans un collÃ¨ge, $${p1}\\%$ des Ã©lÃ¨ves se dÃ©placent ${moy1}, $${p2}\\%$ ${moy2} et les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des Ã©lÃ¨ves qui se dÃ©placent ${moy3} ?`
          texte_corr = `Les Ã©lÃ¨ves qui ${moy1} ou qui ${moy2} reprÃ©sentent $${p1}\\%$ + $${p2}\\% = ${p1 + p2}\\%$.<br>`
          texte_corr += `Donc on calcule : $100 - ${p1 + p2}\\% = ${p3}\\%$<br>`
          texte_corr += `$${p3}\\%$ des Ã©lÃ¨ves ${moy3}.<br>`
          break;
        case 2: // Les sports pratiquÃ©s par les ados
          [moy1, moy2, moy3] = combinaison_listes(liste_sports, 3)
          texte = `Dans une association sportive, $${p1}\\%$ des ados pratiquent ${moy1}, $${p2}\\%$ ${moy2} et les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des ados qui pratiquent ${moy3} ?`
          texte_corr = `Les ados qui pratiquent ${moy1} ou ${moy2} reprÃ©sentent $${p1}\\% + ${p2}\\% = ${p1 + p2}\\%$.<br>`
          texte_corr += `Donc on calcule : $100\\% - ${p1 + p2}\\% = ${p3}\\%$<br>`
          texte_corr += `$${p3}\\%$ des ados de cette association sportive pratiquent ${moy3}.<br>`
          break;
        case 3: // Les sports pratiquÃ©s par les ados
          [moy1, moy2, moy3] = combinaison_listes(liste_hobbies, 3)
          texte = `Dans une association culturelle, $${p1}\\%$ des membres ont comme passe-temps favorit ${moy1}, pour $${p2}\\%$ c'est ${moy2} et pour les autres ${moy3}.<br>`
          texte += `Quel est le pourcentage des membres qui prÃ©fÃ¨rent ${moy3} ?`
          texte_corr = `Les membres qui prÃ©fÃ¨re ${moy1} ou ${moy2} reprÃ©sentent $${p1}\\% + ${p2}\\% = ${p1 + p2}\\%$.<br>`
          texte_corr += `Donc on calcule : $100\\% - ${p1 + p2}\\% = ${p3}\\%$<br>`
          texte_corr += `$${p3}\\%$ des membres de cette association culturelle prÃ©fÃ¨rent ${moy3}.<br>`
          break;

      }
      objets.push(codeAngle(depart, centre, p1 * 3.6, 4.9, '', 'black', 2, 1, 'red', 0.4), texteParPoint(`${moy1.substring(3)}`, pointSurSegment(centre, rotation(depart, centre, p1 * 1.8), 3), 0))
      objets.push(codeAngle(rotation(depart, centre, p1 * 3.6), centre, p2 * 3.6, 4.9, '', 'black', 2, 1, 'blue', 0.4), texteParPoint(`${moy2.substring(3)}`, pointSurSegment(centre, rotation(depart, centre, p1 * 3.6 + p2 * 1.8), 3), 0))
      objets.push(codeAngle(depart, centre, -p3 * 3.6, 4.9, '', 'black', 2, 1, 'yellow', 0.4), texteParPoint(`${moy3.substring(3)}`, pointSurSegment(centre, rotation(depart, centre, -p3 * 1.8), 3), 0))
      texte_corr += mathalea2d({ xmin: 0, ymin: 0, xmax: 10, ymax: 10, pixelsParCm: 20, scale: 0.5, mainlevee: false, amplitude: 1 }, ...objets)

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}
/**
 * Calculer le montant d'une rÃ©duction donnÃ©e en pourcentage d'un prix initial
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6N33-3
 */
function Appliquer_un_pourcentage() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨mes avec des calculs de pourcentages";
  this.nb_questions = 1;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [1, 2]
    let choix = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    liste_pourcentages = [10, 20, 30, 40, 50];
    let article = [[`Un pull`, 20, 40], [`Une chemise`, 15, 35], [`Un pantalon`, 30, 60], [`Un T-shirt`, 15, 25], [`Une jupe`, 20, 40]]
    let legume = [[`Une aubergine`, 100, 200], [`Un melon`, 200, 300], [`Une tomate`, 50, 100], [`Une betterave`, 75, 100], [`Une carotte`, 30, 50]]
    let liste_index = [0, 1, 2, 3, 4]
    let prix = [], pourcent = [], masse = []
    let index = combinaison_listes(liste_index, this.nb_questions)
    for (
      let i = 0, p, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pourcent[i] = choice(liste_pourcentages)
      switch (choix[i]) {
        case 1:
          prix[i] = randint(article[index[i]][1], article[index[i]][2])
          texte = `${article[index[i]][0]} coÃ»tant $${prix[i]}$â¬ bÃ©nÃ©ficie d'une rÃ©duction de $${pourcent[i]} \\%$.<br>`
          texte += `Quel est le montant en euro de cette rÃ©duction ?`
          texte_corr = `On doit calculer $${pourcent[i]}\\%$ de $${prix[i]}$â¬ :<br>`
          texte_corr += `$${pourcent[i]}\\%\\text{ de }${prix[i]}=${tex_fraction(pourcent[i], 100)}\\times${prix[i]}=(${pourcent[i]}\\times${prix[i]})\\div100=${tex_nombre(pourcent[i] * prix[i])}\\div100=${tex_nombre(Algebrite.eval((pourcent[i] * prix[i]) / 100))}$<br>`;
          texte_corr += `Le montant de la rÃ©duction est de ${tex_prix(calcul(prix[i] * pourcent[i] / 100))}â¬`
          break;
        case 2:
          masse[i] = randint(legume[index[i]][1], article[index[i]][2])
          texte = `${legume[index[i]][0]} pesant $${masse[i]}$ grammes a subit une croissance de $${pourcent[i]} \\%$.<br>`
          texte += `Quel est la masse supplÃ©mentaire en grammes correspondant Ã  cette croissance ?`
          texte_corr = `On doit calculer $${pourcent[i]}\\%$ de $${masse[i]}$ grammes :<br>`
          texte_corr += `$${pourcent[i]}\\%\\text{ de }${masse[i]}=${tex_fraction(pourcent[i], 100)}\\times${masse[i]}=(${pourcent[i]}\\times${masse[i]})\\div100=${tex_nombre(pourcent[i] * masse[i])}\\div100=${tex_nombre(Algebrite.eval((pourcent[i] * masse[i]) / 100))}$<br>`;
          texte_corr += `La masse a augmentÃ© de $${tex_nombre(calcul(masse[i] * pourcent[i] / 100))}$ g.`

          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Calculer 10, 20, 30, 40 ou 50% d'un nombre
 * @Auteur RÃ©mi Angot + Jean-claude Lhote
 * 6N33-1
 */
function Pourcentage_d_un_nombre() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer le pourcentage d'un nombre de tÃªte";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  this.spacing = 2;
  this.spacing_corr = 2.5;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_pourcentages = [10, 20, 30, 40, 50];

    for (
      let i = 0, p, n, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      p = choice(liste_pourcentages);
      n = choice([
        randint(2, 9),
        randint(2, 9) * 10,
        randint(1, 9) * 10 + randint(1, 2),
      ]);
      texte = `$${p}~\\%~\\text{de }${n}$`;
      if (p == 50) {
        texte_corr = `$${p}~\\%~\\text{de }${n}=${n}\\div${2}=${tex_nombre(
          Algebrite.eval(n / 2)
        )}$`; // calcul de n/2 si p = 50%
      } else {
        texte_corr = `$${p}~\\%~\\text{de }${n}=${tex_fraction(
          p,
          100
        )}\\times${n}=(${p}\\times${n})\\div100=${tex_nombre(
          p * n
        )}\\div100=${tex_nombre(Algebrite.eval((p * n) / 100))}$`;
        //		texte_corr += `$\\phantom {Blanc}${p}~\\%~\\text{de }${n}=${tex_fraction(p,100)}\\times${n}=\\dfrac{${p}\\times${n}}{100}=${tex_fraction(p*n,100)}=${tex_nombre(Algebrite.eval(p*n/100))}$`
        if (this.sup2)
          texte_corr += `<br>$${p}~\\%~\\text{de }${n}=${tex_fraction(
            p,
            100
          )}\\times${n}=(${n}\\div100)\\times${p}=${tex_nombrec(
            calcul(n / 100)
          )}\\times${p}=${tex_nombre(Algebrite.eval((p * n) / 100))}$`;
        //		texte_corr += `$\\phantom {Blanc}${p}~\\%~\\text{de }${n}=${tex_fraction(p,100)}\\times${n}=${tex_fraction(n,100)}\\times${p}=${tex_nombrec(calcul(n/100))}\\times${p}=${tex_nombre(Algebrite.eval(p*n/100))}$<br>`
        if (this.sup2)
          texte_corr += `<br>$${p}~\\%~\\text{de }${n}=${tex_fraction(
            p,
            100
          )}\\times${n}=${tex_nombrec(calcul(p / 100))}\\times${n}=${tex_nombre(
            Algebrite.eval((p * n) / 100)
          )}$`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Valeur maximale',99999];
  this.besoin_formulaire2_case_a_cocher = ["Plusieurs mÃ©thodes"];
}
/**
 * Tracer un segment de longueur une fraction de l'unitÃ©.
 * @Auteur Jean-Claude Lhote
 * 6N32
 */

function Fractions_d_unite() {
  "use strict"
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ReprÃ©senter une fraction de l\'unitÃ©";
  this.nb_questions = 5;
  this.consigne = "Colorier en bleu un segment de longueur ...";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = 1;
  this.sup2 = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles, g, carreaux, sc, unit
    let liste_type_de_questions = []
    if (this.sup < 5)
      type_de_questions_disponibles = [parseInt(this.sup)]
    else
      type_de_questions_disponibles = [1, 2, 3, 4]
    liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (
      let i = 0, den, num, choix, longueur, numIrred, denIrred, k, masse, frac, frac_unite, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          den = choice([4, 5, 6, 10])
          num = randint(1, den - 1)
          break
        case 2:
          den = choice([2, 3, 4])
          if (den == 3) num = randint(3, 2 * den - 1, den)
          else num = randint(3, 3 * den - 1, den)
          break
        case 3:
          den = choice([4, 5, 6, 10])
          if (den == 4) num = randint(5, 3 * den - 1, den)
          else num = randint(5, 2 * den - 1, den)
          break
        case 4:
          den = choice([2, 3, 4, 5, 6, 10])
          if (den == 2 || den == 4) num = randint(den + 1, 3 * den - 1, den)
          else num = randint(den + 1, 2 * den - 1, den)
          break
      }
      if (den % 3 == 0) unit = 12
      else if (den % 5 == 0) unit = 10
      else unit = 8
      frac = fraction(num, den)
      frac_unite = fraction(3 * den - 1, den)
      texte = `$${frac.texFraction()}$ unitÃ© en prenant ${unit} carreaux pour une unitÃ©.`
      if (this.sup2 < 3) g = grille(0, 0, 26, 2, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        sc = 0.6;
        carreaux = seyes(0, 0, 26, 2);
      } else {
        sc = 0.5;
        carreaux = "";
      }


      texte_corr = mathalea2d({ xmin: 0, ymin: 0, xmax: 26, ymax: 2, pixelsParCm: 20, scale: sc }, frac.representation(1, 1, unit, 0, 'segment', 'blue', 0, 1), g, carreaux)



      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Type d\'exercices", 4, "1 : fracion infÃ©rieure Ã  1\n2 : demis, tiers et quarts\n3 : quarts, cinquiÃ¨mes, sixiÃ¨mes et dixiÃ¨mes\n4 : toutes les fractions entre 1 et 3"];
  this.besoin_formulaire2_numerique = ["Type de cahier", 2, "1 :  petits carreaux\n2 : Cahier gros carreaux type Seyes"];
}
/**
 * Calculer la fracton d'une quantitÃ© avec ou sans dessin.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33-0
 */
function Fraction_d_une_quantite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer la fraction d'une quantitÃ©";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = 1;
  this.sup2 = true
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles
    let liste_type_de_questions = []
    if (this.sup < 5)
      type_de_questions_disponibles = [parseInt(this.sup)]
    else
      type_de_questions_disponibles = [1, 2, 3, 4]
    liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (
      let i = 0, den, num, choix, longueur, numIrred, denIrred, k, masse, frac, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          den = choice([2, 3, 4, 5, 10])
          num = randint(1, den - 1)
          frac = fraction(num, den)
          texte = `Ã combien de minutes correspondent $${frac.texFraction()}$ d\'heure ?<br>`
          if (this.sup2) {
            texte += `cette fraction est reprÃ©sentÃ©e ci dessous :<br>`
            texte += mathalea2d({ xmin: 0, ymin: 0, xmax: 15, ymax: 5 }, frac.representation(2.5, 2.5, 2, 0, 'gateau', 'blue'))
          }
          texte_corr = `Comme l\'heure est partagÃ©e en ${den} parts Ã©gales, chaque part reprÃ©sente $${tex_fraction(1, den)}$ d\'heure, soit $${calcul(60 / den)}$ minutes.<br>`
          texte_corr += `Ici, il y a $${tex_fraction(num, den)}$ d\'heure, ce qui reprÃ©sente $${num}$ fois plus, soit $${num}\\times${calcul(60 / den)}=${calcul(num * 60 / den)}$.<br>`
          texte_corr += `$${frac.texFraction()}$ d\'heure correspond donc Ã  $${calcul(num * 60 / den)}$ minutes.`
          break
        case 2:
          den = choice([2, 3, 4, 5, 10])
          num = randint(1, 3 * den, den)
          frac = fraction(num, den)
          texte = `Ã combien de minutes correspondent $${frac.texFraction()}$ d\'heure ?<br>`
          if (this.sup2) {
            texte += `Cette fraction est reprÃ©sentÃ©e ci dessous :<br>`
            texte += mathalea2d({ xmin: 0, ymin: 0, xmax: 15, ymax: 5 }, frac.representation(2.5, 2.5, 2, 0, 'gateau', 'blue'))
          }
          texte_corr = `Comme l\'heure est partagÃ©e en ${den} parts Ã©gales, chaque part reprÃ©sente $${tex_fraction(1, den)}$ d\'heure, soit $${calcul(60 / den)}$ minutes.<br>`
          texte_corr += `Ici, il y a $${tex_fraction(num, den)}$ d\'heure, ce qui reprÃ©sente $${num}$ fois plus, soit $${num}\\times${calcul(60 / den)}=${calcul(num * 60 / den)}$.<br>`
          texte_corr += `$${frac.texFraction()}$ d\'heure correspond donc Ã  $${calcul(num * 60 / den)}$ minutes.`
          break
        case 3:
          masse = choice([120, 180, 240, 300])
          denIrred = choice([2, 3, 4, 5, 10])
          numIrred = randint(1, denIrred - 1)
          while (pgcd(denIrred, numIrred) != 1 || calcul(denIrred / numIrred) == 2) {
            denIrred = choice([2, 3, 4, 5, 10])
            numIrred = randint(1, denIrred - 1)
          }
          frac = fraction(numIrred, denIrred)
          frac2 = frac.entierMoinsFraction(1)
          texte = `Voici une tablette de chocolat dont la masse totale est de $${masse}$ grammes. Quelqu'un en a dÃ©jÃ  consommÃ© les $${frac.texFractionSimplifiee()}$.<br>`
          choix = randint(1, 2)
          if (choix == 1) {
            texte += `Quelle masse de chocoloat a-t-elle Ã©tÃ© consommÃ©e ?<br>`
            texte_corr = `Comme la tablette a une masse de $${masse}$ grammes, $${tex_fraction(1, denIrred)}$ de la tablette reprÃ©sente une masse de $${calcul(masse / denIrred)}$ grammes.<br>`
            texte_corr += `Ici, il y a $${frac.texFractionSimplifiee()}$ de la tablette qui a Ã©tÃ© consommÃ©, ce qui reprÃ©sente $${numIrred}$ fois plus, soit $${numIrred}\\times${calcul(masse / denIrred)}=${calcul(numIrred * masse / denIrred)}$.<br>`
            texte_corr += `La masse de chocolat consommÃ©e est $${calcul(numIrred * masse / denIrred)}$ grammes.`
          }
          else {
            texte += `Quelle masse de chocolat reste-t-il ?<br>`
            texte_corr = `Comme la tablette a une masse de $${masse}$ grammes, $${tex_fraction(1, denIrred)}$ de la tablette reprÃ©sente une masse de $${calcul(masse / denIrred)}$ grammes.<br>`
            texte_corr += `Ici, il y a $${frac.texFractionSimplifiee()}$ de la tablette qui a Ã©tÃ© consommÃ©, ce qui reprÃ©sente $${numIrred}$ fois plus, soit $${numIrred}\\times${calcul(masse / denIrred)}=${calcul(numIrred * masse / denIrred)}$.<br>`
            texte_corr += `La masse de chocolat consommÃ©e est $${calcul(numIrred * masse / denIrred)}$ grammes.<br>`
            texte_corr += `Il reste donc : $${masse}-${calcul(numIrred * masse / denIrred)}=${calcul(masse - numIrred * masse / denIrred)}$ grammes de chocolat.<br>`
            texte_corr += `une autre faÃ§on de faire est d'utiliser la fraction restante : $${tex_fraction(denIrred, denIrred)}-${frac.texFractionSimplifiee()}=${tex_fraction(denIrred - numIrred, denIrred)}$.<br>`
            texte_corr += `$${tex_fraction(denIrred - numIrred, denIrred)}$ de $${masse}$ grammes c\'est $${denIrred - numIrred}$ fois $${calcul(masse / denIrred)}$ grammes.<br>`
            texte_corr += `Il reste donc : $${denIrred - numIrred}\\times${calcul(masse / denIrred)}=${(denIrred - numIrred) * masse / denIrred}$ grammes de chocolat.`

          }
          if (this.sup2) {
            texte += `La tablette de chocolat est reprÃ©sentÃ©e ci dessous :<br>`
            texte += mathalea2d({ xmin: -0.5, ymin: -0.5, xmax: 5, ymax: 7 }, frac2.representationIrred(0, 0, 4, 0, 'baton', 'brown'))
          }
          break
        case 4:
          den = choice([2, 3, 4, 5, 10])
          num = randint(1, den - 1)
          longueur = choice([120, 180, 240, 300])
          denIrred = choice([2, 3, 4, 5, 10])
          numIrred = randint(1, denIrred - 1)
          while (pgcd(denIrred, numIrred) != 1 || calcul(denIrred / numIrred) == 2) {
            denIrred = choice([2, 3, 4, 5, 10])
            numIrred = randint(1, denIrred - 1)
          }
          k = calcul(300 / denIrred)
          den = calcul(denIrred * k)
          num = calcul(numIrred * k)
          frac = fraction(num, den)
          texte = `Un bÃ¢ton de $${tex_nombrec(longueur / 100)}$ mÃ¨tre`
          if (longueur >= 200) texte += `s`
          texte += ` de longueur est coupÃ© Ã  $${frac.texFractionSimplifiee()}$ de sa longueur.<br>`
          texte += `Calculer la longueur de chacun des morceaux en mÃ¨tres.<br>`
          if (this.sup2) {
            texte += `Ce bÃ¢ton est reprÃ©sentÃ© ci dessous :<br>`
            texte += mathalea2d({ xmin: -0.5, ymin: 0, xmax: 10, ymax: 2 }, frac.representationIrred(0, 1, 8, 0, 'segment', 'blue', "0", `${tex_nombre(calcul(longueur / 100))}`))
          }
          texte_corr = `$${tex_fraction(1, denIrred)}$ de $${tex_nombrec(longueur / 100)}$ reprÃ©sente $${tex_nombrec(longueur / 100)} \\div ${denIrred} = ${tex_nombrec(longueur / 100 / denIrred)}$.<br>`
          texte_corr += `Le premier morceau du bÃ¢ton correspondant Ã  $${frac.texFractionSimplifiee()}$ du bÃ¢ton mesure : $${numIrred} \\times ${tex_nombrec(longueur / 100 / denIrred)}=${tex_nombrec(numIrred * longueur / 100 / denIrred)}$ m.<br>`
          texte_corr += `Le deuxiÃ¨me morceau mesure donc : $${tex_nombrec(longueur / 100)}-${tex_nombrec(numIrred * longueur / 100 / denIrred)}=${tex_nombrec(longueur / 100 - numIrred * longueur / 100 / denIrred)}$ m.`

          break
      }



      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Type d\'exercices", 5, "1 : Heures & minutes (infÃ©rieur Ã  1h)\n2 : Heures & minutes (jusqu\'Ã  3h)\n3 : tablettes de chocolat\n4 : BÃ¢ton cassÃ©\n5 : MÃ©lange"];
  this.besoin_formulaire2_case_a_cocher = ["Avec dessin", true];
}
/**
 * Calculer la fracton d'un nombre divisible par le dÃ©nominateur ... ou pas.
 *
 * Par dÃ©faut la division du nombre par le dÃ©nominateur est infÃ©rieure Ã  11
 * @Auteur RÃ©mi Angot + Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33
 */
function Fraction_d_un_nombre(max = 11) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer la fraction d'un nombre";
  this.nb_questions = 5;
  this.consigne = "Calculer";
  sortie_html ? (this.spacing_corr = 3.5) : (this.spacing_corr = 2);
  sortie_html ? (this.spacing = 2) : (this.spacing = 2);
  this.sup = true;
  this.sup2 = false;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_fractions = [
      [1, 2],
      [1, 3],
      [2, 3],
      [1, 4],
      [3, 4],
      [1, 5],
      [2, 5],
      [3, 5],
      [4, 5],
      [1, 6],
      [5, 6],
      [1, 7],
      [2, 7],
      [3, 7],
      [4, 7],
      [5, 7],
      [6, 7],
      [1, 8],
      [3, 8],
      [5, 8],
      [7, 8],
      [1, 9],
      [2, 9],
      [4, 9],
      [5, 9],
      [7, 9],
      [8, 9],
      [1, 10],
      [3, 10],
      [7, 10],
      [9, 10],
    ]; // Couples de nombres premiers entre eux

    for (
      let i = 0, a, b, k, n, j, fraction, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      fraction = choice(liste_fractions);
      a = fraction[0];
      b = fraction[1];
      k = randint(1, 11);
      j = false;
      if (this.sup) n = b * k;
      else if (randint(0, 1) == 0) n = b * k;
      else n = randint(10, b * 11);
      texte = `$${tex_fraction(a, b)}\\times${n}=$`;
      texte_corr = ``;
      if (a == 1) {
        // Si n * 1/b
        if (calcul(n / b - arrondi(n / b, 4)) == 0)
          texte_corr += `$${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=${n}\\div${mise_en_evidence(b)}=${tex_nombrec(
            Algebrite.eval(n / b)
          )}$`;
        // si rÃ©sultat dÃ©cimal
        else
          texte_corr += `$${tex_fraction(a, b)}\\times${n}=${tex_fraction(
            n,
            b
          )}${simplification_de_fraction_avec_etapes(n, b)}$`; //si rÃ©sultat non dÃ©cimal
      } else {
        if (calcul(n / b - arrondi(n / b, 4)) == 0) {
          //si n/b dÃ©cimal calcul (n/b)*a
          texte_corr += `$${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${n}\\div${mise_en_evidence(
            b
          )})\\times${a}=${tex_nombrec(
            Algebrite.eval(n / b)
          )}\\times${a}=${tex_nombrec(Algebrite.eval((n / b) * a))}$<br>`;
        } else {
          if (calcul((n * a) / b - arrondi((n * a) / b, 4)) == 0) {
            // si n/b non dÃ©cimal, alors on se rabat sur (n*a)/b
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_nombrec(Algebrite.eval((n / b) * a))}$<br>`;
          } else {
            // si autre mÃ©thode et rÃ©sultat fractionnaire calcul (n*a)/b
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_fraction(n * a, mise_en_evidence(b))}$<br>`;
          }
          j = true;
        }
        if (
          calcul((n * a) / b - arrondi((n * a) / b, 4)) == 0 &&
          this.sup2 &&
          !j
        ) {
          // Si autres mÃ©thodes et si (a*n)/b dÃ©cimal calcul (n*a)/b
          texte_corr += ` $${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
            b
          )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(b)}=${tex_nombrec(
            Algebrite.eval((n / b) * a)
          )}$<br>`;
        } else {
          // si autre mÃ©thode et rÃ©sultat fractionnaire calcul (n*a)/b
          if (this.sup2 && !j)
            texte_corr += ` $${tex_fraction(
              a,
              mise_en_evidence(b)
            )}\\times${n}=(${n}\\times${a})\\div${mise_en_evidence(
              b
            )}=${Algebrite.eval(n * a)}\\div${mise_en_evidence(
              b
            )}=${tex_fraction(n * a, mise_en_evidence(b))}$<br>`;
        }
        // si autre mÃ©thode et a/b dÃ©cimal calcul (a/b)*n
        if ((b == 2 || b == 4 || b == 5 || b == 8 || b == 10) && this.sup2)
          texte_corr += ` $${tex_fraction(
            a,
            mise_en_evidence(b)
          )}\\times${n}=(${a}\\div${mise_en_evidence(
            b
          )})\\times${n}=${tex_nombrec(
            Algebrite.eval(a / b)
          )}\\times${n}=${tex_nombrec(Algebrite.eval((n / b) * a))}$`;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_case_a_cocher = ["Forcer rÃ©sultat entier", true];
  this.besoin_formulaire2_case_a_cocher = ["Plusieurs mÃ©thodes", false];
}

/**
 * On achÃ¨te 2 aliments dont on connait la masse (un en grammes et l'autre en kilogrammes) et le prix au kilogramme. Il faut calculer le prix total.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C32
 */
function Probleme_course() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "ProblÃ¨me - Les courses";
  this.consigne = "";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let prenom = choice([
      "Benjamin",
      "LÃ©a",
      "Aude",
      "Julie",
      "Corinne",
      "Mehdi",
      "Joaquim",
    ]);
    let masse_en_kg_de_aliment1 = Algebrite.eval(
      randint(2, 5) + randint(1, 9) / 10
    );
    let prix_aliment1 = Algebrite.eval(randint(2, 4) + randint(1, 9) / 10);
    let aliment1 = choice(["courgettes", "carottes", "pommes"]);
    let masse_en_g_de_aliment2 = randint(21, 97) * 10;
    let prix_aliment2 = Algebrite.eval(randint(12, 23) + randint(1, 9) / 10);
    let aliment2 = choice(["boeuf", "veau", "poulet"]);

    texte = `${prenom} achÃ¨te ${tex_nombre(
      masse_en_kg_de_aliment1
    )} kg de ${aliment1} Ã  ${tex_prix(prix_aliment1)} â¬/kg `;
    texte += `et ${masse_en_g_de_aliment2} g de ${aliment2} Ã  ${tex_prix(
      prix_aliment2
    )} â¬/kg. Quel est le prix total Ã  payer ?`;
    texte_corr =
      `Prix des ${aliment1} : ${tex_nombre(
        masse_en_kg_de_aliment1
      )} kg Ã ${tex_prix(prix_aliment1)} â¬/kg = ${tex_prix(
        Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
      )} â¬` + "<br>";
    texte_corr +=
      `Prix du ${aliment2} : ${tex_nombre(
        Algebrite.eval(masse_en_g_de_aliment2 / 1000)
      )} kg Ã ${tex_prix(prix_aliment2)} â¬/kg = ${tex_nombre(
        Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
      )} â¬ ` + "<br>";
    texte_corr += `Prix total Ã  payer : ${tex_nombre(
      Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
    )} â¬ + ${tex_nombre(
      Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
    )} â¬ â ${arrondi_virgule(
      Algebrite.eval(
        masse_en_kg_de_aliment1 * prix_aliment1 +
        (masse_en_g_de_aliment2 * prix_aliment2) / 1000
      )
    )} â¬<br>`;
    texte_corr += `<br><i>Le prix total aurait aussi pu Ãªtre trouvÃ© en un seul calcul</i> : ${tex_nombre(
      masse_en_kg_de_aliment1
    )} kg Ã ${tex_prix(prix_aliment1)} â¬/kg + ${tex_nombre(
      Algebrite.eval(masse_en_g_de_aliment2 / 1000)
    )} kg Ã ${tex_prix(prix_aliment2)} â¬/kg â ${arrondi_virgule(
      Algebrite.eval(
        masse_en_kg_de_aliment1 * prix_aliment1 +
        (masse_en_g_de_aliment2 * prix_aliment2) / 1000
      )
    )} â¬.`;

    if (!sortie_html) {
      texte_corr =
        `Prix des ${aliment1} : $${tex_nombre(
          masse_en_kg_de_aliment1
        )}~\\text{kg}\\times${tex_prix(
          prix_aliment1
        )}~\\text{\\euro{}/kg} = ${tex_prix(
          Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
        )}~\\text{\\euro}$` + "<br>";
      texte_corr +=
        `Prix du ${aliment2} : $${tex_nombre(
          Algebrite.eval(masse_en_g_de_aliment2 / 1000)
        )}~\\text{kg}\\times${tex_prix(
          prix_aliment2
        )}~\\text{\\euro{}/kg} = ${tex_nombre(
          Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
        )}~\\text{\\euro}$` + "<br>";
      texte_corr += `Prix total Ã  payer : $${tex_nombre(
        Algebrite.eval(masse_en_kg_de_aliment1 * prix_aliment1)
      )}~\\text{\\euro} + ${tex_nombre(
        Algebrite.eval((masse_en_g_de_aliment2 * prix_aliment2) / 1000)
      )}~\\text{\\euro} \\approx ${arrondi_virgule(
        Algebrite.eval(
          masse_en_kg_de_aliment1 * prix_aliment1 +
          (masse_en_g_de_aliment2 * prix_aliment2) / 1000
        )
      )}~\\text{\\euro}$<br>`;
    }

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);

    liste_de_question_to_contenu_sans_numero(this);
  };
}



/**
 * 4 cercles sont tracÃ©s, 2 dont on connait le rayon et 2 dont on connait le diamÃ¨tre.
 * * 1 : Calculer le pÃ©rimÃ¨tre de cercles
 * * 2 : Calculer l'aire de disques
 * * 3 : Calculer le pÃ©rimÃ¨tre et l'aire de disques
 *
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M22-1
 */
function Perimetre_aire_disques(pa = 3) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de disques";
  this.sup = pa; // 1 : pÃ©rimÃ¨tre, 2 : aire, 3 : pÃ©rimÃ¨tres et aires
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [500, 500];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let tableau_des_rayons = shuffle([2, 3, 4, 5, 6, 7, 8]); //pour s'assurer que les 4 rayons sont diffÃ©rents
    let r1 = tableau_des_rayons[0];
    let r2 = tableau_des_rayons[1];
    let r3 = tableau_des_rayons[2];
    let r4 = tableau_des_rayons[3];
    if (this.sup == 1) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre des 4 cercles suivants.";
    }
    if (this.sup == 2) {
      this.consigne = "Calculer l'aire des 4 disques suivants.";
    }
    if (this.sup == 3) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 4 disques suivants.";
    }

    this.consigne +=
      "</br>Donner la valeur exacte et une valeur approchÃ©e au dixiÃ¨me prÃ¨s.";

    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAAAAAAAAQAAAEv#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFACAAAAAAAAEB#UAAAAAAA#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUA8ZmZmZmZmAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQANQ1BvaW50QmFzZUVudAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAyAAAAAAAAAQEAAAARAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAAAAAAAAAAAAAQH#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEAAAABH#####AAAAAQALQ01lZGlhdHJpY2UAAAAAEwEAAAAAEAAAAQABAAAAEAAAABH#####AAAAAQAHQ01pbGlldQAAAAATAQAAAAAQAAABBQAAAAAQAAAAEf####8AAAACAAlDQ2VyY2xlT1IAAAAAEwEAAAAAAQAAABUAAAABQDAAAAAAAAABAAAACAAAAAATAAAAFAAAABYAAAAJAAAAABMBAAAAABAAAAEFAAEAAAAXAAAAEAEAAAATAAAAEAAAABH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABMBAAAAAQAAABgRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAGQAAABIA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEgAAABEAAAATAAAAABsBAAAAABAAAAEAAQAAABIAAAARAAAAFAAAAAAbAQAAAAAQAAABBQAAAAASAAAAEQAAABUAAAAAGwEAAAAAAQAAAB0AAAABQDAAAAAAAAABAAAACAAAAAAbAAAAHAAAAB4AAAAJAAAAABsBAAAAABAAAAEFAAEAAAAfAAAAEAEAAAAbAAAAEgAAABEAAAAWAQAAABsBAAAAAQAAACARAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAIf####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAUAAAAAAAAAAAAAUAqAAAAAAAAAAAAFwD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACgAAAAFAKgAAAAAAAAAAAAFAKgAAAAAAAAAAABcA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAoAAAABQBQAAAAAAAAAAAABQBDMzMzMzM0AAAAXAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAqAAAAAAAAAAAAAUAQzMzMzMzN#####wAAAAEAB0NDYWxjdWwA#####wACcjEAATgAAAABQCAAAAAAAAAAAAAYAP####8AAnIyAAE4AAAAAUAgAAAAAAAAAAAAGAD#####AAJyMwABOAAAAAFAIAAAAAAAAAAAABgA#####wACcjQAATgAAAABQCAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAjAAAADQMAAAAOAAAAJwAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAkAAAADQMAAAAOAAAAKAAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAlAAAADQMAAAAOAAAAKQAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAmAAAADQMAAAAOAAAAKgAAAAFAAAAAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABP+2jc+MfDgIAAAArAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAT#oCnbou8r7AAAALgAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAFAA2#XuqaBNQAAACwAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAUiuM2Ua#MAAAAt#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wEAAAAAEAAAAQABAAAAMQAAACQAAAAaAP####8BAAAAABAAAAEAAQAAADIAAAAl#####wAAAAEAI0NBdXRyZVBvaW50SW50ZXJzZWN0aW9uRHJvaXRlQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAsAAAAMwAAADEAAAAbAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAtAAAANAAAADL#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQEBAAAAIwAAAC8AAAAcAP####8AAAAAABAAAAEBAQAAADEAAAA1AAAAHAD#####AAAAAAAQAAABAQEAAAAyAAAANgAAABwA#####wAAAAAAEAAAAQEBAAAAJgAAADAAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAjAAAALwAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAACYAAAAwAAAAFgD#####AAAAAABAEAAAAAAAAEAUAAAAAAAAAAAAOxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAyBjbQIAAAAnAAAAGAD#####AAJkMgAEMipyMgAAAA0CAAAAAUAAAAAAAAAAAAAADgAAACgAAAAYAP####8AAmQzAAQyKnIzAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAKQAAABYA#####wAAAAAAQBQAAAAAAADALAAAAAAAAAAAACQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPgAAABYA#####wAAAAAAQBAAAAAAAADAMQAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPwAAABYA#####wAAAAAAQBAAAAAAAABAAAAAAAAAAAAAADwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAJjbQIAAAAqAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUAC6DhJtPdjAAAAKwAAABkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAE#54KANM#JugAAACwAAAAZAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAH6z0QhlKUAAAAtAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUABlMNYoHZ0AAAALv####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwDUAAAAAAADANwAAAAAAAAAAAEMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQyNMKDEpAAAAHQD#####AAAAAABAGAAAAAAAAMAwAAAAAAAAAAAARBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAZDI0woMikAAAAdAP####8AAAAAAMA3AAAAAAAAwDUAAAAAAAAAAABFEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAABkMjTCgzKQAAAB0A#####wAAAAAAwDgAAAAAAADANQAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAGQyNMKDQpAAAADv##########";
    //	let codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAH0AAAB9AAAAQEAAAAAAAAAAQAAAEv#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFPAMAoAAAAAAAAAAAAAAAAAAAFAAFACAAAAAAAAEB#UAAAAAAA#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBgAAAAAAAAAAAAAAAAAAAUAAUA8ZmZmZmZmAAAAAv####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAQAAAAP#####AAAAAQAWQ0Ryb2l0ZVBlcnBlbmRpY3VsYWlyZQD#####AQAAAAAQAAABAAEAAAABAAAABP####8AAAABAAlDQ2VyY2xlT0EA#####wEAAAAAAQAAAAEAAAAD#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAUAAAAG#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAQUAAQAAAAcAAAAJAP####8BAAAAAA4AAUoAwCgAAAAAAADAEAAAAAAAAAUAAgAAAAf#####AAAAAgAHQ1JlcGVyZQD#####AObm5gABAAAAAQAAAAMAAAAJAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEACkNVbml0ZXhSZXAA#####wAEdW5pdAAAAAr#####AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAH#####AAAAAQAKQ09wZXJhdGlvbgMAAAABP#AAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAC#####8AAAABAAtDUG9pbnRJbWFnZQD#####AQAAAAAQAAJXIgEBAAAAAAMAAAAM#####wAAAAEACUNMb25ndWV1cgD#####AAAAAQAAAA3#####AAAAAQANQ1BvaW50QmFzZUVudAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAyAAAAAAAAAQEAAAARAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAQAAAAoAAAAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAEAwAAAAAAAAAQEAAAARAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAUAAQAAAApAMQAAAAAAAAAAAAAAAAAAAQH#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEAAAABH#####AAAAAQALQ01lZGlhdHJpY2UAAAAAEwEAAAAAEAAAAQABAAAAEAAAABH#####AAAAAQAHQ01pbGlldQAAAAATAQAAAAAQAAABBQAAAAAQAAAAEf####8AAAACAAlDQ2VyY2xlT1IAAAAAEwEAAAAAAQAAABUAAAABQDAAAAAAAAABAAAACAAAAAATAAAAFAAAABYAAAAJAAAAABMBAAAAABAAAAEFAAEAAAAXAAAAEAEAAAATAAAAEAAAABH#####AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABMBAAAAAQAAABgRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAGQAAABIA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAEgAAABEAAAATAAAAABsBAAAAABAAAAEAAQAAABIAAAARAAAAFAAAAAAbAQAAAAAQAAABBQAAAAASAAAAEQAAABUAAAAAGwEAAAAAAQAAAB0AAAABQDAAAAAAAAABAAAACAAAAAAbAAAAHAAAAB4AAAAJAAAAABsBAAAAABAAAAEFAAEAAAAfAAAAEAEAAAAbAAAAEgAAABEAAAAWAQAAABsBAAAAAQAAACARAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAAIf####8AAAABABBDUG9pbnREYW5zUmVwZXJlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAUAAAAAAAAAAAAAUAqAAAAAAAAAAAAFwD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACgAAAAFAKgAAAAAAAAAAAAFAKgAAAAAAAAAAABcA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAoAAAABQBQAAAAAAAAAAAABQBDMzMzMzM0AAAAXAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAKAAAAAUAqAAAAAAAAAAAAAUAQzMzMzMzN#####wAAAAEAB0NDYWxjdWwA#####wACcjEAATgAAAABQCAAAAAAAAAAAAAYAP####8AAnIyAAE4AAAAAUAgAAAAAAAAAAAAGAD#####AAJyMwABOAAAAAFAIAAAAAAAAAAAABgA#####wACcjQAATgAAAABQCAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAjAAAADQMAAAAOAAAAJwAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAkAAAADQMAAAAOAAAAKAAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAlAAAADQMAAAAOAAAAKQAAAAFAAAAAAAAAAAAAAAAVAP####8AAAAAAAEAAAAmAAAADQMAAAAOAAAAKgAAAAFAAAAAAAAAAAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABP+2jc+MfDgIAAAArAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAT#oCnbou8r7AAAALgAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAFAA2#XuqaBNQAAACwAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAUiuM2Ua#MAAAAt#####wAAAAEADUNEZW1pRHJvaXRlT0EA#####wEAAAAADQAAAQABAAAAMQAAACQAAAAaAP####8BAAAAAA0AAAEAAQAAADIAAAAl#####wAAAAEAI0NBdXRyZVBvaW50SW50ZXJzZWN0aW9uRHJvaXRlQ2VyY2xlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAsAAAAMwAAADEAAAAbAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAtAAAANAAAADL#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQEBAAAAIwAAAC8AAAAcAP####8AAAAAABAAAAEBAQAAADEAAAA1AAAAHAD#####AAAAAAAQAAABAQEAAAAyAAAANgAAABwA#####wAAAAAAEAAAAQEBAAAAJgAAADAAAAAUAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwAAAAAjAAAALwAAABQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAACYAAAAwAAAAFgD#####AAAAAABAEAAAAAAAAEAUAAAAAAAAAAAAOxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAyBjbQIAAAAnAAAAGAD#####AAJkMgAEMipyMgAAAA0CAAAAAUAAAAAAAAAAAAAADgAAACgAAAAYAP####8AAmQzAAQyKnIzAAAADQIAAAABQAAAAAAAAAAAAAAOAAAAKQAAABYA#####wAAAAAAQBQAAAAAAADALAAAAAAAAAAAACQQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPgAAABYA#####wAAAAAAQBAAAAAAAADAMQAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAMgY20CAAAAPwAAABYA#####wAAAAAAQBAAAAAAAABAAAAAAAAAAAAAADwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAJjbQIAAAAqAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUAC6DhJtPdjAAAAKwAAABkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAE#54KANM#JugAAACwAAAAZAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABQAH6z0QhlKUAAAAtAAAAGQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAUABlMNYoHZ0AAAALv####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwDAAAAAAAADAMwAAAAAAAAAAAEMQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAPJFxtYXRoY2Fse0N9XzEkAAAAHQD#####AAAAAABAGAAAAAAAAMAwAAAAAAAAAAAARBAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAA8kXG1hdGhjYWx7Q31fMiQAAAAdAP####8AAAAAAMAyAAAAAAAAwDQAAAAAAAAAAABFEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAADyRcbWF0aGNhbHtDfV8zJAAAAB0A#####wAAAAAAwDMAAAAAAADAMAAAAAAAAAAAAEYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAPJFxtYXRoY2Fse0N9XzQkAAAADv##########";
    //  Si affichage LaTeX alors bug de MG32
    texte_corr = "";
    if (this.sup == 1) {
      //si on ne demande pas les aires
      texte_corr = `$\\mathcal{P}_1=2\\times${r1}\\times\\pi=${2 * r1
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(2 * r1 * Math.PI), 1)
        )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_2=${2 * r2}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r2 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_3=${2 * r3}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r3 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_4=2\\times${r4}\\times\\pi=${2 * r4
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(2 * r4 * Math.PI), 1)
        )}$ cm<br>`;
    }

    if (this.sup == 2) {
      texte_corr += `$\\mathcal{A}_1=${r1}\\times${r1}\\times\\pi=${r1 * r1
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r1 * r1 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_2$ est ${2 * r2
        } cm donc son rayon est ${r2} cm.<br>`;
      texte_corr += `$\\mathcal{A}_2=${r2}\\times${r2}\\times\\pi=${r2 * r2
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_3$ est ${2 * r3
        } cm donc son rayon est ${r3} cm.<br>`;
      texte_corr += `$\\mathcal{A}_3=${r3}\\times${r3}\\times\\pi=${r3 * r3
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `$\\mathcal{A}_4=${r4}\\times${r4}\\times\\pi=${r4 * r4
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r4 * r4 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
    }

    if (this.sup == 3) {
      texte_corr = `$\\mathcal{P}_1=2\\times${r1}\\times\\pi=${2 * r1
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(2 * r1 * Math.PI), 1)
        )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_2=${2 * r2}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r2 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_3=${2 * r3}\\times\\pi\\approx${tex_nombre(
        arrondi(Algebrite.eval(2 * r3 * Math.PI), 1)
      )}$ cm<br>`;
      texte_corr += `$\\mathcal{P}_4=2\\times${r4}\\times\\pi=${2 * r4
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(2 * r4 * Math.PI), 1)
        )}$ cm<br>`;

      texte_corr += `<br>`;

      texte_corr += `$\\mathcal{A}_1=${r1}\\times${r1}\\times\\pi=${r1 * r1
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r1 * r1 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_2$ est ${2 * r2
        } cm donc son rayon est ${r2} cm.<br>`;
      texte_corr += `$\\mathcal{A}_2=${r2}\\times${r2}\\times\\pi=${r2 * r2
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `Le diamÃ¨tre de $\\mathcal{C}_3$ est ${2 * r3
        } cm donc son rayon est ${r3} cm.<br>`;
      texte_corr += `$\\mathcal{A}_3=${r3}\\times${r3}\\times\\pi=${r3 * r3
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
      texte_corr += `$\\mathcal{A}_4=${r4}\\times${r4}\\times\\pi=${r4 * r4
        }\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(r4 * r4 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
    }

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r1", "${r1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r2", "${r2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r3", "${r3}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r4", "${r4}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : PÃ©rimÃ¨tres\n\
2 : Aires\n3 : PÃ©rimÃ¨tres et aires",
  ];
}

/**
 * 3 figures sont donnÃ©es, 1 quart de disque, un demi-disque et un 3-quarts de disque
 * * 1 : Calculer les pÃ©rimÃ¨tres
 * * 2 : Calculer les aires
 * * 3 : Calculer les pÃ©rimÃ¨tres et aires
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©Ã©fÃ©rence 6M22-2
 */
function Perimetre_aire_et_portions_de_disques(pa = 3) {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de portions de cercles";
  this.consigne =
    "Calculer le pÃ©rimÃ¨tre et l'aire de chacune des figures suivantes";
  this.sup = pa; // 1 : pÃ©rimÃ¨tre, 2 : aire, 3 : pÃ©rimÃ¨tres et aires
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [600, 450];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let r = randint(1, 5);
    let r2 = randint(2, 4);
    let r3 = randint(2, 4);
    let figure = randint(1, 2);
    let codeBase64 = "";
    if (this.sup == 1) {
      this.consigne = "Calculer le pÃ©rimÃ¨tre de chacune des figures suivantes";
    }
    if (this.sup == 2) {
      this.consigne = "Calculer l'aire de chacune des figures suivantes";
    }

    if (figure == 1) {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAIoAAACNQAAAQEAAAAAAAAAAQAAAE######AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAJyMwABNgAAAAFAGAAAAAAAAP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmb#####AAAAAQAUQ0Ryb2l0ZURpcmVjdGlvbkZpeGUA#####wEAAAAAEAAAAQABAAAAAgE#8AAAAAAAAP####8AAAABAA9DUG9pbnRMaWVEcm9pdGUA#####wEAAAAADgABVgDAAAAAAAAAAEAQAAAAAAAABQABQDxmZmZmZmYAAAAD#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAAIAAAAE#####wAAAAEAB0NNaWxpZXUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAIAAAAE#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAAAAAAAAAAAAAEAYAAAAAAAAAAAABgwAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAEx#####wAAAAEACUNMb25ndWV1cgD#####AAAAAgAAAAQAAAADAP####8BAAAAABAAAU8AAAAAAAAAAABACAAAAAAAAAMAAUBRQAAAAAAAQGQAAAAAAAAAAAACAP####8AAXIAATQAAAABQBAAAAAAAAAAAAAEAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAM#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAANAAAADQD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAADAAEAAAAN#####wAAAAEADENBcmNEZUNlcmNsZQD#####AAAAAAABAAAACQAAAA######AAAAAUBWgAAAAAAAAAAABgD#####AAAAAAAQAAABAAEAAAAJAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAARAAAADAD#####AAAAEgAAABAAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwABAAAAEwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAATAAAABgD#####AAAAAAAQAAABAAEAAAAVAAAACf####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAAJAAAAD#####8AAAABAAtDTWVkaWF0cmljZQAAAAAXAQAAAAAQAAABAAEAAAAJAAAADwAAAAcAAAAAFwEAAAAAEAAAAQUAAAAACQAAAA8AAAAKAAAAABcBAAAAAAEAAAAZAAAAAUAwAAAAAAAAAQAAAAwAAAAAFwAAABgAAAAaAAAADQAAAAAXAQAAAAAQAAABBQABAAAAGwAAAAkBAAAAFwAAAAkAAAAP#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQEAAAAXAAAAAAEAAAAcEQAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAADIGNtAQAAAB3#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQA#####wAAAP8AAgEAAAAWAAAAEwD#####AAAA#wACAQAAABEAAAACAP####8AAnIyAAE1AAAAAUAUAAAAAAAAAAAACgD#####AQAA#wABAAAACf####8AAAABAApDT3BlcmF0aW9uAAAAABQAAAAACwAAAAoAAAALAAAAIQAAAAFAAAAAAAAAAAAAAAAMAP####8AAAALAAAAIgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAAjAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAACMAAAAKAP####8BAAAAAAEAAAAlAAAACwAAACEAAAAADAD#####AAAACwAAACYAAAANAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAMAAgAAACcAAAANAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAMAAQAAACcAAAAOAP####8AAAAAAAEAAAAlAAAAKQAAACgAAAAGAP####8AAAAAABAAAAEAAQAAACgAAAApAAAAEAD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAAoAAAAKQAAABEAAAAALAEAAAAAEAAAAQABAAAAKAAAACkAAAAHAAAAACwBAAAAABAAAAEFAAAAACgAAAApAAAACgAAAAAsAQAAAAABAAAALgAAAAFAMAAAAAAAAAEAAAAMAAAAACwAAAAtAAAALwAAAA0AAAAALAEAAAAAEAAAAQUAAQAAADAAAAAJAQAAACwAAAAoAAAAKQAAABIBAAAALAAAAAABAAAAMREAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAAAyAAAABwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAACQAAACkAAAAPAP####8BAAAAABAAAAEAAQAAADQAAAArAAAACgD#####AQAAAAABAAAANAAAABQAAAAACwAAAAEAAAABQAAAAAAAAAAAAAAADAD#####AAAANQAAADYAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAAAwACAAAANwAAAA0A#####wEAAAAAEAABRQAAAAAAAAAAAEAIAAAAAAAAAwABAAAANwAAAAQA#####wEAAAABEAAAAQABAAAAOQE#8AAAAAAAAAAAAAoA#####wEAAAAAAQAAADkAAAALAAAAAQAAAAAMAP####8AAAA6AAAAOwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAA8AAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAQAAADwAAAAMAP####8AAAA1AAAAOwAAAA0A#####wEAAAAAEAABRAAAAAAAAAAAAEAIAAAAAAAAAwACAAAAPwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAAA######wAAAAEAEUNHcmFuZEFyY0RlQ2VyY2xlAP####8AAAAAAAEAAAA5AAAAPgAAAEAAAAAGAP####8AAAAAABAAAAEAAQAAAEAAAAA5AAAABgD#####AAAAAAAQAAABAAEAAAA5AAAAPgAAABMA#####wAAAP8AAgIAAABDAAAAEwD#####AAAA#wACAgAAAEQAAAAQAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAEAAAAA5AAAAEQAAAABHAQAAAAAQAAABAAEAAABAAAAAOQAAAAcAAAAARwEAAAAAEAAAAQUAAAAAQAAAADkAAAAKAAAAAEcBAAAAAAEAAABJAAAAAUAwAAAAAAAAAQAAAAwAAAAARwAAAEgAAABKAAAADQAAAABHAQAAAAAQAAABBQABAAAASwAAAAkBAAAARwAAAEAAAAA5AAAAEgEAAABHAAAAAABARgAAAAAAAAAAAAAAAAAAAAAATBEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABNAAAACP##########";

      if (this.sup == 1) {
        //si on ne demande pas les aires
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${2 * r2
          } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{1}{2}\\times${2 * r2
          }\\times\\pi+${2 * r2}=${r2}\\pi+${2 * r2}\\approx${tex_nombre(
            arrondi(Algebrite.eval(r2 * Math.PI + 2 * r2), 1)
          )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r3} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{3}{4}\\times2\\times${r3}\\times\\pi+${r3}+${r3}=${tex_nombre(
          Algebrite.eval((6 * r3) / 4)
        )}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(((6 * r3) / 4) * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
      }

      if (this.sup == 2) {
        texte_corr = `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est la moitiÃ© d'un disque de diamÃ¨tre ${2 * r2
          } cm donc de ${r2} cm de rayon.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{1}{2}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          Algebrite.eval((r2 * r2) / 2)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r2 * r2) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{3}{4}\\times${r3}\\times${r3}\\times\\pi=${tex_nombre(
          Algebrite.eval((3 / 4) * r3 * r3)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$`;
      }

      if (this.sup == 3) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${2 * r2
          } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{1}{2}\\times${2 * r2
          }\\times\\pi+${2 * r2}=${r2}\\pi+${2 * r2}\\approx${tex_nombre(
            arrondi(Algebrite.eval(r2 * Math.PI + 2 * r2), 1)
          )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r3} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{3}{4}\\times2\\times${r3}\\times\\pi+${r3}+${r3}=${tex_nombre(
          Algebrite.eval((6 * r3) / 4)
        )}\\pi+${2 * r3}\\approx${tex_nombre(
          arrondi(Algebrite.eval(((6 * r3) / 4) * Math.PI + 2 * r3), 1)
        )}$ cm<br>`;
        texte_corr += `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est la moitiÃ© d'un disque de diamÃ¨tre ${2 * r2
          } cm donc de ${r2} cm de rayon.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{1}{2}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          Algebrite.eval((r2 * r2) / 2)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r2 * r2) / 2) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est trois quarts d'un disque de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{3}{4}\\times${r3}\\times${r3}\\times\\pi=${tex_nombre(
          Algebrite.eval((3 / 4) * r3 * r3)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r3 * r3 * Math.PI), 1)
        )}~\\text{cm}^2$`;
      }
    } else {
      codeBase64 =
        "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAL2AAACOAAAAQEAAAAAAAAAAQAAAGX#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAHQ0NhbGN1bAD#####AAJyMwABNgAAAAFAGAAAAAAAAP####8AAAABAApDUG9pbnRCYXNlAP####8BAAAAAA4AAVUAwCQAAAAAAABAEAAAAAAAAAUAAEAsZmZmZmZmQCxmZmZmZmb#####AAAAAQAUQ0Ryb2l0ZURpcmVjdGlvbkZpeGUA#####wEAAAAAEAAAAQABAAAAAgE#8AAAAAAAAP####8AAAABAA9DUG9pbnRMaWVEcm9pdGUA#####wEAAAAADgABVgDAAAAAAAAAAEAQAAAAAAAABQABQDxmZmZmZmYAAAAD#####wAAAAEACENTZWdtZW50AP####8BAAAAABAAAAEAAQAAAAIAAAAE#####wAAAAEAB0NNaWxpZXUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAIAAAAE#####wAAAAIADENDb21tZW50YWlyZQD#####AQAAAAAAAAAAAAAAAEAYAAAAAAAAAAAABgwAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAEx#####wAAAAEACUNMb25ndWV1cgD#####AAAAAgAAAAQAAAADAP####8BAAAAABAAAU8AAAAAAAAAAABACAAAAAAAAAMAAUBRQAAAAAAAQGQAAAAAAAAAAAACAP####8AAXIAATQAAAABQBAAAAAAAAAAAAAEAP####8BAAAAARAAAAEAAQAAAAkBP#AAAAAAAAD#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAEAAAAJ#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAM#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAIAAAANAAAADQD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAADAAEAAAANAAAABgD#####AAAAAAAQAAABAAEAAAAJAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8BAAAAABAAAAEAAQAAAAkAAAAQ#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAAkAAAAP#####wAAAAEAC0NNZWRpYXRyaWNlAAAAABIBAAAAABAAAAEAAQAAAAkAAAAPAAAABwAAAAASAQAAAAAQAAABBQAAAAAJAAAADwAAAAoAAAAAEgEAAAAAAQAAABQAAAABQDAAAAAAAAABAAAADAAAAAASAAAAEwAAABUAAAANAAAAABIBAAAAABAAAAEFAAEAAAAWAAAACQEAAAASAAAACQAAAA######AAAAAQAPQ1ZhbGV1ckFmZmljaGVlAQAAABIAAAAAAQAAABcRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAAGAAAAAIA#####wACcjIAATQAAAABQBAAAAAAAAAAAAAKAP####8BAAD#AAEAAAAJ#####wAAAAEACkNPcGVyYXRpb24AAAAAEgAAAAALAAAACgAAAAsAAAAaAAAAAUAAAAAAAAAAAAAAAAwA#####wAAAAsAAAAbAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAgAAABwAAAANAP####8BAAAAABAAAUcAAAAAAAAAAABACAAAAAAAAAMAAQAAABwAAAAKAP####8BAAAAAAEAAAAeAAAACwAAABoAAAAADAD#####AAAACwAAAB8AAAANAP####8BAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAMAAgAAACAAAAANAP####8BAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAMAAQAAACAAAAAGAP####8BAAAAABAAAAEAAQAAACEAAAAiAAAADwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAQAAAAIAAAAhAAAAIgAAABAAAAAAJAEAAAAAEAAAAQABAAAAIQAAACIAAAAHAAAAACQBAAAAABAAAAEFAAAAACEAAAAiAAAACgAAAAAkAQAAAAABAAAAJgAAAAFAMAAAAAAAAAEAAAAMAAAAACQAAAAlAAAAJwAAAA0AAAAAJAEAAAAAEAAAAQUAAQAAACgAAAAJAQAAACQAAAAhAAAAIgAAAAcA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAAAAAkAAAAiAAAADgD#####AQAAAAAQAAABAAEAAAArAAAAIwAAAAoA#####wEAAAAAAQAAACsAAAASAgAAAAE#+AAAAAAAAAAAAAsAAAAaAAAAAAwA#####wAAACwAAAAtAAAADQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAgAAAC4AAAANAP####8BAAAAABAAAUUAAAAAAAAAAABACAAAAAAAAAMAAQAAAC4AAAAEAP####8BAAAAARAAAAEAAQAAADABP#AAAAAAAAAAAAAKAP####8BAAAAAAEAAAAwAAAACwAAAAEAAAAADAD#####AAAAMQAAADIAAAANAP####8BAAAAABAAAUkAAAAAAAAAAABACAAAAAAAAAMAAgAAADMAAAANAP####8BAAAAABAAAUgAAAAAAAAAAABACAAAAAAAAAMAAQAAADMAAAAMAP####8AAAAsAAAAMgAAAA0A#####wEAAAAAEAABRAAAAAAAAAAAAEAIAAAAAAAAAwACAAAANgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAAA2AAAABgD#####AQAAAAAQAAABAAEAAAA3AAAAMAAAAAYA#####wAAAAAAEAAAAQABAAAAMAAAADUAAAAPAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAADcAAAAwAAAAEAAAAAA7AQAAAAAQAAABAAEAAAA3AAAAMAAAAAcAAAAAOwEAAAAAEAAAAQUAAAAANwAAADAAAAAKAAAAADsBAAAAAAEAAAA9AAAAAUAwAAAAAAAAAQAAAAwAAAAAOwAAADwAAAA+AAAADQAAAAA7AQAAAAAQAAABBQABAAAAPwAAAAkBAAAAOwAAADcAAAAwAAAAEQEAAAA7AQAAAABARgAAAAAAAAAAAAAAAAAAAAAAQBEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABBAAAADAD#####AAAAEQAAAAwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAQwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAABDAAAABgD#####AAAAAAAQAAABAAEAAAAwAAAANAAAAA4A#####wEAAP8AEAAAAQACAAAAHgAAACMAAAAMAP####8AAABHAAAAHwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAADAAEAAABIAAAADQD#####AQAAAAAQAAFGAAAAAAAAAAAAQAgAAAAAAAADAAIAAABIAAAABgD#####AAAAAAAQAAABAAEAAAAeAAAASgAAAAYA#####wAAAAAAEAAAAQABAAAAHgAAACH#####AAAAAQAMQ0FyY0RlQ2VyY2xlAP####8AAAAAAAEAAAAJAAAADwAAAEQAAAAPAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAACAAAAAgAAAEoAAAAeAAAAEAAAAABOAQAAAAAQAAABAAEAAABKAAAAHgAAAAcAAAAATgEAAAAAEAAAAQUAAAAASgAAAB4AAAAKAAAAAE4BAAAAAAEAAABQAAAAAUAwAAAAAAAAAQAAAAwAAAAATgAAAE8AAABRAAAADQAAAABOAQAAAAAQAAABBQABAAAAUgAAAAkBAAAATgAAAEoAAAAeAAAAEQEAAABOAAAAAADAKgAAAAAAAAAAAAAAAAAAAAAAUxEAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAABUAAAADwD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAgAAAAIAAAA1AAAANAAAABAAAAAAVgEAAAAAEAAAAQABAAAANQAAADQAAAAHAAAAAFYBAAAAABAAAAEFAAAAADUAAAA0AAAACgAAAABWAQAAAAABAAAAWAAAAAFAMAAAAAAAAAEAAAAMAAAAAFYAAABXAAAAWQAAAA0AAAAAVgEAAAAAEAAAAQUAAQAAAFoAAAAJAQAAAFYAAAA1AAAANAAAABEBAAAAVgAAAAAAAAAAAAAAAADACAAAAAAAAAAAAFsRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAAXAAAAAYA#####wAAAAAAEAAAAQABAAAACQAAAEQAAAATAP####8AAAAAAAEAAAAwAAAANP####8AAAABQGaAAAAAAAD#####AAAAAQARQ0dyYW5kQXJjRGVDZXJjbGUA#####wAAAAAAAQAAAB4AAAAh#####wAAAAFAcOAAAAAAAP####8AAAABAA5DTWFycXVlU2VnbWVudAD#####AAAA#wACAgAAAF4AAAAVAP####8AAAD#AAICAAAAEAAAABUA#####wAAAP8AAgAAAABLAAAAFQD#####AAAA#wACAAAAAEwAAAAI##########8=";
      texte_corr = `La premiÃ¨re figure est un quart de cercle de rayon ${r} cm auquel il faut ajouter les 2 rayons qui ferment la figure.<br>`;

      if (this.sup == 1) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r2} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{3}{4}\\times2\\times${r2}\\times\\pi+${r2}+${r2}=${tex_nombre(
          (6 / 4) * r2
        )}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval((6 / 4) * r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${2 * r3
          } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{1}{2}\\times${2 * r3
          }\\times\\pi+${2 * r3}=${r3}\\pi+${2 * r3}\\approx${tex_nombre(
            arrondi(Algebrite.eval(r3 * Math.PI + 2 * r3), 1)
          )}$ cm<br>`;
      }

      if (this.sup == 2) {
        texte_corr = `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque rayon ${r2} cm.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{3}{4}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          (3 / 4) * r2 * r2
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-cercle de diamÃ¨tre ${2 * r3
          } cm donc de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{1}{2}\\times${r3}\\times${r3}\\times\\pi=${(r3 * r3) / 2
          }\\pi\\approx${tex_nombre(
            arrondi(Algebrite.eval(((r3 * r3) / 2) * Math.PI), 1)
          )}~\\text{cm}^2$<br>`;
      }

      if (this.sup == 3) {
        texte_corr = `La premiÃ¨re figure est un quart de disque, son pÃ©rimÃ¨tre est composÃ© d'un quart de cercle de rayon ${r} cm et de 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_1=\\dfrac{1}{4}\\times2\\times${r}\\times\\pi+${r}+${r}=${tex_nombre(
          Algebrite.eval(r / 2)
        )}\\pi+${2 * r}\\approx${tex_nombre(
          arrondi(Algebrite.eval((r / 2) * Math.PI + 2 * r), 1)
        )}$ cm<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque, son pÃ©rimÃ¨tre est composÃ© de trois quarts d'un cercle de rayon ${r2} cm et 2 rayons qui ferment la figure.<br>`;
        texte_corr += `$\\mathcal{P}_2=\\dfrac{3}{4}\\times2\\times${r2}\\times\\pi+${r2}+${r2}=${tex_nombre(
          (6 / 4) * r2
        )}\\pi+${2 * r2}\\approx${tex_nombre(
          arrondi(Algebrite.eval((6 / 4) * r2 * Math.PI + 2 * r2), 1)
        )}$ cm<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-disque, son pÃ©rimÃ¨tre est composÃ© d'un demi-cercle de diamÃ¨tre ${2 * r3
          } cm et d'un diamÃ¨tre qui ferme la figure.<br>`;
        texte_corr += `$\\mathcal{P}_3=\\dfrac{1}{2}\\times${2 * r3
          }\\times\\pi+${2 * r3}=${r3}\\pi+${2 * r3}\\approx${tex_nombre(
            arrondi(Algebrite.eval(r3 * Math.PI + 2 * r3), 1)
          )}$ cm<br>`;
        texte_corr += `La premiÃ¨re figure est un quart de disque de rayon ${r} cm.<br>`;
        texte_corr += `$\\mathcal{A}_1=\\dfrac{1}{4}\\times${r}\\times${r}\\times\\pi=${tex_nombre(
          Algebrite.eval((r * r) / 4)
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval(((r * r) / 4) * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La deuxiÃ¨me figure est trois quarts d'un disque rayon ${r2} cm.<br>`;
        texte_corr += `$\\mathcal{A}_2=\\dfrac{3}{4}\\times${r2}\\times${r2}\\times\\pi=${tex_nombre(
          (3 / 4) * r2 * r2
        )}\\pi\\approx${tex_nombre(
          arrondi(Algebrite.eval((3 / 4) * r2 * r2 * Math.PI), 1)
        )}~\\text{cm}^2$<br>`;
        texte_corr += `La troisiÃ¨me figure est un demi-cercle de diamÃ¨tre ${2 * r3
          } cm donc de rayon ${r3} cm.<br>`;
        texte_corr += `$\\mathcal{A}_3=\\dfrac{1}{2}\\times${r3}\\times${r3}\\times\\pi=${(r3 * r3) / 2
          }\\pi\\approx${tex_nombre(
            arrondi(Algebrite.eval(((r3 * r3) / 2) * Math.PI), 1)
          )}~\\text{cm}^2$<br>`;
      }
    }

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r", "${r}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r2", "${r2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "r3", "${r3}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    3,
    "1 : PÃ©rimÃ¨tres\n\
2 : Aires\n3 : PÃ©rimÃ¨tres et aires",
  ];
}

/**
 * Un carrÃ©, un rectangle et un triangle rectangle sont tracÃ©s.
 *
 * Il faut calculer les aires et pÃ©rimÃ¨tres.
 *
 * Pas de version LaTeX
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M11-1
 */
function Perimetre_ou_aire_de_carres_rectangles_triangles() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires carrÃ©s, rectangles et triangles rectangles";
  this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 3 figures suivantes";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 3) : (this.spacing_corr = 2);
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [600, 450];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let c = randint(2, 6);
    let L = randint(2, 5);
    let l = randint(1, 4);
    while (l == L) {
      // Le rectangle ne doit pas Ãªtre un carrÃ©
      l = randint(1, 4);
    }
    let a = randint(2, 5);
    let b = randint(2, 5);
    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAH0AAAB9AAAAQEAAAAAAAAAAQAAAH######AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wABYwABNQAAAAFAFAAAAAAAAAAAAAkA#####wABTAABNQAAAAFAFAAAAAAAAAAAAAkA#####wABbAABMgAAAAFAAAAAAAAAAAAAAAkA#####wABYgABNQAAAAFAFAAAAAAAAAAAAAkA#####wABYQABMwAAAAFACAAAAAAAAAAAAAIA#####wAAAAAAEAABQQDALgAAAAAAAAAAAAAAAAAABQABQDkAAAAAAABAaOAAAAAAAP####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAAGAAAAAwAAAAIAAAAIAAAADf####8AAAACAAlDQ2VyY2xlT1IAAAAADgEAAAAAAQAAAA3#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAA4AAAAAABAAAUIAQAgAAAAAAAAAAAAAAAAAAAUAAUAYC8chUUHEAAAADwAAAAUBAAAADgAAAAAAEAAAAQABAAAADQAAABAAAAAGAAAAAA4BAAAAAA0AAAEFAAAAAA0AAAAQ#####wAAAAEAC0NNZWRpYXRyaWNlAAAAAA4BAAAAAA0AAAEAAQAAAA0AAAAQAAAACwAAAAAOAQAAAAABAAAAEgAAAAFAMAAAAAAAAAH#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQAAAAAOAAAAEwAAABT#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAAAAAAOAQAAAAANAAABBQABAAAAFf####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAADgAAAAABAAAAFhAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAyBjbQEAAAAI#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wEAAAAAEAAAAQABAAAADQAAABEAAAASAP####8BAAAAABAAAAEAAQAAABAAAAAR#####wAAAAEACUNDZXJjbGVPQQD#####AQAAAAABAAAAEAAAAA0AAAATAP####8BAAAAAAEAAAANAAAAEAAAAA8A#####wAAABkAAAAaAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAABwAAAAQAP####8AAAAAABAAAUMAQBAAAAAAAADANQAAAAAAAAUAAgAAABwAAAAPAP####8AAAAYAAAAGwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAfAAAAEAD#####AAAAAAAQAAFEAMAsAAAAAAAAwDcAAAAAAAAFAAIAAAAf#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABQAAAA0AAAAQAAAAHgAAACEAAAANAAAABQD#####AAAAAAAQAAABAAEAAAAQAAAAHgAAAAUA#####wAAAAAAEAAAAQABAAAAHgAAACEAAAAFAP####8AAAAAABAAAAEAAQAAACEAAAAN#####wAAAAIAF0NNYXJxdWVBbmdsZUdlb21ldHJpcXVlAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAhAAAADQAAABAAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAANAAAAEAAAAB4AAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAQAAAAHgAAACEAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAAAeAAAAIQAAAA0AAAACAP####8AAAAAABAAAUgAwDEAAAAAAADAAAAAAAAAAAUAAUBymAAAAAAAQHEHCj1wo9cAAAAKAP####8AG1NlZ21lbnQgZGUgbG9uZ3VldXIgZG9ubsOpZQAAAAYAAAADAAAAAgAAAAkAAAAqAAAACwAAAAArAQAAAAABAAAAKgAAAAwAAAAJAAAAAA0BAAAAKwAAAAAAEAABRQBACAAAAAAAAAAAAAAAAAAABQABP8sfH32jwU4AAAAsAAAABQEAAAArAAAAAAAQAAABAAEAAAAqAAAALQAAAAYAAAAAKwEAAAAADQAAAQUAAAAAKgAAAC0AAAAOAAAAACsBAAAAAA0AAAEAAQAAACoAAAAtAAAACwAAAAArAQAAAAABAAAALwAAAAFAMAAAAAAAAAEAAAAPAAAAACsAAAAwAAAAMQAAABAAAAAAKwEAAAAADQAAAQUAAQAAADIAAAARAQAAACsAAAAAAQAAADMQAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAMgY20BAAAACQAAABIA#####wEAAAAAEAAAAQABAAAALQAAAC4AAAASAP####8BAAAAABAAAAEAAQAAACoAAAAuAAAACwD#####AQAAAAABAAAALQAAAAwAAAAKAAAAAAsA#####wEAAAAAAQAAACoAAAAMAAAACgAAAAAPAP####8AAAA1AAAANwAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAA5AAAAEAD#####AAAAAAAQAAFGAEAAAAAAAAAAwDgAAAAAAAAFAAIAAAA5AAAADwD#####AAAANgAAADgAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAPAAAABAA#####wAAAAAAEAABRwDALgAAAAAAAMA2AAAAAAAABQACAAAAPAAAAAUA#####wAAAAAAEAAAAQABAAAALQAAADsAAAAFAP####8AAAAAABAAAAEAAQAAADsAAAA+AAAABQD#####AAAAAAAQAAABAAEAAAA+AAAAKgAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAALQAAADsAAAADAAAAAEIAAAAAABAAAAEAAQAAAC0BP#AAAAAAAAAAAAAEAAAAAEIAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAEP#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQAAAABCAAJhbgAAAEQAAAAtAAAAOwAAAAgBAAAAQgAAAC0AAAA7AAAABgAAAABCAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAADv#####AAAAAQANQ1BvaW50UHJvamV0ZQAAAABCAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAAA7AAAAQwAAABYAAAAAQgACbWEAAABEAAAALQAAAEj#####AAAAAQAOQ1Rlc3RFeGlzdGVuY2UAAAAAQgADdG1hAAAASQAAABEBAAAAQgAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAEcQAAAAAAABAAAAAv####8AAAABAA1DRm9uY3Rpb24zVmFyAAAAAAwAAABK#####wAAAAEACkNPcGVyYXRpb24AAAAADAAAAEUAAAAMAAAASQAAAAwAAABFAAAAAyBjbQEAAABGAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAALQAAADsAAAA+AAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAOwAAAD4AAAAqAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAPgAAACoAAAAtAAAAFQD#####AAAA#wACAAAAAUAwAAAAAAAAAAAAKgAAAC0AAAA7AAAAAgD#####AAAAAAAQAAFJAEAIAAAAAAAAAAAAAAAAAAAFAAFAbkAAAAAAAEB5kAAAAAAAAAAACgD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAABAAAAAgAAAAIAAAAMAAAAUAAAAAsAAAAAUQEAAAAAAQAAAFAAAAAMAAAADAAAAAANAQAAAFEAAAAAABAAAUoAwAgAAAAAAADAOgAAAAAAAAUAAT##e1lPr88TAAAAUgAAAAUBAAAAUQAAAAAAEAAAAQABAAAAUAAAAFMAAAASAP####8BAAAAABAAAAEAAQAAAFMAAABUAAAACwD#####AQAAAAABAAAAUwAAAAwAAAALAAAAAA8A#####wAAAFUAAABWAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAFcAAAAQAP####8AAAAAABAAAUsAwDIAAAAAAADACAAAAAAAAAUAAgAAAFcAAAAFAP####8AAAAAABAAAAEAAQAAAFMAAABZAAAABQD#####AAAAAAAQAAABAAEAAABZAAAAUAAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAIAAAACAAAAUwAAAFkAAAADAAAAAFwAAAAAABAAAAEAAQAAAFMBP#AAAAAAAAAAAAAEAAAAAFwAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAF0AAAAWAAAAAFwAAmFuAAAAXgAAAFMAAABZAAAACAEAAABcAAAAUwAAAFkAAAAGAAAAAFwAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABTAAAAWQAAABcAAAAAXAAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAWQAAAF0AAAAWAAAAAFwAAm1hAAAAXgAAAFMAAABiAAAAGAAAAABcAAN0bWEAAABjAAAAEQEAAABcAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAYRAAAAAAAAEAAAACAAAAGQAAAAAMAAAAZAAAABoAAAAADAAAAF8AAAAMAAAAYwAAAAwAAABfAAAAAyBjbQEAAABgAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABZAAAAUAAAAAMAAAAAZgAAAAAAEAAAAQABAAAAWQE#8AAAAAAAAAAAAAQAAAAAZgAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAZwAAABYAAAAAZgACYW4AAABoAAAAWQAAAFAAAAAIAQAAAGYAAABZAAAAUAAAAAYAAAAAZgAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFkAAABQAAAAFwAAAABmAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAAZwAAABYAAAAAZgACbWEAAABoAAAAWQAAAGwAAAAYAAAAAGYAA3RtYQAAAG0AAAARAQAAAGYAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAABrEAAAAAAAAQAAAAIAAAAZAAAAAAwAAABuAAAAGgAAAAAMAAAAaQAAAAwAAABtAAAADAAAAGkAAAADIGNtAQAAAGoAAAAVAP####8AAAD#AAIAAAABQDAAAAAAAAAAAABQAAAAUwAAAFn#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQA#####wAAAP8AAgEAAAARAAAAGwD#####AAAA#wACAQAAACMAAAAbAP####8AAAD#AAIBAAAAJAAAABsA#####wAAAP8AAgEAAAAlAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAgAAAAIAAABQAAAAUwAAAAMAAAAAdQAAAAAAEAAAAQABAAAAUAE#8AAAAAAAAAAAAAQAAAAAdQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAdgAAABYAAAAAdQACYW4AAAB3AAAAUAAAAFMAAAAIAQAAAHUAAABQAAAAUwAAAAYAAAAAdQAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFAAAABTAAAAFwAAAAB1AAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABTAAAAdgAAABYAAAAAdQACbWEAAAB3AAAAUAAAAHsAAAAYAAAAAHUAA3RtYQAAAHwAAAARAQAAAHUAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAAB6EAAAAAAAAQAAAAIAAAAZAAAAAAwAAAB9AAAAGgAAAAAMAAAAeAAAAAwAAAB8AAAADAAAAHgAAAADIGNtAQAAAHkAAAAH##########8=";
    let c2 = Math.sqrt(a * a + b * b);
    let pIJK = Algebrite.eval(a + b + c2).d.toFixed(1);

    texte_corr = `$\\mathcal{P}_{ABCD}=${c}~\\text{cm}+${c}~\\text{cm}+${c}~\\text{cm}+${c}~\\text{cm}=${4 * c
      }~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{ABCD}=${c}~\\text{cm}\\times${c}~\\text{cm}=${c * c
      }~\\text{cm}^2$`;
    texte_corr += `<br>$\\mathcal{P}_{EFGH}=${L}~\\text{cm}+${l}~\\text{cm}+${L}~\\text{cm}+${l}~\\text{cm}=${2 * L + 2 * l
      }~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{EFGH}=${L}~\\text{cm}\\times${l}~\\text{cm}=${L * l
      }~\\text{cm}^2$`;
    texte_corr += `<br>$\\mathcal{P}_{IJK}=${a}~\\text{cm}+${b}~\\text{cm}+${tex_nombre(
      c2.toFixed(1)
    )}~\\text{cm}=${tex_nombre(pIJK)}~\\text{cm}$`;
    texte_corr += `<br>$\\mathcal{A}_{IJK}=${a}~\\text{cm}\\times${b}~\\text{cm}\\div2=${tex_nombre(
      Algebrite.eval((a * b) / 2)
    )}~\\text{cm}^2$`;

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L", "${L}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "l", "${l}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "a", "${a}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "b", "${b}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;

    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  };

  // 	this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,"1 : PÃ©rimÃ¨tres\n\
  // 2 : Aires\n3 : PÃ©rimÃ¨tres et aires"];
}

/**
 * Deux figures composÃ©s de rectangles et de triangles sont tracÃ©s.
 *
 * Il faut calculer le pÃ©rimÃ¨tre et l'aire par addition ou soustraction d'aires
 *
 * Pas de version LaTeX
 *
 * Un seul type de figure pour l'instant.
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M11-2
 */
function Perimetre_ou_aire_de_figures_composees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.pas_de_version_LaTeX = true;
  this.titre = "PÃ©rimÃ¨tres et aires de figures composÃ©es";
  this.consigne = "Calculer le pÃ©rimÃ¨tre et l'aire des 2 figures suivantes";
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.type_exercice = "MG32";
  this.taille_div_MG32 = [500, 500];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let L1 = randint(4, 7);
    let l1 = randint(2, 4);
    let L2 = randint(2, 4);
    if (L1 == l1) {
      l1--;
    } // pour que le rectangle ne soit pas un carrÃ©
    let c = randint(4, 7);
    let h = randint(2, c - 1);
    let codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAQzAAACtAAAAQEAAAAAAAAAAQAAAKj#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFVAMAkAAAAAAAAQBAAAAAAAAAFAABAMU+dsi0OVkAxT52yLQ5W#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAABAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAVYAwAAAAAAAAABAEAAAAAAAAAUAAUBBT52yLQ5WAAAAAv####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAABAAAAA#####8AAAABAAdDTWlsaWV1AP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAA#####8AAAACAAxDQ29tbWVudGFpcmUA#####wEAAAAAAAAAAAAAAABAGAAAAAAAAAAAAAUMAAAAAAABAAAAAAAAAAEAAAAAAAAAAAABMf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAD#####wAAAAEAB0NDYWxjdWwA#####wACTDEAATUAAAABQBQAAAAAAAAAAAAJAP####8AAmwxAAEzAAAAAUAIAAAAAAAAAAAACQD#####AAJMMgABMwAAAAFACAAAAAAAAAAAAAIA#####wAAAAABEAABQwBACAAAAAAAAAAAAAAAAAAABQABQFKgAAAAAABAaW4UeuFHrv####8AAAABABRDSW1wbGVtZW50YXRpb25Qcm90bwD#####ABtTZWdtZW50IGRlIGxvbmd1ZXVyIGRvbm7DqWUAAAAGAAAAAwAAAAIAAAAIAAAAC#####8AAAACAAlDQ2VyY2xlT1IAAAAADAEAAAAAAQAAAAv#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAACAD#####AAAAAQAPQ1BvaW50TGllQ2VyY2xlAQAAAAwAAAAAARAAAUQAQAgAAAAAAAAAAAAAAAAAAAUAAT++v3IzOUsjAAAADQAAAAUBAAAADAAAAAAAEAAAAQABAAAACwAAAA4AAAAGAAAAAAwBAAAAABAAAAEFAAAAAAsAAAAO#####wAAAAEAC0NNZWRpYXRyaWNlAAAAAAwBAAAAABAAAAEAAQAAAAsAAAAOAAAACwAAAAAMAQAAAAABAAAAEAAAAAFAMAAAAAAAAAH#####AAAAAQAQQ0ludERyb2l0ZUNlcmNsZQAAAAAMAAAAEQAAABL#####AAAAAQAQQ1BvaW50TGllQmlwb2ludAAAAAAMAQAAAAAQAAABBQABAAAAE#####8AAAABAA9DVmFsZXVyQWZmaWNoZWUBAAAADAAAAAABAAAAFBAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAEAAAAI#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wEAAAAAEAAAAQABAAAACwAAAA8AAAASAP####8BAAAAABAAAAEAAQAAAA4AAAAPAAAACwD#####AQAAAAABAAAACwAAAAwAAAAJAAAAAAsA#####wEAAAAAAQAAAA4AAAAMAAAACQAAAAAPAP####8AAAAWAAAAGAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAaAAAAEAD#####AQAAAAAQAAFCAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAaAAAADwD#####AAAAFwAAABkAAAAQAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAHQAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAdAAAACwD#####AQAAAAABAAAAHwAAAAwAAAAKAP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAHAAAAB8AAAAPAP####8AAAAhAAAAIAAAABAA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAAAiAAAAEAD#####AQAAAAAQAAFBAAAAAAAAAAAAQAgAAAAAAAAFAAEAAAAi#####wAAAAEACUNQb2x5Z29uZQD#####AAAAAAABAAAABgAAAA4AAAALAAAAHAAAAB8AAAAkAAAADgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAJAAAABwAAAAOAAAAACYBAAAAABAAAAEAAQAAACQAAAAcAAAABgAAAAAmAQAAAAAQAAABBQAAAAAkAAAAHAAAAAsAAAAAJgEAAAAAAQAAACgAAAABQDAAAAAAAAABAAAADwAAAAAmAAAAJwAAACkAAAAQAAAAACYBAAAAABAAAAEFAAEAAAAqAAAACAEAAAAmAAAAJAAAABwAAAARAQAAACYAAAAAAQAAACsRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAALAAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAIAAAACAAAAHAAAAAsAAAAOAAAAAC4BAAAAABAAAAEAAQAAABwAAAALAAAABgAAAAAuAQAAAAAQAAABBQAAAAAcAAAACwAAAAsAAAAALgEAAAAAAQAAADAAAAABQDAAAAAAAAABAAAADwAAAAAuAAAALwAAADEAAAAQAAAAAC4BAAAAABAAAAEFAAEAAAAyAAAACAEAAAAuAAAAHAAAAAsAAAARAQAAAC4AAAAAAQAAADMRAAAAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAABAAAANP####8AAAACABdDTWFycXVlQW5nbGVHZW9tZXRyaXF1ZQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAADgAAAAsAAAAcAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAACwAAABwAAAAkAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAHAAAAB8AAAAOAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAACwAAAA4AAAAfAAAABQD#####AAAAAAAQAAABAQEAAAAfAAAADgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAEAAAACAAAADgAAACQAAAAOAAAAADsBAAAAABAAAAEAAQAAAA4AAAAkAAAABgAAAAA7AQAAAAAQAAABBQAAAAAOAAAAJAAAAAsAAAAAOwEAAAAAAQAAAD0AAAABQDAAAAAAAAABAAAADwAAAAA7AAAAPAAAAD4AAAAQAAAAADsBAAAAABAAAAEFAAEAAAA#AAAACAEAAAA7AAAADgAAACQAAAAJAP####8AAWMAATcAAAABQBwAAAAAAAAAAAACAP####8AAAAAABAAAABACAAAAAAAAAAAAAAAAAAABQABQGlwAAAAAABAfecKPXCj1wAAAAoA#####wAbU2VnbWVudCBkZSBsb25ndWV1ciBkb25uw6llAAAABgAAAAMAAAACAAAAQgAAAEMAAAALAAAAAEQBAAAAAAEAAABDAAAADAAAAEIAAAAADQEAAABEAAAAAAAQAAAAQAgAAAAAAAAAAAAAAAAAAAUAAT#LiKDqIUKnAAAARQAAAAUBAAAARAAAAAAAEAAAAQEBAAAAQwAAAEYAAAAGAAAAAEQBAAAAABAAAAEFAAAAAEMAAABGAAAADgAAAABEAQAAAAAQAAABAAEAAABDAAAARgAAAAsAAAAARAEAAAAAAQAAAEgAAAABQDAAAAAAAAABAAAADwAAAABEAAAASQAAAEoAAAAQAAAAAEQBAAAAABAAAAEFAAEAAABLAAAAEQEAAABEAAAAAAEAAABMEAAAAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAQAAAEIAAAAKAP####8ADUNhcnLDqSBkaXJlY3QAAAAFAAAAAgAAAAIAAABDAAAARgAAAAUAAAAATgEAAAAAEAAAAQABAAAAQwAAAEYAAAASAAAAAE4AAAAAABAAAAEBAQAAAEMAAABP#####wAAAAEACUNDZXJjbGVPQQAAAABOAAAAAAEBAAAAQwAAAEYAAAAPAAAAAE4AAABQAAAAUQAAABABAAAATgEAAAAAEAABSAEFAAIAAABS#####wAAAAEADENUcmFuc2xhdGlvbgAAAABOAAAAQwAAAEb#####AAAAAQALQ1BvaW50SW1hZ2UBAAAATgEAAAAAEAABRwEFAAAAAFMAAABUAAAABQD#####AAAAAAAQAAABAQEAAABGAAAAVQAAAAUA#####wAAAAAAEAAAAQEBAAAAVQAAAFMAAAAFAP####8AAAAAABAAAAEBAQAAAFMAAABDAAAAFAD#####AQAAAAEBAAAABQAAAEMAAABGAAAAVQAAAFMAAABDAAAACQD#####AAFyAAEyAAAAAUAAAAAAAAAAAAAACwD#####AQAAAAEBAAAAUwAAAAwAAABaAAAAAA8A#####wAAAFcAAABbAAAAEAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAFwAAAAQAP####8BAAAAABAAAUYAAAAAAAAAAABACAAAAAAAAAUAAgAAAFwAAAASAP####8BAAAAABAAAAEBAQAAAF4AAABXAAAACQD#####AAFoAAE0AAAAAUAQAAAAAAAAAAAACwD#####AQAAAAEBAAAAXgAAAAwAAABgAAAAAA8A#####wAAAF8AAABhAAAAEAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGIAAAAQAP####8BAAAAABAAAUUAAAAAAAAAAABACAAAAAAAAAUAAgAAAGIAAAAUAP####8AAAAAAAEAAAAGAAAAVQAAAEYAAABDAAAAUwAAAGQAAABVAAAABQD#####AAAAAAAQAAABAQEAAABeAAAAZP####8AAAABAA5DTWFycXVlU2VnbWVudAD#####AAAAAAABAQAAAFYAAAAZAP####8AAAAAAAEBAAAARwAAABkA#####wAAAAAAAQEAAABYAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAVQAAAEYAAABDAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAARgAAAEMAAABTAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAUwAAAFUAAABGAAAAFQD#####AAAAAAABAAAAAUAwAAAAAAAAAAAAVQAAAFMAAABDAAAACgD#####ABJNZXN1cmUgZGUgbG9uZ3VldXIAAAAFAAAAAQAAAAIAAABkAAAAXgAAAA4AAAAAbgEAAAAAEAAAAQABAAAAZAAAAF4AAAAGAAAAAG4BAAAAABAAAAEFAAAAAGQAAABeAAAACwAAAABuAQAAAAABAAAAcAAAAAFAMAAAAAAAAAEAAAAPAAAAAG4AAABvAAAAcQAAABAAAAAAbgEAAAAAEAAAAQUAAQAAAHIAAAAIAQAAAG4AAABkAAAAXgAAAAoA#####wASTWVzdXJlIGRlIGxvbmd1ZXVyAAAABQAAAAEAAAACAAAAVQAAAGQAAAAOAAAAAHUBAAAAABAAAAEAAQAAAFUAAABkAAAABgAAAAB1AQAAAAAQAAABBQAAAABVAAAAZAAAAAsAAAAAdQEAAAAAAQAAAHcAAAABQDAAAAAAAAABAAAADwAAAAB1AAAAdgAAAHgAAAAQAAAAAHUBAAAAABAAAAEFAAEAAAB5AAAACAEAAAB1AAAAVQAAAGQAAAAKAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAAFMAAABkAAAADgAAAAB8AQAAAAAQAAABAAEAAABTAAAAZAAAAAYAAAAAfAEAAAAAEAAAAQUAAAAAUwAAAGQAAAALAAAAAHwBAAAAAAEAAAB+AAAAAUAwAAAAAAAAAQAAAA8AAAAAfAAAAH0AAAB#AAAAEAAAAAB8AQAAAAAQAAABBQABAAAAgAAAAAgBAAAAfAAAAFMAAABkAAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAQAAAAMAAACCAAAAUwAAAGQAAAADAAAAAIMAAAAAABAAAAEAAQAAAFMBP#AAAAAAAAAAAAAEAAAAAIMAAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAIT#####AAAAAgATQ01lc3VyZUFuZ2xlT3JpZW50ZQAAAACDAAJhbgAAAIUAAABTAAAAZAAAAAYAAAAAgwAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFMAAABk#####wAAAAEADUNQb2ludFByb2pldGUAAAAAgwAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAZAAAAIQAAAAaAAAAAIMAAm1hAAAAhQAAAFMAAACI#####wAAAAEADkNUZXN0RXhpc3RlbmNlAAAAAIMAA3RtYQAAAIkAAAARAQAAAIMAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACHEAAAAAAAAQAAAAL#####AAAAAQANQ0ZvbmN0aW9uM1ZhcgAAAAAMAAAAiv####8AAAABAApDT3BlcmF0aW9uAAAAAAwAAACGAAAADAAAAIkAAAAMAAAAhgAAAAABAAAAggAAAAoA#####wAeQWZmaWNoYWdlIGRlIGxvbmd1ZXVyIG9yaWVudMOpAAAABwAAAAEAAAADAAAAewAAAGQAAABVAAAAAwAAAACMAAAAAAAQAAABAAEAAABkAT#wAAAAAAAAAAAABAAAAACMAAAAAAAQAAJXJwAAAAAAAAAAAEAIAAAAAAAABQABQGDAAAAAAAAAAACNAAAAGgAAAACMAAJhbgAAAI4AAABkAAAAVQAAAAYAAAAAjAAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGQAAABVAAAAGwAAAACMAAAAAAAQAAJXIgAAAAAAAAAAAEAIAAAAAAAABQAAAABVAAAAjQAAABoAAAAAjAACbWEAAACOAAAAZAAAAJEAAAAcAAAAAIwAA3RtYQAAAJIAAAARAQAAAIwAAAAAAEAAAAAAAAAAwAAAAAAAAAAAAACQEAAAAAAAAQAAAAIAAAAdAAAAAAwAAACTAAAAHgAAAAAMAAAAjwAAAAwAAACSAAAADAAAAI8AAAAAAQAAAHsAAAAKAP####8AHkFmZmljaGFnZSBkZSBsb25ndWV1ciBvcmllbnTDqQAAAAcAAAABAAAAAwAAAHQAAABkAAAAXgAAAAMAAAAAlQAAAAAAEAAAAQABAAAAZAE#8AAAAAAAAAAAAAQAAAAAlQAAAAAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAUBgwAAAAAAAAAAAlgAAABoAAAAAlQACYW4AAACXAAAAZAAAAF4AAAAGAAAAAJUAAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABkAAAAXgAAABsAAAAAlQAAAAAAEAACVyIAAAAAAAAAAABACAAAAAAAAAUAAAAAXgAAAJYAAAAaAAAAAJUAAm1hAAAAlwAAAGQAAACaAAAAHAAAAACVAAN0bWEAAACbAAAAEQEAAACVAAAAAABAAAAAAAAAAMAAAAAAAAAAAAAAmRAAAAAAAAEAAAACAAAAHQAAAAAMAAAAnAAAAB4AAAAADAAAAJgAAAAMAAAAmwAAAAwAAACYAAAAAAEAAAB0AAAACgD#####AB5BZmZpY2hhZ2UgZGUgbG9uZ3VldXIgb3JpZW50w6kAAAAHAAAAAQAAAAMAAABBAAAADgAAACQAAAADAAAAAJ4AAAAAABAAAAEAAQAAAA4BP#AAAAAAAAAAAAAEAAAAAJ4AAAAAABAAAlcnAAAAAAAAAAAAQAgAAAAAAAAFAAFAYMAAAAAAAAAAAJ8AAAAaAAAAAJ4AAmFuAAAAoAAAAA4AAAAkAAAABgAAAACeAAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADgAAACQAAAAbAAAAAJ4AAAAAABAAAlciAAAAAAAAAAAAQAgAAAAAAAAFAAAAACQAAACfAAAAGgAAAACeAAJtYQAAAKAAAAAOAAAAowAAABwAAAAAngADdG1hAAAApAAAABEBAAAAngAAAAAAQAAAAAAAAADAAAAAAAAAAAAAAKIQAAAAAAABAAAAAgAAAB0AAAAADAAAAKUAAAAeAAAAAAwAAAChAAAADAAAAKQAAAAMAAAAoQAAAAABAAAAQQAAABkA#####wAAAAAAAQEAAABXAAAAB###########";
    let DA = arrondi(Math.sqrt(L2 ** 2 + l1 ** 2), 1);
    let t1 = arrondi(Math.sqrt(4 + h ** 2), 1); // longueur d'un cÃ´tÃ© du triangle
    let t2 = arrondi(Math.sqrt((c - 2) ** 2 + h ** 2), 1); // longueur de l'autre cÃ´tÃ© d'un triangle
    let texte_corr = "";
    texte_corr += `La premiÃ¨re figure est composÃ©e d'un rectangle de ${L1} cm par ${l1} cm`;
    texte_corr += ` et d'un triangle rectangle dont les cÃ´tÃ©s de l'angle droit mesurent ${L2} cm et ${l1} cm.<br>`;
    texte_corr += `$\\mathcal{P}_{1}=${L1 + L2}+${tex_nombre(
      DA
    )}+${L1}+${l1}=${tex_nombrec(L1 + L2 + DA + L1 + l1)}$ cm.<br>`;
    texte_corr += `$\\mathcal{A}_{1}=${L1}\\times${l1}+${L2}\\times${l1}\\div2=${L1 * l1
      }+${calcul((L2 * l1) / 2)}=${calcul(L1 * l1 + (L2 * l1) / 2)}~${tex_texte(
        " cm"
      )}^2$.`;
    texte_corr += "<br><br>";
    texte_corr += `La deuxiÃ¨me figure est un carrÃ© de cÃ´tÃ© ${c} cm auquel il faut enlever un triangle de ${c} cm de base et ${h} cm de hauteur.<br>`;
    texte_corr += `$\\mathcal{P}_{2}=${c}+${c}+${c}+${tex_nombre(
      t1
    )}+${tex_nombre(t2)}=${tex_nombrec(3 * c + t1 + t2)}$ cm<br>`;
    texte_corr += `$\\mathcal{A}_{2}=${c}\\times${c}-${c}\\times${h}\\div2=${c * c
      }-${(c * h) / 2}=${tex_nombrec(c ** 2 - (c * h) / 2)}~${tex_texte(
        " cm"
      )}^2$.`;

    this.MG32codeBase64 = codeBase64;
    this.MG32code_pour_modifier_la_figure = `
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L1", "${L1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "l1", "${l1}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "L2", "${L2}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "c", "${c}");
	        mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "h", "${h}");
	        mtg32App.calculate("MG32svg${numero_de_l_exercice}");
	        mtg32App.display("MG32svg${numero_de_l_exercice}");
	      `;
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
}

/**
 * Citer des formules de pÃ©rimÃ¨tre, des formules d'aire ou la dÃ©finition de Ï
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6M25
 */
function Connaitre_formules_de_perimetre_et_aires() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Connaitre le cours sur le pÃ©rimÃ¨tre et l'aire";
  this.consigne = "Calculer";
  this.nb_questions = 4;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    liste_type_de_questions = combinaison_listes(
      [
        "pi",
        "prectangle",
        "pcarre",
        "acarre",
        "arectangle",
        "pcercle",
        "acercle",
        "atrianglerectangle",
        "atriangle",
      ],
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case "pi":
          texte = "Rappeler la dÃ©finition du nombre $\\pi$.";
          texte_corr = "$\\pi$ est la longueur d'un cercle de diamÃ¨tre 1.";
          break;
        case "prectangle":
          texte = "Donner une formule du pÃ©rimÃ¨tre du rectangle.";
          texte_corr =
            "$\\mathcal{P}_{\\text{rectangle}}=(L+l)\\times2=L\\times2+l\\times2=L+l+L=l$<br><br>";
          texte_corr += "Avec $L$ la longueur et $l$ la largeur du rectangle.";
          break;
        case "pcarre":
          texte = "Donner une formule du pÃ©rimÃ¨tre du carrÃ©.";
          texte_corr =
            "$\\mathcal{P}_{\\text{carrÃ©}}=c\\times4=c+c+c+c$<br><br>";
          texte_corr += "Avec $c$ la longueur du cÃ´tÃ© du carrÃ©.";
          break;
        case "arectangle":
          texte = "Donner une formule de l'aire du rectangle.";
          texte_corr = "$\\mathcal{A}_{\\text{rectangle}}=L\\times l$<br><br>";
          texte_corr += "Avec $L$ la longueur et $l$ la largeur du rectangle.";
          break;
        case "acarre":
          texte = "Donner une formule de l'aire du carrÃ©.";
          texte_corr = "$\\mathcal{A}_{\\text{carrÃ©}}=c\\times c=c^2$<br><br>";
          texte_corr += "Avec $c$ la longueur du cÃ´tÃ© du carrÃ©.";
          break;
        case "atrianglerectangle":
          texte = "Donner une formule de l'aire du triangle rectangle.";
          texte_corr =
            "$\\mathcal{A}_{\\text{triangle rectangle}}=a\\times b \\div2=\\dfrac{a\\times b}{2}$<br><br>";
          texte_corr +=
            "Avec $a$ et $b$ les longueurs des cÃ´tÃ©s de l'angle droit.";
          break;
        case "atriangle":
          texte = "Donner une formule de l'aire d'un triangle quelconque.";
          texte_corr =
            "$\\mathcal{A}_{\\text{triangle rectangle}}=b\\times h \\div2=\\dfrac{b\\times h}{2}$<br><br>";
          texte_corr +=
            "Avec $b$ la longueur d'un cÃ´tÃ© et $h$ la longueur de la hauteur relative Ã  ce cÃ´tÃ©.";
          break;
        case "pcercle":
          texte =
            "Donner une formule de la longueur d'un cercle (aussi appelÃ©e circonfÃ©rence).";
          texte_corr =
            "$\\mathcal{P}_{\\text{cercle}}=D\\times \\pi = 2\\times R \\times \\pi = 2\\pi{}R$<br><br>";
          texte_corr += "Avec $D$ le diamÃ¨tre et $R$ le rayon de ce cercle.";
          break;
        case "acercle":
          texte = "Donner une formule de l'aire d'un disque.";
          texte_corr =
            "$\\mathcal{A}_{\\text{disque}}=R\\times R\\times\\pi=\\pi R^2$<br><br>";
          texte_corr += "Avec $R$ le rayon de ce disque.";
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * ComplÃ©ter des Ã©galitÃ©s sur les nombres dÃ©cimaux
 * * n/100 = .../10 + .../100
 * * n/100 = .../100 + .../10
 * * .../100 = u+ d/10 + c/100
 * * u = .../10
 * * u = .../100
 * * n/10 = ... + .../10 + .../100
 * @Auteur RÃ©mi Angot
 * 6N23-1
 */
function Exercice_differentes_ecritures_nombres_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "DiffÃ©rentes Ã©critures des nombres dÃ©cimaux";
  this.consigne = "ComplÃ©ter l'Ã©galitÃ© puis donner l'Ã©criture dÃ©cimale.";
  this.spacing = 2;
  this.spacing_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4, 5, 6];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions);
    if (this.nb_questions == 3) liste_type_de_questions = combinaison_listes([choice([1, 2, 6]), 3, choice([4, 5])], this.nb_questions);
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      let u = randint(2, 9); //chiffre des unitÃ©s
      let d = randint(1, 9); //chiffre des dixiÃ¨mes
      let c = randint(1, 9); //chiffre des centiÃ¨mes
      let n = 100 * u + 10 * d + c;
      let ecriture_decimale;
      switch (type_de_questions) {
        case 1: // n/100 = .../10 + .../100
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction(n, "100")}=\\ldots\\ldots+${tex_fraction(
            "",
            10
          )}+${tex_fraction("", 100)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=${ecriture_decimale}$`;

          break;
        case 2: // n/100 = .../100 + .../10
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction(n, "100")}=\\ldots\\ldots+${tex_fraction(
            "",
            100
          )}+${tex_fraction("", 10)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            c,
            100
          )}+${tex_fraction(d, 10)}=${ecriture_decimale}$`;
          break;
        case 3: // .../100 = u+ d/10 + c/100
          ecriture_decimale = tex_nombre(calcul(u + d / 10 + c / 100));
          texte = `$${tex_fraction("", "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, "100")}=${u}+${tex_fraction(
            d,
            "10"
          )}+${tex_fraction(c, "100")}=${ecriture_decimale}$`;
          break;
        case 4: // u = .../10
          texte = `$${u}=${tex_fraction("", "10")}$`;
          texte_corr = `$${u}=${tex_fraction(10 * u, "10")}$`;
          break;
        case 5: // u = .../100
          texte = `$${u}=${tex_fraction("", "100")}$`;
          texte_corr = `$${u}=${tex_fraction(100 * u, "10")}$`;
          break;
        case 6: // n/10 = ... + .../10 + .../100
          ecriture_decimale = tex_nombre(calcul(n / 10));
          texte = `$${tex_fraction(n, 10)}=\\ldots\\ldots+${tex_fraction(
            "",
            10
          )}+${tex_fraction("", 100)}=\\ldots$`;
          texte_corr = `$${tex_fraction(n, 10)}=${u * 10 + d}+${tex_fraction(
            c,
            10
          )}+${tex_fraction(0, 100)}=${ecriture_decimale}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Lire des nombres dÃ©ciamux sur une portion de droite graduÃ©e
 * Une question demande la forme dÃ©cimale, une autre, la partie entiÃ¨re plus la fraction dÃ©cimale, et une troisiÃ¨me demande une seule fraction dÃ©cimale.
 * ref 6N23-2
 * 
 * @Auteur Jean-Claude Lhote
 */
function Lire_abscisse_decimale_trois_formesCM() {
  Lire_abscisse_decimale_trois_formes.call(this)
  this.niveau = 'CM'
  this.sup = 1
}

function Lire_abscisse_decimale_trois_formes() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.niveau = 'sixiÃ¨me'
  this.titre = "Lire des abscisses dÃ©cimales sous trois formes";
  this.consigne = "";
  if (sortie_html) {
    this.spacing = 2;
    this.spacing_corr = 3;
  }
  else {
    this.spacing = 1;
    this.spacing_corr = 1;
  }
  this.vspace = -1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.nb_questions = 1;
  this.nb_questions_modifiable = false

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let d1, texte = "", texte_corr = "", extremite, noms = choisit_lettres_differentes(3, 'Q')
    let x1 = 0, x2 = 0, x3 = 0, thickOff, tableau = []
    if (this.sup == 1) {
      if (this.niveau == 'CM') {
        xmin = 0
        thickOff = 0
      }
      else {
        xmin = randint(1, 15)
        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))
      }
      if (xmin == 0) extremite = `|->`
      else extremite = `->`
      xmax = xmin + 9
      x1 = xmin * 10 + randint(0, 2) * 10 + randint(2, 8)
      x2 = xmin * 10 + randint(3, 5) * 10 + randint(2, 8)
      x3 = xmin * 10 + randint(6, 8) * 10 + randint(2, 8)
      x1 = calcul(x1 / 10)
      x2 = calcul(x2 / 10)
      x3 = calcul(x3 / 10)

      tableau = shuffle([x1, x2, x3])
      x1 = tableau[0]
      x2 = tableau[1]
      x3 = tableau[2]

      d1 = droiteGraduee2({
        x: 0, y: 0, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: false, Unite: 3, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4,
        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      texte = `${num_alpha(0)} Donner l'abscisse de ${noms[0]} en Ã©criture dÃ©cimale.<br>`
      texte += `${num_alpha(1)} Donner l'abscisse de ${noms[1]} comme la somme d'un nombre entier et d'une fraction dÃ©cimale.<br>`
      texte += `${num_alpha(2)} Donner l'abscisse de ${noms[2]} sous la forme d'une fraction dÃ©cimale.<br>`
      texte_corr = `${num_alpha(0)} L'abscisse de ${noms[0]} est : $${tex_nombre(x1)}$.<br>`
      texte_corr += `${num_alpha(1)} L'abscisse de ${noms[1]} est : $${tex_nombre(Math.floor(x2))} + ${tex_fraction(calcul(10 * (x2 - Math.floor(x2))), 10)}$.<br>`
      texte_corr += `${num_alpha(2)} L'abscisse de ${noms[2]} est : $${tex_fraction(calcul(x3 * 10), 10)}$.`
    }
    else if (this.sup == 2) {
      if (this.niveau == 'CM') {
        xmin = 0
        thickOff = 0
      }
      else {
        xmin = randint(1, 15) - 0.1
        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))
      }
      if (xmin == 0) extremite = `|->`
      else extremite = `->`
      xmax = calcul(xmin + 1.5);
      x1 = 10 + xmin * 100 + randint(1, 3) * 10 + randint(2, 8);
      x2 = 10 + xmin * 100 + randint(4, 6) * 10 + randint(2, 8);
      x3 = 10 + xmin * 100 + randint(7, 9) * 10 + randint(2, 8);

      x1 = calcul(x1 / 100);
      x2 = calcul(x2 / 100);
      x3 = calcul(x3 / 100);
      tableau = shuffle([x1, x2, x3])
      x1 = tableau[0]
      x2 = tableau[1]
      x3 = tableau[2];

      d1 = droiteGraduee2({
        x: 0, y: 0, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 20, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4,
        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      texte = `${num_alpha(0)} Donner l'abscisse de ${noms[0]} en Ã©criture dÃ©cimale.<br>`
      texte += `${num_alpha(1)} Donner l'abscisse de ${noms[1]} comme la somme d'un entier et d'une fraction dÃ©cimale.<br>`
      texte += `${num_alpha(2)} Donner l'abscisse de ${noms[2]} sous la forme d'une fraction dÃ©cimale.<br>`
      texte_corr = `${num_alpha(0)} L'abscisse de ${noms[0]} est : $${tex_nombre(x1)}$.<br>`
      texte_corr += `${num_alpha(1)} L'abscisse de ${noms[1]} est : $${tex_nombre(Math.floor(x2))} + ${tex_fraction(calcul(100 * (x2 - Math.floor(x2))), 100)}$.<br>`
      texte_corr += `${num_alpha(2)} L'abscisse de ${noms[2]} est : $${tex_fraction(calcul(x3 * 100), 100)}$.`

    }
    else if (this.sup == 3) {
      if (this.niveau == 'CM') {
        xmin = 0
        thickOff = 0
      }
      else {
        xmin = calcul(randint(0, 15) + randint(0, 9) * 0.1)
        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))
      }
      if (xmin == 0) extremite = `|->`
      else extremite = `->`
      xmax = calcul(xmin + 0.15)

      x1 = xmin * 1000 + randint(1, 5) * 10 + randint(2, 8)
      x2 = xmin * 1000 + randint(6, 9) * 10 + randint(2, 8)
      x3 = xmin * 1000 + randint(11, 14) * 10 + randint(2, 8)
      x1 = calcul(x1 / 1000)
      x2 = calcul(x2 / 1000)
      x3 = calcul(x3 / 1000)

      tableau = shuffle([x1, x2, x3])
      x1 = tableau[0]
      x2 = tableau[1]
      x3 = tableau[2]
      d1 = droiteGraduee2({
        x: 0, y: 0, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 200, thickOffset: thickOff,
        thickDistance: 0.1, thickSecDist: 0.01, thickTerDist: 0.001,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4,
        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],
        labelListe: [[xmin + 0.09, tex_nombre(calcul(xmin + 0.09))], [xmin + 0.1, tex_nombre(calcul(xmin + 0.1))]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })

      texte = `${num_alpha(0)} Donner l'abscisse de ${noms[0]} en Ã©criture dÃ©cimale.<br>`
      texte += `${num_alpha(1)} Donner l'abscisse de ${noms[1]} comme la somme d'un entier et d'une fraction dÃ©cimale.<br>`
      texte += `${num_alpha(2)} Donner l'abscisse de ${noms[2]} sous la forme d'une fraction dÃ©cimale.<br>`
      texte_corr = `${num_alpha(0)} L'abscisse de ${noms[0]} est : $${tex_nombre(x1)}$.<br>`
      texte_corr += `${num_alpha(1)} L'abscisse de ${noms[1]} est : $${tex_nombre(Math.floor(x2))} + ${tex_fraction(calcul(1000 * (x2 - Math.floor(x2))), 1000)}$.<br>`
      texte_corr += `${num_alpha(2)} L'abscisse de ${noms[2]} est : $${tex_fraction(calcul(x3 * 1000), 1000)}$.`

    }
    texte += mathalea2d({ xmin: -1.5, xmax: 35, ymin: -1.5, ymax: 1.5, pixelsParCm: 25, scale: 0.5 }, d1)
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Au dixiÃ¨me\n2 : Au centiÃ¨me\n3 : Au milliÃ¨me'];
}


/**
 * Lire un nombre dÃ©cimal jusqu'au milliÃ¨me graÄe Ã  un systÃ¨me de zoom successifs
 * L'abscisse est Ã  donner sous trois formes.
 * ref 6N23-3
 * PubliÃ© le 13/11/2020
 * @Auteur Jean-Claude Lhote
 */
function lireUneAbscisseAvecZoomCM() {
  LireUneAbscisseAvecZoom.call(this);
  this.niveau = 'CM';
  this.sup = 1;
}
function LireUneAbscisseAvecZoom() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.niveau = 'sixiÃ¨me'
  this.sup = 3;
  this.titre = "Lire une abscisse dÃ©cimale grÃ¢ce Ã  des zooms successifs";
  this.consigne = "";
  if (sortie_html) {
    this.spacing = 2;
    this.spacing_corr = 3;
  }
  else {
    this.spacing = 1;
    this.spacing_corr = 1;
  }
  this.vspace = -1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1
  this.nb_questions = 1;
  this.nb_questions_modifiable = false

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let d1, d2, d3, d3Corr, d1Corr, d2Corr, texte = "", texte_corr = "", extremite, extreme, noms = choisit_lettres_differentes(5, 'QFN')
    let x1 = 0, x2 = 0, x3 = 0, objets = [], fenetre, thickOff = 0, objetsCorr = []
    if (this.sup == 1) {
      if (this.niveau == 'CM') {
        xmin = 0
        thickOff = 0
        origine = 0
        extreme = 9
        xmax = 9
      }
      else {
        xmin = randint(5, 10) - 0.2
        origine = Math.round(xmin + 0.2)
        extreme = calcul(origine + 9)
        thickOff = 0.1
        xmax = origine + 9.2
      }
      x1 = calcul(xmin + 0.2 + randint(1, 5) + randint(2, 8) / 10)
      //   xmin=calcul(Math.floor(x1)-5)
      //    xmax=calcul(Math.floor(x1)+6)
      if (xmin == 0) extremite = `|->`
      else extremite = `->`

      d1 = droiteGraduee2({
        x: 0, y: 3, Min: xmin, axePosition: 'H', Max: xmax + 0.2, thickSec: true, thickTer: false, Unite: 3, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4, labelsPrincipaux: false,
        labelListe: [[origine, `${tex_nombre(origine)}`], [extreme, `${tex_nombre(extreme)}`]],
        pointListe: [[x1, `${noms[1]}`], [Math.floor(x1), `${noms[0]}`], [Math.floor(x1 + 1), `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d2 = droiteGraduee2({
        x: Math.floor(x1) - xmin + 1.5, y: 0, Min: Math.floor(x1), axePosition: 'H', Max: Math.floor(x1 + 1), thickSec: true, thickTer: false, Unite: 20, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4, labelsPrincipaux: false,
        pointListe: [[x1, `${noms[1]}`], [Math.floor(x1), `${noms[0]}`], [Math.floor(x1 + 1), `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d1Corr = droiteGraduee2({
        x: 0, y: 3, Min: xmin, axePosition: 'H', Max: xmax + 0.2, thickSec: true, thickTer: false, Unite: 3, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4, labelsPrincipaux: true,
        labelListe: [[origine, `${tex_nombre(origine)}`], [extreme, `${tex_nombre(extreme)}`]],
        pointListe: [[x1, `${noms[1]}`], [Math.floor(x1), `${noms[0]}`], [Math.floor(x1 + 1), `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d2Corr = droiteGraduee2({
        x: Math.floor(x1) - xmin + 1.5, y: 0, Min: Math.floor(x1), axePosition: 'H', Max: Math.floor(x1 + 1), thickSec: true, thickTer: false, Unite: 20, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 4, labelsPrincipaux: false, labelsSecondaires: true,
        labelListe: [[Math.floor(x1), `${tex_nombre(Math.floor(x1))}`], [x1, `${tex_nombre(x1)}`], [Math.ceil(x1), `${tex_nombre(Math.ceil(x1))}`]],
        pointListe: [[x1, `${noms[1]}`], [Math.floor(x1), `${noms[0]}`], [Math.floor(x1 + 1), `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })

      pA1 = point((Math.floor(x1) - xmin) * 3, 3)
      pA2 = point(Math.floor(x1) - xmin + 1.5, 0)
      pB1 = point((Math.floor(x1) + 1 - xmin) * 3, 3)
      pB2 = point(Math.floor(x1) - xmin + 21.5, 0)
      sA = segment(pA1, pA2)
      sB = segment(pB1, pB2)
      sA.pointilles = true
      sB.pointilles = true
      objets.push(d1, d2, sA, sB)
      objetsCorr.push(d1Corr, d2Corr, sA, sB)
      fenetre = { xmin: -1.5, xmax: 35, ymin: -1, ymax: 4.5, pixelsParCm: 25, scale: 0.5 }
      texte_corr = `L'abscisse de ${noms[1]} est : $${tex_nombre(x1)}=${tex_nombre(Math.floor(x1))} + ${tex_fraction(calcul(10 * (x1 - Math.floor(x1))), 10)}=${tex_fraction(calcul(x1 * 10), 10)}$.<br>`
    }
    else if (this.sup == 2) {
      if (this.niveau == 'CM') {
        xmin = 0
        thickOff = 0
      }
      else {
        xmin = randint(1, 15) - 0.02
        thickOff = 0.01
      }

      xmax = xmin + 1.05
      x1 = calcul(xmin + 0.02 + randint(2, 8) / 10 + randint(2, 8) / 100)
      x2 = calcul(Math.floor(x1 * 10) / 10)
      x3 = calcul(x2 + 0.1)
      //      xmin=calcul(x2-0.8)
      //      xmax=calcul(xmin+1.7)
      if (xmin == 0) extremite = `|->`
      else extremite = `->`
      d1 = droiteGraduee2({
        x: 0, y: 3, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 30, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 8, thickDistance: 1, thickSecDist: 0.1, thickTerDist: 0.01, labelsPrincipaux: false,
        labelListe: [[Math.floor(x1), `${Math.floor(x1)}`], [Math.ceil(x1), `${Math.ceil(x1)}`]],
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d2 = droiteGraduee2({
        x: (x2 - xmin) + 6, y: 0, Min: x2, axePosition: 'H', Max: x2 + .1, thickSec: true, thickTer: false, Unite: 200, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, thickDistance: 0.1, thickSecDist: 0.01, thickTerDist: 0.001, labelsPrincipaux: false,
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x2 + 0.1, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d1Corr = droiteGraduee2({
        x: 0, y: 3, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 30, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 8, thickDistance: 1, thickSecDist: 0.1, thickTerDist: 0.01, labelsSecondaires: true,
        labelListe: [[Math.floor(x1), `${Math.floor(x1)}`], [Math.ceil(x1), `${Math.ceil(x1)}`]],
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d2Corr = droiteGraduee2({
        x: (x2 - xmin) + 6, y: 0, Min: x2, axePosition: 'H', Max: x2 + .1, thickSec: true, thickTer: false, Unite: 200, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, thickDistance: 0.1, thickSecDist: 0.01, thickTerDist: 0.001, labelsPrincipaux: false, labelsSecondaires: true,
        labelListe: [[x2, `${tex_nombre(x2) + '0'}`], [x1, `${tex_nombre(x1)}`], [x3, `${tex_nombre(x3) + '0'}`]],
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x2 + 0.1, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })

      pA1 = point((Math.floor(x1 * 10) / 10 - xmin) * 30, 3)
      pA2 = point(x2 - xmin + 6, 0)
      pB1 = point((Math.floor(x1 * 10) / 10 + 0.1 - xmin) * 30, 3)
      pB2 = point(x3 - xmin + 26, 0)
      sA = segment(pA1, pA2)
      sB = segment(pB1, pB2)
      sA.pointilles = true
      sB.pointilles = true
      fenetre = { xmin: -1.5, xmax: 35, ymin: -1.5, ymax: 4.5, pixelsParCm: 25, scale: 0.5 }
      objets.push(d1, d2, sA, sB)
      objetsCorr.push(d1Corr, d2Corr, sA, sB)
      let partent = Math.floor(x1), pardec = calcul(x1 - partent)
      texte_corr = `L'abscisse de ${noms[1]} est : $${tex_nombre(x1)}=${tex_nombre(partent)} + ${tex_fraction(calcul(pardec * 100), 100)}=${tex_fraction(calcul(x1 * 100), 100)}$.<br>`

    }
    else if (this.sup == 3) {
      if (this.niveau == 'CM') {
        xmin = 0
        xmax = 1
        thickOff = 0
        x1 = calcul(xmin + randint(2, 8) / 10 + randint(2, 8) / 100 + randint(2, 8) * 0.001)
        x2 = troncature(x1, 1)
        x21 = troncature(x1, 2)
        x3 = calcul(x2 + 0.1)
        x31 = calcul(x21 + 0.01)
      }
      else {
        xmin = randint(1, 15)
        xmax = xmin + 1
        x1 = calcul(xmin + randint(2, 8) / 10 + randint(2, 8) / 100 + randint(2, 8) * 0.001)
        x2 = troncature(x1, 1)
        x21 = troncature(x1, 2)
        x3 = calcul(x2 + 0.1)
        x31 = calcul(x21 + 0.01)
        xmin = Math.floor(x2)
        xmax = xmin + 1
        thickOff = 0.001
      }
      if (xmin == 0) extremite = `|->`
      else extremite = `->`
      d1 = droiteGraduee2({
        x: 0, y: 6, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 30, thickDistance: 1, thickSecDist: 0.1, thickTerDist: 0.01, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: true,
        labelListe: [[xmin, `${tex_nombre(xmin)}`], [xmax, `${tex_nombre(xmax)}`]],
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 3, axeStyle: extremite
      })
      d2 = droiteGraduee2({
        x: 6.5, y: 3, Min: x2, axePosition: 'H', Max: x3, thickSec: true, thickTer: true, Unite: 200, thickSecDist: 0.01, thickTerDist: 0.001, thickDistance: 0.1, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: false,
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`], [x21, `${noms[3]}`], [x31, `${noms[4]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d3 = droiteGraduee2({
        x: 6.5, y: 0, Min: x21, axePosition: 'H', Max: x31, thickSec: true, thickTer: false, Unite: 2000, thickSecDist: 0.001, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: false,
        pointListe: [[x1, `${noms[1]}`], [x21, `${noms[3]}`], [x31, `${noms[4]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d1Corr = droiteGraduee2({
        x: 0, y: 6, Min: xmin, axePosition: 'H', Max: xmax, thickSec: true, thickTer: true, Unite: 30, thickDistance: 1, thickSecDist: 0.1, thickTerDist: 0.01, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: true, labelsSecondaires: true,
        labelListe: [[xmin, `${tex_nombre(xmin)}`], [xmax, `${tex_nombre(xmax)}`]],
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 3, axeStyle: extremite
      })
      d2Corr = droiteGraduee2({
        x: 6.5, y: 3, Min: x2, axePosition: 'H', Max: x3, thickSec: true, thickTer: true, Unite: 200, thickSecDist: 0.01, thickTerDist: 0.001, thickDistance: 0.1, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: false, labelsSecondaires: true,
        pointListe: [[x1, `${noms[1]}`], [x2, `${noms[0]}`], [x3, `${noms[2]}`], [x21, `${noms[3]}`], [x31, `${noms[4]}`]],
        labelListe: [[x2, `${tex_nombre(x2) + '0'}`], [x3, `${tex_nombre(x3) + '0'}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })
      d3Corr = droiteGraduee2({
        x: 6.5, y: 0, Min: x21, axePosition: 'H', Max: x31, thickSec: true, thickTer: false, Unite: 2000, thickSecDist: 0.001, thickOffset: thickOff,
        thickCouleur: 'black', axeCouleur: 'black', axeHauteur: 6, labelsPrincipaux: false, labelsSecondaires: true,
        pointListe: [[x1, `${noms[1]}`], [x21, `${noms[3]}`], [x31, `${noms[4]}`]],
        labelListe: [[x21, `${tex_nombre(x21) + '0'}`], [x31, `${tex_nombre(x31) + '0'}`]],
        pointTaille: 6, pointOpacite: 0.8, pointCouleur: 'blue', pointStyle: '|', pointEpaisseur: 2, axeStyle: extremite
      })

      pA1 = point((x2 - xmin) * 30, 6)
      pA2 = point(6.5, 3)
      pB1 = point((x3 - xmin) * 30, 6)
      pB2 = point(26.5, 3)
      sA = segment(pA1, pA2)
      sB = segment(pB1, pB2)
      sA.pointilles = true
      sB.pointilles = true
      pC1 = point(6.5 + (x21 - x2) * 200, 3)
      pC2 = point(6.5, 0)
      pD1 = point(6.5 + (x31 - x2) * 200, 3)
      pD2 = point(26.5, 0)
      sC = segment(pC1, pC2)
      sD = segment(pD1, pD2)
      sC.pointilles = true
      sD.pointilles = true
      fenetre = { xmin: -1.5, xmax: 35, ymin: -1.5, ymax: 7.5, pixelsParCm: 25, scale: 0.5 }
      objets.push(d1, d2, d3, sA, sB, sC, sD)
      objetsCorr.push(d1Corr, d2Corr, d3Corr, sA, sB, sC, sD)
      let partent = Math.floor(x1), pardec = calcul(x1 - partent)
      texte_corr = `L'abscisse de ${noms[1]} est : $${tex_nombre(x1)}=${tex_nombre(partent)} + ${tex_fraction(calcul(pardec * 1000), 1000)}=${tex_fraction(calcul(x1 * 1000), 1000)}$.<br>`

    }
    texte = `Donner l'abscisse de ${noms[1]} sous trois formes : en Ã©criture dÃ©cimale, comme somme dâun nombre entier et dâune fraction dÃ©cimale et avec une fraction dÃ©cimale.<br>`
    texte += mathalea2d(fenetre, objets)
    texte_corr += mathalea2d(fenetre, objetsCorr)
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu_sans_numero(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, '1 : Au dixiÃ¨me\n2 : Au centiÃ¨me\n3 : Au milliÃ¨me'];
}


/**
 * Ãcriture dÃ©cimale Ã  partir de diffÃ©rentes maniÃ¨re de l'Ã©noncer
 *
 * * 3 unitÃ©s, 5 dixiÃ¨mes et 8 centiÃ¨mes
 * * 3 unitÃ©s et 5 centiÃ¨mes
 * * 5 dixiÃ¨mes
 * * 128/10
 * * 8+5/100+7/100
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N23-4
 */
function Nombre_decimal_oralise_de_differentes_manieres() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Donner l'Ã©criture dÃ©cimale d'un nombre Ã  partir de diffÃ©rents textes";
  this.consigne = "Donner l'Ã©criture dÃ©cimale de chaque nombre.";
  this.nb_questions = 5;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = range1(5);
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions);
    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, choix; i < this.nb_questions && cpt < 50;) {
      a = randint(2, 9);
      b = randint(2, 9, a)
      c = randint(2, 9, [a, b])
      switch (liste_type_de_questions[i]) {
        case 1: //3 unitÃ©s, 5 dixiÃ¨mes et 8 centiÃ¨mes   
          texte = `${a} unitÃ©s, ${b} dixiÃ¨mes et ${c} centiÃ¨mes`;
          texte_corr = `$${a}+${tex_fraction(b, 10)}+${tex_fraction(c, 100)}=${tex_nombrec(a + b / 10 + c / 100)}$`
          break;
        case 2: //3 unitÃ©s et 5 centiÃ¨mes   
          texte = `${a} unitÃ©s et ${c} centiÃ¨mes`;
          texte_corr = `$${a}+${tex_fraction(c, 100)}=${tex_nombrec(a + c / 100)}$`
          break;
        case 3: //5 dixiÃ¨mes / centiÃ¨mes ou milliÃ¨mes
          choix = randint(1, 3)
          if (choix == 1) {
            texte = `${a} dixiÃ¨mes`;
            texte_corr = `$${tex_fraction(a, 10)}=${tex_nombrec(a / 10)}$`
          }
          if (choix == 2) {
            texte = `${a} centiÃ¨mes`;
            texte_corr = `$${tex_fraction(a, 100)}=${tex_nombrec(a / 100)}$`
          }
          if (choix == 3) {
            texte = `${a} milliÃ¨mes`;
            texte_corr = `$${tex_fraction(a, 1000)}=${tex_nombrec(a / 1000)}$`
          }
          break;
        case 4: //128/10
          let n = a * 100 + b * 10 + c
          choix = randint(1, 3)
          if (choix == 1) {
            texte = `$${tex_fraction(n, 10)}$`;
            texte_corr = `$${tex_fraction(n, 10)}=${tex_nombrec(n / 10)}$`
          }
          if (choix == 2) {
            texte = `$${tex_fraction(n, 100)}$`;
            texte_corr = `$${tex_fraction(n, 100)}=${tex_nombrec(n / 100)}$`
          }
          if (choix == 1) {
            texte = `$${tex_fraction(n, 1000)}$`;
            texte_corr = `$${tex_fraction(n, 1000)}=${tex_nombrec(n / 1000)}$`
          }
          break;
        case 5: //8+5/100+7/100  
          choix = randint(1, 2)
          if (choix == 1) {
            texte = `$${a}+${tex_fraction(b, 100)}+${tex_fraction(c, 100)}$`;
            texte_corr = `$${a}+${tex_fraction(b, 100)}+${tex_fraction(c, 100)}=${a}+${tex_fraction(b + c, 100)}=${tex_nombrec(a + (b + c) / 100)}$`
          }
          if (choix == 2) {
            texte = `$${a}+${tex_fraction(b, 10)}+${tex_fraction(c, 10)}$`;
            texte_corr = `$${a}+${tex_fraction(b, 10)}+${tex_fraction(c, 10)}=${a}+${tex_fraction(b + c, 10)}=${a}+${tex_nombrec((b + c) / 10)}=${tex_nombrec(a + (b + c) / 10)}$`
          }
          break;

      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        if (!sortie_html && i == 0) {
          texte_corr = `\\setlength\\itemsep{2em}` + texte_corr;
        } // espacement entre les questions
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}


/**
 * Additions, soustractions et multiplications posÃ©es de nombres entiers
 *
 * * abcd +efg
 * * abc0-efg
 * * 1abc-def
 * * abc*d0e tables de 2 Ã  5
 * * abc*de tables de 5 Ã  9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C10 
 */
function Additions_soustractions_multiplications_posees() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Additions, soustractions et multiplications posÃ©es de nombres entiers";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon les opÃ©rations posÃ©es ne sont pas jolies
  this.nb_questions = 5;
  // this.pas_de_version_HMTL=true;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4, 5];
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    if (this.nb_questions == 3) {
      liste_type_de_questions = [1, 2, 5];
    }
    if (this.nb_questions == 4) {
      liste_type_de_questions = [1, 2, 4, 5];
    }

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // abcd +efg
          a =
            randint(1, 9) * 10000 +
            randint(5, 9) * 1000 +
            randint(5, 9) * 100 +
            randint(7, 9) * 10 +
            randint(1, 9);
          b = randint(5, 9) * 100 + randint(7, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}+${b}$`;
          !sortie_html
            ? (texte_corr = `$\\opadd{${a}}{${b}}$`)
            : (texte_corr = `$${tex_nombre(a)}+${b}=${tex_nombre(a + b)}$`);
          break;
        case 2: // abc0-efg
          a = randint(1, 9);
          b = randint(1, 9);
          c = randint(1, 9);
          e = randint(b, 9);
          f = randint(c, 9);
          g = randint(2, 9);
          x = a * 1000 + b * 100 + c * 10;
          y = e * 100 + f * 10 + g;
          texte = `$${tex_nombre(x)}-${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opsub{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}+${y}=${tex_nombre(x + y)}$`);
          break;
        case 3: // 1abc-def
          a = randint(1, 9);
          b = randint(1, 9);
          c = randint(1, 9);
          d = randint(a, 9);
          e = randint(1, 9);
          f = randint(c, 9);
          x = 1000 + a * 100 + b * 10 + c;
          y = d * 100 + e * 10 + f;
          texte = `$${tex_nombre(x)}-${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opsub{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}-${y}=${tex_nombre(x - y)}$`);
          break;
        case 4: // abc*d0e tables de 2 Ã  5
          a = randint(2, 5);
          b = randint(2, 5);
          c = randint(2, 5);
          d = randint(2, 5);
          e = randint(2, 5);
          x = 100 * a + 10 * b + c;
          y = d * 100 + e;
          texte = `$${tex_nombre(x)}\\times${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opmul{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}\\times${y}=${tex_nombre(
              x * y
            )}$`);
          break;
        case 5: // abc*de tables de 5 Ã  9
          a = randint(5, 9);
          b = randint(5, 9);
          c = randint(5, 9);
          d = randint(5, 9);
          e = randint(5, 9);
          x = 100 * a + 10 * b + c;
          y = 10 * d + e;
          texte = `$${x}\\times${y}$`;
          !sortie_html
            ? (texte_corr = `$\\opmul{${x}}{${y}}$`)
            : (texte_corr = `$${tex_nombre(x)}\\times${y}=${tex_nombre(
              x * y
            )}$`);
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        if (!sortie_html && i == 0) {
          texte_corr = `\\setlength\\itemsep{2em}` + texte_corr;
        } // espacement entre les questions
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Additions et soustractions de nombres dÃ©cimaux
 * * xxx-xx,x
 * * xxx-xx,xx
 * * xxx,x-xxx
 * * x0x-xx9,x
 * * xxx+xx,x
 * * xxx+xx,xx
 * * xxx,x+xxx
 * * x0x+xx9,x
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C20
 */
function Additionner_soustraires_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Additions et soustractions de nombres dÃ©cimaux";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon les opÃ©rations posÃ©es ne sont pas jolies
  this.nb_questions = 4;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_de_type_d_additions = combinaison_listes(
      [5, 6, 7, 8],
      this.nb_questions
    );
    let liste_de_type_de_soustractions = combinaison_listes(
      [1, 2, 3, 4],
      this.nb_questions
    );
    let liste_type_de_questions = [];
    if (this.sup == 1) {
      liste_type_de_questions = combinaison_listes([5, 6, 7, 8], this.nb_questions)
    } else if (this.sup == 2) {
      liste_type_de_questions = combinaison_listes([1, 2, 3, 4], this.nb_questions)
    } else {
      for (let i = 0; i < this.nb_questions; i++) {
        if (i + 1 <= this.nb_questions / 2) {
          // premiÃ¨re moitiÃ© sont des additions mais si c'est impair on prendra plus de soustractions
          liste_type_de_questions.push(liste_de_type_d_additions[i]);
        } else {
          liste_type_de_questions.push(liste_de_type_de_soustractions[i]);
        }
      }
    }

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // xxx-xx,x
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(randint(5, 9) * 10 + randint(6, 9) + randint(1, 9) / 10);
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
              a - b
            )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 2: // xxx-xx,xx
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(
            randint(5, 9) * 10 +
            randint(6, 9) +
            randint(1, 9) / 10 +
            randint(1, 9) / 100
          );
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
              a - b
            )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 3: // xxx,x-xxx
          a = calcul(
            randint(5, 9) * 100 +
            randint(2, 5) * 10 +
            randint(1, 9) +
            randint(1, 9) / 10
          );
          b = randint(1, 4) * 100 + randint(6, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
              a - b
            )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 4: // x0x-xx9,x
          a = calcul(randint(5, 9) * 100 + randint(1, 5));
          b = calcul(
            randint(1, 4) * 100 + randint(1, 9) * 10 + 9 + randint(1, 9) / 10
          );
          texte = `$${tex_nombre(a)}-${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}-${tex_nombre(b)}=${tex_nombrec(
              a - b
            )}$`)
            : (texte_corr = `$\\opsub[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 5: // xxx+xx,x
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(randint(5, 9) * 10 + randint(6, 9) + randint(1, 9) / 10);
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
              a + b
            )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 6: // xxx+xx,xx
          a = randint(1, 4) * 100 + randint(2, 5) * 10 + randint(1, 9);
          b = calcul(
            randint(5, 9) * 10 +
            randint(6, 9) +
            randint(1, 9) / 10 +
            randint(1, 9) / 100
          );
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
              a + b
            )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 7: // xxx,x+xxx
          a = calcul(
            randint(5, 9) * 100 +
            randint(2, 5) * 10 +
            randint(1, 9) +
            randint(1, 9) / 10
          );
          b = randint(1, 4) * 100 + randint(6, 9) * 10 + randint(1, 9);
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
              a + b
            )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
        case 8: // x0x+xx9,x
          a = calcul(randint(5, 9) * 100 + randint(1, 5));
          b = calcul(
            randint(1, 4) * 100 + randint(1, 9) * 10 + 9 + randint(1, 9) / 10
          );
          texte = `$${tex_nombre(a)}+${tex_nombre(b)}$`;
          sortie_html
            ? (texte_corr = `$${tex_nombre(a)}+${tex_nombre(b)}=${tex_nombrec(
              a + b
            )}$`)
            : (texte_corr = `$\\opadd[decimalsepsymbol={,}]{${a}}{${b}}$`);
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ["Niveau de difficultÃ©", 3, "1 : Additions de dÃ©cimaux\n2: Soustraction de dÃ©cimaux\n3 : Additions et soustraction de dÃ©cimaux"];
}

/**
 * Poser et effectuer les divisions euclidiennes suivantes puis donner l'Ã©galitÃ© fondamentale correspondante.
 *
 * Niveau de difficultÃ© 1 :
 * * division par 2, 3 , 4 ou 5
 * * division par 6 Ã  9
 * * un 0 dans le quotient
 *
 * Niveau de difficultÃ© 2 :
 * * division par 11, 12, 15, 25
 * * division par 13,14,21,22,23 ou 24 et un 0 dans le quotient
 * * division par un multiple de 10 et un 0 dans le quotient
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C11
 */
function Divisions_euclidiennes() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Divisions euclidiennes";
  this.consigne =
    "Poser et effectuer les divisions euclidiennes suivantes puis donner l'Ã©galitÃ© fondamentale correspondante.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon opidiv n'est pas joli
  this.nb_questions = 4;
  this.sup = 1;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    if (this.sup == 0) type_de_questions_disponibles = [1, 1, 1, 1]
    else if (this.sup == 1) type_de_questions_disponibles = [1, 2, 2, 3]
    else if (this.sup == 2) type_de_questions_disponibles = [4, 4, 5, 6];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, q, r;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // division par 2, 3 , 4 ou 5
          q = randint(2, 5) * 100 + randint(2, 5) * 10 + randint(2, 5);
          b = randint(2, 5);
          break;
        case 2: // division par 6 Ã  9
          q = randint(5, 9) * 100 + randint(2, 5) * 10 + randint(5, 9);
          b = randint(6, 9);
          break;
        case 3: // un 0 dans le quotient
          if (randint(1, 2) == 1) {
            q = randint(2, 9) * 1000 + randint(2, 9) * 100 + randint(2, 9);
          } else {
            q = randint(2, 9) * 1000 + randint(2, 9) * 10 + randint(2, 9);
          }
          b = randint(7, 9);
          break;
        case 4: // division par 11, 12, 15, 25
          q = randint(1, 5) * 100 + randint(1, 5) * 10 + randint(1, 5);
          b = choice([11, 12, 15, 25]);
          break;
        case 5: // division par 13,14,21,22,23 ou 24 et un 0 dans le quotient
          q = randint(1, 5) * 1000 + randint(6, 9) * 100 + randint(1, 5);
          b = choice([11, 12, 13, 14, 21, 22, 23, 24]);
          break;
        case 6: // division par un multiple de 10 et un 0 dans le quotient
          q = randint(6, 9) * 1000 + randint(6, 9) * 10 + randint(1, 5);
          b = randint(2, 9) * 10;
          break;
      }
      r = randint(0, b - 1); //reste infÃ©rieur au diviseur
      a = b * q + r;
      texte = `$${tex_nombre(a)}\\div${b}$`;
      if (r == 0) {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}=${q}$`)
          : (texte_corr = `$\\opidiv[voperation=top]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
            a
          )}\\div${b}=${q}$`);
      } else {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}=${b}\\times${q}+${r}$`)
          : (texte_corr = `$\\opidiv[voperation=top]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
            a
          )}=${b}\\times${q}+${r}$`);
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Niveau de difficultÃ©",
    2,
    "1 : Quotient infÃ©rieur Ã  10\n2: Quotient Ã  2 chiffres",
  ];
}

/**
 * Effectuer les divisions dÃ©cimales suivantes et donner la valeur exacte de leur quotient.
 *
 * Niveau de difficultÃ© 1 :
 * * entier divisÃ© par 4 quotient : xx,25 ou xx,75
 * * entier divisÃ© par 8 quotient : x,125 ou x,375 ou x,625 ou x,875
 * * entier divisÃ© par 6 quotient : xxx,5
 * * quotient xx,xx division par 2, 3 , 4 ou 5
 * * quotient x,xxx division par 6 Ã  9
 * * un 0 dans le quotient
 *
 * Niveau de difficultÃ© 2 : division par 3, 7 ou 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C31
 */
function Division_decimale() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Divisions dÃ©cimales";
  this.consigne =
    "Effectuer les divisions dÃ©cimales suivantes et donner la valeur exacte de leur quotient.";
  this.spacing = 2;
  sortie_html ? (this.spacing_corr = 2) : (this.spacing_corr = 1); //Important sinon opdiv n'est pas joli
  this.nb_questions = 4;
  this.sup = 1;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    this.sup == 1
      ? (type_de_questions_disponibles = [choice([1, 2, 3]), 4, 5, 6])
      : (type_de_questions_disponibles = [7, 8, 9]);
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, q, r;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // entier divisÃ© par 4 quotient : xx,25 ou xx,75
          b = 4;
          a = (randint(2, 9) * 10 + randint(2, 9)) * 4 + choice([1, 3]);
          q = calcul(a / b);
          break;
        case 2: // entier divisÃ© par 8 quotient : x,125 ou x,375 ou x,625 ou x,875
          b = 8;
          a = randint(2, 9) * 8 + choice([1, 3, 5, 7]);
          q = calcul(a / b);
          break;
        case 3: // entier divisÃ© par 6 quotient : xxx,5
          b = 6;
          q = calcul(
            randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) + 0.5
          );
          a = q * 6;
          break;
        case 4: // quotient xx,xx division par 2, 3 , 4 ou 5
          q = calcul(
            randint(2, 5) * 10 +
            randint(2, 5) +
            randint(2, 5) / 10 +
            randint(2, 5) / 100
          );
          b = randint(2, 5);
          a = calcul(b * q);
          break;
        case 5: // quotient x,xxx division par 6 Ã  9
          q = calcul(
            randint(6, 9) +
            randint(5, 9) / 10 +
            randint(6, 9) / 100 +
            randint(6, 9) / 1000
          );
          b = randint(6, 9);
          a = calcul(b * q);
          break;
        case 6: // un 0 dans le quotient
          if (randint(1, 2) == 1) {
            //x0x,x
            q = calcul(
              randint(2, 9) * 100 + randint(2, 9) + randint(2, 9) / 10
            );
          } else {
            //xx0,x
            q = calcul(
              randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) / 10
            );
          }
          b = randint(7, 9);
          a = calcul(b * q);
          break;
        case 7: // division par 7
          a = randint(2, 9) * 7 + randint(1, 6);
          b = 7;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
          break;
        case 8: // division par 9
          a = calcul((randint(11, 19) * 9) / 10 + randint(1, 8) / 10);
          b = 9;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
          break;
        case 9: //division par 3
          a = calcul((randint(11, 99) * 3) / 100 + randint(1, 2) / 100);
          b = 3;
          q = Algebrite.eval(Math.floor(Algebrite.eval((a / b) * 1000)) / 1000);
      }
      if (this.sup == 2) {
        this.consigne =
          "Effectuer les divisions dÃ©cimales suivantes et donner une valeur approchÃ©e de leur quotient au milliÃ¨me prÃ¨s.";
      }
      texte = `$${tex_nombre(a)}\\div${b}$`;
      if (this.sup == 1) {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}=${tex_nombre(q)}$`)
          : (texte_corr = `$\\opdiv[displayintermediary=all,voperation=top,decimalsepsymbol={,},shiftdecimalsep=none]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
            a
          )}\\div${b}=${tex_nombre(q)}$`);
      } else {
        sortie_html
          ? (texte_corr = `$${tex_nombre(a)}\\div${b}\\approx${tex_nombre(q)}$`)
          : (texte_corr = `$\\opdiv[displayintermediary=all,voperation=top,period,decimalsepsymbol={,},shiftdecimalsep=none]{${a}}{${b}}$\\\\\\\\$${tex_nombre(
            a
          )}\\div${b}\\approx${tex_nombre(q)}$`);
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de questions",
    2,
    "1 : DÃ©terminer le quotient exact\n2: DÃ©terminer un quotient approchÃ© au milliÃ¨me prÃ¨s",
  ];
}
/**
 * Donner des valeurs approchÃ©es d'un quotient dÃ©cimale.
 *
 * 
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C31-2
 * 2020-12-07
 */
function Valeur_approchee_division_decimale() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Donner des valeurs approchÃ©es d'un quotient dÃ©cimal";
  this.consigne = "ComplÃ©ter les phrases suivantes.";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;)
     {
      // Une fraction irrÃ©ductible avec un dÃ©nominateur qui comporte un facteur diffÃ©rent de 2 ou de 5
      // aura une Ã©criture dÃ©cimale pÃ©riodique infinie
      let k1 = choice([3,7,11,13]);
      let k2 = choice([3,7,11,13],k1);
      let a = choice([3,5,7,11,13],[k1,k2])*choice([3,5,7,11,13],[k1,k2])
      let b = k1*k2
      let q = math.round(a/b,6)
      texte = `On sait que $${a}\\div${b}\\approx${tex_nombre(q)}$.`;
      let liste_de_questions1 = [
        [`La valeur approchÃ©e par dÃ©faut de $${a}\\div${b}$ au dixiÃ¨me prÃ¨s est : `, math.floor(a/b,1)], 
        [`La valeur approchÃ©e par excÃ¨s de $${a}\\div${b}$ au dixiÃ¨me prÃ¨s est : `, math.ceil(a/b,1)], 
        [`La valeur approchÃ©e par dÃ©faut de $${a}\\div${b}$ au centiÃ¨me prÃ¨s est : `, math.floor(a/b,2)],
        [`La troncature de $${a}\\div${b}$ au centiÃ¨me prÃ¨s est : `, math.floor(a/b,2)],
        [`La valeur approchÃ©e par excÃ¨s de $${a}\\div${b}$ au centiÃ¨me prÃ¨s est : `, math.ceil(a/b,2)],
        [`La valeur approchÃ©e par dÃ©faut de $${a}\\div${b}$ au milliÃ¨me prÃ¨s est : `, math.floor(a/b,3)],
        [`La troncature de $${a}\\div${b}$ au milliÃ¨me prÃ¨s est : `, math.floor(a/b,3)],
        [`La valeur approchÃ©e par excÃ¨s de $${a}\\div${b}$ au milliÃ¨me prÃ¨s est : `, math.ceil(a/b,3)],
      ]
      let liste_de_questions2 = [
        [`La valeur approchÃ©e de $${a}\\div${b}$ au dixiÃ¨me prÃ¨s est : `, math.round(a/b,1)],
        [`La valeur approchÃ©e de $${a}\\div${b}$ au centiÃ¨me prÃ¨s est : `, math.round(a/b,2)],
        [`La valeur approchÃ©e de $${a}\\div${b}$ au milliÃ¨me prÃ¨s est : `, math.round(a/b,3)],
      ]

      texte_corr = `On sait que $${a}\\div${b}\\approx${tex_nombre(q)}$.`;
      // Questions peuvent Ãªtre dÃ©faut, excÃ¨s ou excÃ¨s, dÃ©faut ou troncature, excÃ¨s ou excÃ¨s, troncature
      let choix = randint(1,4);
      switch (choix) {
        case 1:
          texte+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[0][0]}\\ldots`
          texte+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[4][0]}\\ldots`
          texte_corr+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[0][0]} $ ${tex_nombre(liste_de_questions1[0][1])}$`
          texte_corr+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[4][0]} $ ${tex_nombre(liste_de_questions1[4][1])}$`
          break;
        case 2:
          texte+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[1][0]}\\ldots`
          texte+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[5][0]}\\ldots`
          texte_corr+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[1][0]} $ ${tex_nombre(liste_de_questions1[1][1])}$`
          texte_corr+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[5][0]} $ ${tex_nombre(liste_de_questions1[5][1])}$`
          break;
        case 3:
          texte+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[3][0]}\\ldots`
          texte+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[7][0]}\\ldots`
          texte_corr+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[3][0]} $ ${tex_nombre(liste_de_questions1[3][1])}$`
          texte_corr+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[7][0]} $ ${tex_nombre(liste_de_questions1[7][1])}$`
          break;
        case 4:
          texte+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[4][0]}\\ldots`
          texte+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[7][0]}\\ldots`
          texte_corr+= `<br><br> ${num_alpha(0)} ${liste_de_questions1[4][0]} $ ${tex_nombre(liste_de_questions1[4][1])}$`
          texte_corr+= `<br><br> ${num_alpha(1)} ${liste_de_questions1[7][0]} $ ${tex_nombre(liste_de_questions1[7][1])}$`
          break;
      }
      shuffle(liste_de_questions2)
      
      texte+= `<br><br> ${num_alpha(2)} ${liste_de_questions2[0][0]}\\ldots`
      texte+= `<br><br> ${num_alpha(3)} ${liste_de_questions2[1][0]}\\ldots`
      
      
      texte_corr+= `<br><br> ${num_alpha(2)} ${liste_de_questions2[0][0]} $ ${tex_nombre(liste_de_questions2[0][1])}$`
      texte_corr+= `<br><br> ${num_alpha(3)} ${liste_de_questions2[1][0]} $ ${tex_nombre(liste_de_questions2[1][1])}$`

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Multiplication de deux nombres dÃ©cimaux
 *
 * * xxx * xx,x chiffres infÃ©rieurs Ã  5
 * * xx,x * x,x
 * * x,xx * x0x
 * * 0,xx * x,x
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C30
 */
function Multiplier_decimaux() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplications posÃ©es de nombres dÃ©cimaux";
  this.consigne = "Poser et effectuer les calculs suivants.";
  this.spacing = 2;
  this.spacing_corr = 1; //Important sinon le calcul posÃ© ne fonctionne pas avec opmul et spacing
  this.nb_questions = 4;
  this.liste_packages = "xlop";

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let type_de_questions_disponibles = [1, 2, 3, 4];
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, c, d, e, f, g, x, y;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // xxx * xx,x chiffres infÃ©rieurs Ã  5
          a = randint(2, 5) * 100 + randint(2, 5) * 10 + randint(2, 5);
          b = calcul(randint(2, 5) * 10 + randint(2, 5) + randint(2, 5) / 10);
          break;
        case 2: // xx,x * x,x
          a = calcul(randint(2, 9) * 10 + randint(2, 9) + randint(2, 9) / 10);
          b = calcul(randint(6, 9) + randint(6, 9) / 10);
          break;
        case 3: // x,xx * x0x
          a = calcul(randint(2, 9) + randint(2, 9) / 10 + randint(2, 9) / 100);
          b = calcul(randint(2, 9) * 100 + randint(2, 9));
          break;
        case 4: // 0,xx * x,x
          a = calcul(randint(2, 9) / 10 + randint(2, 9) / 100);
          b = calcul(randint(2, 9) + randint(2, 9) / 10);
          break;
      }

      texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`;
      sortie_html
        ? (texte_corr = `$${tex_nombre(a)}\\times${tex_nombre(b)}=${tex_nombrec(
          a * b
        )}$`)
        : (texte_corr = `$\\opmul[decimalsepsymbol={,}]{${a}}{${b}}$`);

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}

/**
 * Multiplication d'un nombre dÃ©cimal dans diffÃ©rentes Ã©critures par 10, 100, 1000
 *
 *  * Type 1 : Ã©criture dÃ©cimale
 *  * Type 2 : Ã©criture fractionnaire
 *  * Type 3 : Ã©critures fractionnaires et dÃ©cimales
 *
 *
 *  * Sup2 : avec ou sans calculs Ã  trous
 * @Auteur RÃ©mi Angot
* RÃ©fÃ©rence 6C30-1
  *
 */
function Multiplier_decimaux_par_10_100_1000() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Multiplications d'un nombre dÃ©cimal par 10, 100 ou 1 000.";
  this.consigne = "Calculer.";
  this.sup = 3;
  this.sup2 = false;
  this.spacing = 2;
  this.spacing_corr = 2;
  this.nb_questions = 8;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let type_de_questions_disponibles = [];
    if (this.sup == 1 && !this.sup2) type_de_questions_disponibles = [1, 2];
    if (this.sup == 1 && this.sup2)
      type_de_questions_disponibles = [1, 2, 5, 6];
    if (this.sup == 2 && !this.sup2) type_de_questions_disponibles = [3, 4];
    if (this.sup == 2 && this.sup2)
      type_de_questions_disponibles = [3, 4, 3, 4, 7, 8, 9, 10];
    if (this.sup == 3 && !this.sup2)
      type_de_questions_disponibles = [1, 2, 3, 4];
    if (this.sup == 3 && this.sup2)
      type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    if (this.sup2) this.consigne = "Calculer et complÃ©ter.";

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_de_facteurs = combinaison_listes(
      [10, 100, 1000],
      this.nb_questions
    );

    for (
      let i = 0, texte, texte_corr, cpt = 0, a, b, den;
      i < this.nb_questions && cpt < 50;

    ) {
      type_de_questions = liste_type_de_questions[i];
      switch (type_de_questions) {
        case 1: // a,abcd Ã 10
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(a)}\\times${tex_nombre(b)}$`;
          texte_corr = `$${tex_nombre(a)} \\times ${tex_nombre(
            b
          )} = ${tex_nombrec(a * b)}$`;
          break;
        case 2: // 10 Ã a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_nombre(a)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_nombre(
            a
          )} = ${tex_nombrec(a * b)}$`;
          break;
        case 3: // abcd/10 Ã 10
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, den)}\\times${tex_nombre(b)}$`;
          texte_corr = `$${tex_fraction(a, den)} \\times ${tex_nombre(
            b
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 4: // 10 Ã abcd/10
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_fraction(a, den)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_fraction(
            a,
            den
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 5: // .... Ã 10 = a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$\\ldots \\times${tex_nombre(b)} = ${tex_nombrec(a * b)}$`;
          texte_corr = `$${mise_en_evidence(
            tex_nombre(a)
          )} \\times ${tex_nombre(b)} = ${tex_nombrec(a * b)}$`;
          break;
        case 6: // 10 Ã .... = a,abcd
          a = choice([randint(11, 99), randint(100, 999)]);
          a = calcul(a / choice([10, 100, 1000, 10000]));
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)} \\times \\ldots = ${tex_nombrec(a * b)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${mise_en_evidence(
            tex_nombre(a)
          )}  = ${tex_nombrec(a * b)}$`;
          break;
        case 7: // case 3 avec un trou sur l'entier
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, den)}\\times \\ldots = ${tex_nombrec(
            (a / den) * b
          )}$`;
          texte_corr = `$${tex_fraction(a, den)} \\times ${mise_en_evidence(
            tex_nombre(b)
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 8: // case 4 avec un trou sur l'entier
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$ \\ldots \\times${tex_fraction(a, den)}= ${tex_nombrec(
            (a / den) * b
          )}$`;
          texte_corr = `$${mise_en_evidence(
            tex_nombre(b)
          )} \\times ${tex_fraction(a, den)} = ${tex_fraction(
            a * b,
            den
          )} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 9: // case 3 avec trou sur la fraction
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_fraction(a, "\\ldots")}\\times${tex_nombre(
            b
          )} = ${tex_nombrec((a / den) * b)}$`;
          texte_corr = `$${tex_fraction(
            a,
            mise_en_evidence(tex_nombre(den))
          )} \\times ${tex_nombre(b)} = ${tex_fraction(
            a * b,
            den
          )} = ${tex_nombrec((a / den) * b)}$`;
          break;
        case 10: // case 4 avec trou sur la fraction
          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)]);
          den = choice([10, 100, 1000]);
          b = liste_de_facteurs[i];
          texte = `$${tex_nombre(b)}\\times${tex_fraction(
            a,
            "\\ldots"
          )} = ${tex_nombrec((a / den) * b)}$`;
          texte_corr = `$${tex_nombre(b)} \\times ${tex_fraction(
            a,
            mise_en_evidence(tex_nombre(den))
          )} = ${tex_fraction(a * b, den)} = ${tex_nombrec((a / den) * b)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Types de calculs",
    3,
    "1 : Ãcriture dÃ©cimale\n2 : Ãcriture fractionnaire\n3 : Ãcritures dÃ©cimales et fractionnaires",
  ];
  this.besoin_formulaire2_case_a_cocher = ["Avec des calculs Ã  trous"];
}

/**
 * Plusieurs type de calcul avec des entiers.
 *
 * Sans parenthÃ¨ses :
 * * a+b*c
 * * a+bÃ·c
 * * aÃ·b*c
 * * a-b*c
 * * a*bÃ·c
 * * a*b+c
 * * a-b+c
 * * a+b+c*d
 * * a*b+c*d
 * * a*b*c-d
 * * a*b-cÃ·d
 * * a*b+cÃ·d
 *
 * Avec parenthÃ¨ses :
 * * a*(b-c)
 * * (a-b)*c
 * * (a-b)Ã·c
 * * aÃ·(b+c)
 * * (a-b)Ã·c
 * * a*(b-c)*d
 * * a*b*(c-d)
 * * a*(b-c*d)
 * * (a+b*c)Ã·d
 * * a*(b-c*d)
 * * a*bÃ·(c+d)
 * * a*(bÃ·c+d)
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6C33
 */
function Priorites() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Calculer en utilisant les prioritÃ©s opÃ©ratoires";
  this.consigne = "Calculer";
  this.nb_questions = 5;
  this.nb_cols = 2;
  this.nb_cols_corr = 1;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let liste_questions_disponibles = []; //
    if (this.sup == 1) {
      liste_questions_disponibles = range1(12);
    } else if (this.sup == 2) {
      liste_questions_disponibles = range1(22, range1(12));
    } else {
      liste_questions_disponibles = range1(22);
    }
    let liste_type_de_questions = combinaison_listes(
      liste_questions_disponibles,
      this.nb_questions
    );
    for (
      let i = 0, texte, texte_corr, a, b, c, d, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      switch (liste_type_de_questions[i]) {
        case 1:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          texte = `$${a}+${b}\\times${c}$`;
          texte_corr = `$${a}+${mise_en_evidence(b + "\\times" + c)}=${a}+${b * c
            }=${a + b * c}$`;
          break;
        case 2:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c * randint(2, 11);
          texte = `$${a}+${b}\\div${c}$`;
          texte_corr = `$${a}+${mise_en_evidence(b + "\\div" + c)}=${a}+${b / c
            }=${a + b / c}$`;
          break;
        case 3:
          b = randint(2, 11);
          c = randint(2, 11);
          a = b * randint(2, 11);
          texte = `$${a}\\div${b}\\times${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\div" + b)}\\times${c}=${a / b
            }\\times${c}=${(a / b) * c}$`;
          break;
        case 4:
          b = randint(2, 11);
          c = randint(2, 11);
          a = b * c + randint(2, 11);
          texte = `$${a}-${b}\\times${c}$`;
          texte_corr = `$${a}-${mise_en_evidence(b + "\\times" + c)}=${a}-${b * c
            }=${a - b * c}$`;
          break;
        case 5:
          if (choice([true, false])) {
            //a est un multiple de c
            c = randint(2, 6);
            a = c * randint(2, 5);
            b = randint(2, 6);
          } else {
            // b est un multiple de c
            c = randint(2, 6);
            b = c * randint(2, 5);
            a = randint(2, 6);
          }
          texte = `$${a}\\times${b}\\div${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + b)}\\div${c}=${a * b
            }\\div${c}=${(a * b) / c}$`;
          break;
        case 6:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          texte = `$${a}\\times${b}+${c}$`;
          texte_corr = `$${mise_en_evidence(a + "\\times" + b)}+${c}=${a * b
            }+${c}=${a * b + c}$`;
          break;
        case 7:
          b = randint(20, 59);
          a = b + randint(11, 29);
          c = randint(11, 29);
          texte = `$${a}-${b}+${c}$`;
          texte_corr = `$${mise_en_evidence(a + "-" + b)}+${c}=${a - b}+${c}=${a - b + c
            }$`;
          break;
        case 8:
          a = randint(2, 20);
          b = randint(2, 20);
          c = randint(2, 11);
          d = randint(2, 11);
          texte = `$${a}+${b}+${c}\\times${d}$`;
          texte_corr = `$${a}+${b}+${mise_en_evidence(
            c + "\\times" + d
          )}=${a}+${b}+${c * d}=${a + b + c * d}$`;
          break;
        case 9:
          a = randint(2, 11);
          b = randint(2, 11);
          c = randint(2, 11);
          d = randint(2, 11);
          texte = `$${a}\\times${b}+${c}\\times${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}+${mise_en_evidence(c + "\\times" + d)}=${a * b}+${c * d}=${a * b + c * d
            }$`;
          break;
        case 10:
          a = randint(2, 5);
          b = randint(2, 5);
          c = randint(2, 5);
          d = randint(2, a * b * c - 1);
          texte = `$${a}\\times${b}\\times${c}-${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}\\times${c}-${d}=${mise_en_evidence(a * b + "\\times" + c)}-${d}=${a * b * c - d
            }$`;
          break;
        case 11:
          a = randint(3, 11);
          b = randint(3, 11);
          d = randint(2, 11);
          c = d * randint(2, 8);
          texte = `$${a}\\times${b}-${c}\\div${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}-${mise_en_evidence(c + "\\div" + d)}=${a * b}-${c / d}=${a * b - c / d
            }$`;
          break;
        case 12:
          a = randint(2, 11);
          b = randint(2, 11);
          d = randint(2, 11);
          c = d * randint(2, 8);
          texte = `$${a}\\times${b}+${c}\\div${d}$`;
          texte_corr = `$${mise_en_evidence(
            a + "\\times" + b
          )}+${mise_en_evidence(c + "\\div" + d)}=${a * b}+${c / d}=${a * b + c / d
            }$`;
          break;
        case 13:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c + randint(2, 11);
          texte = `$${a}\\times(${b}-${c})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `-` + c
          )})=${a}\\times${b - c}=${a * (b - c)}$`;
          break;
        case 14:
          b = randint(11, 39);
          a = b + randint(2, 11);
          c = randint(2, 11);
          texte = `$(${a}-${b})\\times${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\times${c}=${a - b
            }\\times${c}=${(a - b) * c}$`;
          break;
        case 15:
          c = randint(2, 11);
          b = randint(11, 39);
          a = b + c * randint(2, 9);
          texte = `$(${a}-${b})\\div${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\div${c}=${a - b
            }\\div${c}=${(a - b) / c}$`;
          break;
        case 16:
          b = randint(2, 5);
          c = randint(2, 6);
          a = (b + c) * randint(2, 9);
          texte = `$${a}\\div(${b}+${c})$`;
          texte_corr = `$${a}\\div(${mise_en_evidence(b + `+` + c)})=${a}\\div${b + c
            }=${a / (b + c)}$`;
          break;
        case 17:
          c = randint(2, 11);
          b = randint(11, 39);
          a = b + c * randint(2, 9);
          texte = `$(${a}-${b})\\div${c}$`;
          texte_corr = `$(${mise_en_evidence(a + `-` + b)})\\div${c}=${a - b
            }\\div${c}=${(a - b) / c}$`;
          break;
        case 18:
          c = randint(11, 39);
          b = c + randint(2, 5);
          a = randint(2, 5);
          d = randint(2, 5);
          texte = `$${a}\\times(${b}-${c})\\times${d}$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `-` + c
          )})\\times${d}=${a}\\times${b - c}\\times${d}=${a * (b - c) * d}$`;
          break;
        case 19:
          d = randint(11, 39);
          c = d + randint(2, 5);
          a = randint(2, 5);
          b = randint(2, 5);
          texte = `$${a}\\times${b}\\times(${c}-${d})$`;
          texte_corr = `$${a}\\times${b}\\times(${mise_en_evidence(
            c + `-` + d
          )})=${a}\\times${b}\\times${c - d}=${a * b * (c - d)}$`;
          break;
        case 20:
          a = randint(2, 11);
          c = randint(2, 11);
          d = randint(2, 11);
          b = c * d + randint(2, 11);
          texte = `$${a}\\times(${b}-${c}\\times${d})$`;
          texte_corr = `$${a}\\times(${b}-${mise_en_evidence(
            c + `\\times` + d
          )})=${a}\\times(${mise_en_evidence(b + `-` + c * d)})=${a}\\times${b - c * d
            }=${a * (b - c * d)}$`;
          break;
        case 21:
          a = randint(2, 11);
          b = randint(2, 11);
          if (liste_des_diviseurs(a * b).length <= 2) {
          }
          let liste = liste_des_diviseurs(a * b);
          if (liste.length > 2) {
            liste.pop(); //on supprime le plus grand diviseur qui est le produit
          }
          if (liste.length > 2) {
            enleve_element(liste, liste[1]); //on supprime le plus petit diviseur (autre que 1)
          }

          let somme = choice(liste, [1]); // la somme doit Ãªtre un diviseur diffÃ©rent de 1
          c = randint(1, somme - 1);
          d = somme - c;
          texte = `$${a}\\times${b}\\div(${c}+${d})$`;
          texte_corr = `$${a}\\times${b}\\div(${mise_en_evidence(
            c + `+` + d
          )})=${mise_en_evidence(a + "\\times" + b)}\\div${c + d}=${a * b
            }\\div${c + d}=${(a * b) / (c + d)}$`;
          break;
        case 22:
          a = randint(2, 11);
          c = randint(2, 11);
          b = c * randint(2, 5);
          d = randint(2, 6);
          texte = `$${a}\\times(${b}\\div${c}+${d})$`;
          texte_corr = `$${a}\\times(${mise_en_evidence(
            b + `\\div` + c
          )}+${d})=${a}\\times(${mise_en_evidence(
            b / c + `+` + d
          )})=${a}\\times${b / c + d}=${a * (b / c + d)}$`;
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de calculs",
    3,
    "1 : Sans parenthÃ¨ses\n2: Avec parenthÃ¨ses\n3: Avec ou sans parenthÃ¨ses",
  ];
}

/**
 * @Auteur RÃ©mi Angot
 */
function Code_LaTeX_personnalise() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Code LaTeX personnalisÃ©";
  this.pas_de_version_HMTL = true;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "%Votre code LaTeX";
  this.sup2 = "%Votre code LaTeX pour le corrigÃ©";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_texte = [
    "Code LaTeX Ã©noncÃ©",
    "Par exemple : \\input{mon_fichier}",
  ]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  this.besoin_formulaire2_texte = [
    "Code LaTeX correction",
    "Par exemple : \\input{mon_fichier_corr}",
  ];
  this.besoin_formulaire_case_a_cocher = false; // Sinon this.besoin_formulaire_case_a_cocher = [texte];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.contenu = this.sup;
    this.contenu_correction = this.sup2;
  };
}

/**
 * @Auteur RÃ©mi Angot
 */
function HTML_personnalise() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Exercice personnalisÃ©";
  this.pas_de_version_HMTL = false;
  this.pas_de_version_LaTeX = true;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "ÃnoncÃ© de l'exercice";
  this.sup2 = "ÃnoncÃ© de la correction";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_long_texte = ["Exercice"]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  this.besoin_formulaire2_texte = ["Correction"];
  this.besoin_formulaire_case_a_cocher = false; // Sinon this.besoin_formulaire_case_a_cocher = [texte];

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.contenu = this.sup;
    this.contenu_correction = this.sup2;
  };
}
/**
 * @Auteur Jean-Claude Lhote
 * publiÃ© le 14/12/2020
 * RÃ©f : 6G25-3
 * Trouver une figure symÃ©trique dans un pavage. SymÃ©trie axiale. 6 pavages diffÃ©rents.
 */
function Pavage_et_reflexion2d() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Trouver l\'image d'une figure par une symÃ©trie axiale dans un pavage";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_questions_modifiable = true;
  this.correction_detaillee=true;
  this.correction_detaillee_disponible=true;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1; // 1 pour des pavages modestes, 2 pour des plus grand.
  this.sup2=false // On cache les centres par dÃ©faut.
  this.sup3=7;
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.nouvelle_version = function (numero_de_l_exercice) {
    let videcouples=function(tableau){
      for (let k=0;k<tableau.length;k++){
        for (let j=k+1;j<tableau.length;j++){
          if (tableau[k][1]==tableau[j][0]) {
            tableau.splice(j,1)
          }
        }
      }
      return tableau
    }
    let compare2polys=function(poly1,poly2){
      if (comparenbsommets(poly1,poly2)) {
        if (comparesommets(poly1,poly2)) 
          return true
        else
          return false
      }
      else 
        return false 
      }
      let comparenbsommets = function(poly1,poly2){
        if (poly1.listePoints.length==poly2.listePoints.length){
          return true
        }
        else return false
      }
      
      let compare2sommets=function(sommet1,sommet2){
        if (egal(sommet1.x,sommet2.x,0.1)&&egal(sommet1.y,sommet2.y,0.1)) {
          return true
        }
        else return false
      }
      let comparesommets = function(poly1,poly2){
        let trouve=false,trouves=0
        if (comparenbsommets(poly1,poly2))
        for (let P of poly1.listePoints) {
          for (let M of poly2.listePoints) {
            if (compare2sommets(M,P)) {
              trouve=true
            }
            if (trouve) break
          }
          if (trouve) {
            trouves++
            trouve=false
          }
          else {
            trouves-=100
          }
          if (trouves<0)
          break
        }
        if (trouves==poly1.listePoints.length)
          return true
        else return false
      }
 /*     let associesommets=function(poly1,poly2,d){ //Pour chercher les indices des symÃ©triques dans leur polygone respectif
        let binomes=[],P,M   
        for (let k=0;k<poly1.listePoints.length;k++) { // afin Ã©ventuellement de faire clignoter ces paires de points lors de la correction
          P=symetrieAxiale(poly1.listePoints[k],d)
          for (let l=0;l<poly2.listePoints.length;l++) {
            M=poly2.listePoints[l]
            if (compare2sommets(M,P)) {
              binomes.push([k,l])
              break
            }
          }
        }
        return binomes
      }
  */  
    let refleccion = function (pavage, d, numero) { // retourne le numero du polygone symÃ©trique ou -1 si il n'existe pas
      let poly=pavage.polygones[numero-1],pol
      let result=-1
      let sympoly=symetrieAxiale(poly,d)
      for (let k= 0;k<pavage.polygones.length;k++) {
        pol=pavage.polygones[k]
        if (compare2polys(sympoly,pol)) {
          return k+1
        }
      }
      return result
    } 

    let objets=[],objets_correction=[],symetriques=[],P1,P2,P3,t
    let codes=['/','//','///','o','w','X','U','*']
    let taillePavage=parseInt(this.sup)
    if (taillePavage<1||taillePavage>2) {
      taillePavage=1
    }
    if (this.nb_questions>5) {
      taillePavage=2
    }
    this.liste_corrections = []
    this.liste_questions = []
    let Nx,Ny,index1,index2,A,B,d,image,couples=[],tailles=[],monpavage,fenetre
    let texte = "", texte_corr = "", type_de_pavage = parseInt(this.sup)
    let nombreTentatives,nombrePavageTestes=1
    if (this.sup3==8) {
      type_de_pavage =  randint(1,7)
    }
    else {
      type_de_pavage=parseInt(this.sup3)
    }
    while (couples.length<this.nb_questions&&nombrePavageTestes<7){
      nombreTentatives=0
    monpavage = pavage() // On crÃ©e l'objet Pavage qui va s'appeler monpavage
    tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2],[3,2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2],[5,3]]]
    Nx = tailles[taillePavage-1][type_de_pavage-1][0]
    Ny = tailles[taillePavage-1][type_de_pavage-1][1]
    monpavage.construit(type_de_pavage, Nx, Ny, 3) // On initialise toutes les propriÃ©tÃ©s de l'objet.
    fenetre=monpavage.fenetre
    fenetreMathalea2d=[fenetre.xmin,fenetre.ymin,fenetre.xmax,fenetre.ymax]
    while (couples.length<this.nb_questions+2&&nombreTentatives<3) { // On cherche d pour avoir suffisamment de couples
    couples=[] // On vide la liste des couples pour une nouvelle recherche
    index1=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3)) // On choisit 2 points dans 2 polygones distincts.
    index2=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3),index1) 
    A=monpavage.polygones[index1].listePoints[randint(0,2)] // On les choisit dans les trois premiers
    B=monpavage.polygones[index2].listePoints[randint(0,2)] // points pour Ã©viter un point qui n'Ã©xiste pas
    while (compare2sommets(A,B)){ // On vÃ©rifie qu'ils sont bien distincts sinon, on change.
      index1=randint(0,monpavage.nb_polygones-1) 
      index2=randint(0,monpavage.nb_polygones-1,index1)
      A=monpavage.polygones[index1].listePoints[randint(0,2)] // idem ci-dessus
      B=monpavage.polygones[index2].listePoints[randint(0,2)] // mais Ã  la sortie du While A!=B
    }
    d=mediatrice(A,B,'(d)','red') // l'axe sera la droite passant par ces deux points si Ã§a fonctionne
    d.epaisseur=3
    for (let i=1;i<= monpavage.nb_polygones; i++){ //on crÃ©e une liste des couples (antÃ©cÃ©dents, images)
      image=refleccion(monpavage,d,i)
      if (image!=-1){ // si l'image du polygone i existe, on ajoute le couple Ã  la liste
        couples.push([i,image])
      }
    }
    couples=videcouples(couples) //supprime tous les couples en double (x,y)=(y,x)
    nombreTentatives++ 
    }
    if (couples.length<this.nb_questions){
    if (this.sup3==7) {
      type_de_pavage=(type_de_pavage+1)%5+1
    }
    nombrePavageTestes++
    }
  }
  if (couples.length<this.nb_questions){
    console.log('trop de questions, augmentez la taille du pavage')
    return
  }

    objets.push(d) // la droite d est trouvÃ©e
    couples=shuffle(couples) // on mÃ©lange les couples
    for (let i = 0; i < monpavage.nb_polygones; i++) {
      objets.push(texteParPosition(nombre_avec_espace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))
    }
    if (this.sup2) { // Doit-on montrer les centres des figures ?
      for (let i = 0; i < monpavage.nb_polygones; i++) {
        objets.push(monpavage.tracesCentres[i])
      }
    }
    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage
      objets.push(monpavage.polygones[i])
    }
    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrÃ©e pour faire entrer le pavage dans une feuille A4
    texte+=`<br>`
    for (let i=0;i<this.nb_questions;i++){  
      texte+=`Quel est l'image de la figure $${couples[i][0]}$ dans la symÃ©trie d'axe $(d)$ ?<br>`
      texte_corr+=`L'image de la figure $${couples[i][0]}$ dans la symÃ©trie d'axe $(d)$ est la figure ${couples[i][1]}<br>`
//      symetriques=associesommets(monpavage.polygones[couples[i][0]-1],monpavage.polygones[couples[i][1]-1],d)
      if (this.correction_detaillee){
        t=this.nb_questions*3;
        A=monpavage.barycentres[couples[i][0]-1]
        B=monpavage.barycentres[couples[i][1]-1]
        P1=monpavage.polygones[couples[i][0]-1]
        P1.color=texcolors(i)
        P1.couleurDeRemplissage=texcolors(i)
        P1.opaciteDeRemplissage=0.5
        P1.epaisseur=2
        P2=monpavage.polygones[couples[i][1]-1]
        P2.color=texcolors(i)
        P2.couleurDeRemplissage=texcolors(i)
        P2.opaciteDeRemplissage=0.5
        P2.epaisseur=2
        P3=symetrieAnimee(P1,d,`begin="${i*3}s;${i*3+t}s;${i*3+t*2}s" end="${i*3+2}s;${i*3+t+2}s;${i*3+t*2+2}s" dur="2s" repeatCount="indefinite" repeatDur="${9*this.nb_questions}s" id="poly-${i}-anim"`)
        P3.color=texcolors(i)
        P3.epaisseur=2
        objets_correction.push(tracePoint(A,B),segment(A,B,texcolors(i)),codageMediatrice(A,B,texcolors(i),codes[i]),P1,P2,P3)
      }
    }
    if (this.correction_detaillee){
      texte_corr+=mathalea2d(fenetre, objets,objets_correction)
    }
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this)
  }
	this.besoin_formulaire_numerique = ['Taille du pavage (la grande est automatique au-delÃ  de 5 questions)', 2, '1 : Taille modeste\n 2 : Grande taille'];
  this.besoin_formulaire2_case_a_cocher=["Montrer les centres"]
  this.besoin_formulaire3_numerique=['Choix du pavage',8,'1 : Pavage de triangles Ã©quilatÃ©raux\n2 : Pavage de carrÃ©s\n3 : Pavage d\'hexagones rÃ©guliers\n4 : Pavage 3Â².4.3.4\n5 : Pavage 8Â².4\n 6 : Pavage de losanges (hexagonal d\'Ã©colier)\n7 : Pavage 6.3.6.3\n8 : Un des sept pavages au hasard']
}
/**
 * Pavages et symÃ©trie axiale.
 * Pas de version LaTeX
 * @Auteur Jean-Claude Lhote
 * PubliÃ© en 02/2020
 * rÃ©fÃ©rence 6G25-1
 */
function Pavages_et_reflexion() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie axiale dans un pavage triangulaire (sortie Latex Impossible)";
  this.pas_de_version_LaTeX = true;
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  // this.sup = 1; // 1 pour les 6Ã¨me, 2 pour les 5Ã¨mes, 3 pour les 4Ã¨mes, et 4 pour les 3Ã¨mes.
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.MG32editable = false;
    this.taille_div_MG32 = [700, 700];
    this.MG32codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAIP#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAEQAAFPAAAAAAAAAAAAQAgAAAAAAAAFAAFATMAAAAAAAEBTYUeuFHri#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAARAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQF6AAAAAAAAAAAAC#####wAAAAEAB0NDYWxjdWwA#####wAEem9vbQABOAAAAAFAIAAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAAAf####8AAAABAApDT3BlcmF0aW9uAwAAAAE#8AAAAAAAAAAAAAcBAAAAAUA0AAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAADAAAABf####8AAAABAAlDUm90YXRpb24A#####wAAAAH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBOAAAAAAAAAAAACQD#####AQAAAAEQAAFKAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAYAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAAGAAAACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAUA#####wACeEIAATYAAAABQBgAAAAAAAAAAAAFAP####8AAnlCAAEwAAAAAQAAAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAABEAABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAAAoAAAAIAAAACwAAAAUA#####wACeEMAATAAAAABAAAAAAAAAAAAAAAFAP####8AAnlDAAE2AAAAAUAYAAAAAAAAAAAADQD#####AQAAAAEQAAFDAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAADQAAAAgAAAAOAAAABQD#####AAN4TTEAAjQwAAAAAUBEAAAAAAAAAAAABQD#####AAN5TTEAATAAAAABAAAAAAAAAAAAAAANAP####8BAAAAABAAAk0xAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAAEAAAAAgAAAARAAAADQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAP####8AAAABAAxDVHJhbnNsYXRpb24A#####wAAABMAAAABAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAABQAAAAOAP####8AAAABAAAAFQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAAWAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAABYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAFv####8AAAABAAlDUG9seWdvbmUA#####wAAfwAAAQAAAAQAAAAXAAAAGAAAABkAAAAX#####wAAAAEAEENTdXJmYWNlUG9seWdvbmUA#####wAAfwAAAAAFAAAAGgAAAAUA#####wACbngAATcAAAABQBwAAAAAAAAAAAAFAP####8AAm55AAE3AAAAAUAcAAAAAAAAAAAADAD#####AObm5gABAAAAAQAAAAwAAAAPAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAAAAAADQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAHgAAAAgAAAAcAAAACAAAAB3#####AAAAAQAHQ01pbGlldQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAB8AAAAFAP####8AA3hOMwABOAAAAAFAIAAAAAAAAAAAAAUA#####wADeU4zAAEyAAAAAUAAAAAAAAAAAAAABQD#####AAN4TTMAATQAAAABQBAAAAAAAAAAAAAFAP####8AA3lNMwACMTAAAAABQCQAAAAAAAAAAAANAP####8BAAD#ABAAAk4zAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAAIQAAAAgAAAAiAAAADQD#####AQAA#wAQAAJNMwAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACMAAAAIAAAAJP####8AAAABAAtDTWVkaWF0cmljZQD#####AAAA#wAQAAABAAIAAAAlAAAAJgAAAAUA#####wADeE4yAAEwAAAAAQAAAAAAAAAAAAAABQD#####AAN5TjIAATYAAAABQBgAAAAAAAAAAAAFAP####8AA3lNMgABNgAAAAFAGAAAAAAAAAAAAAUA#####wADeE0yAAEwAAAAAQAAAAAAAAAAAAAADQD#####AQB#AAAQAAJOMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACgAAAAIAAAAKQAAAA0A#####wEAfwAAEAACTTIAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAArAAAACAAAACoAAAAFAP####8AA3hOMQACNDIAAAABQEUAAAAAAAAAAAAFAP####8AA3lOMQABMgAAAAFAAAAAAAAAAAAAAA0A#####wEAAAAAEAACTjEAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAuAAAACAAAAC8AAAASAP####8AAH8AARAABChkMSkBAAI#7MzMzMzMzQAAADAAAAAS#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAADAAAAAcBAAAACAAAABwAAAABP#AAAAAAAAD#####AAAAAQAIQ1NlZ21lbnQA#####wAAAAAAEAAAAQABAAAAAQAAADIAAAATAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAADwAAAAcBAAAACAAAAB0AAAABP#AAAAAAAAAAAAAEAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAAAAAAAAAAAAzAAAADgD#####AAAAAQAAADQAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA1AAAANgAAABQA#####wEAAAAAEAAAAQABAAAANQAAADcAAAAEAP####8BAAAAARAAAVUAAAAAAAAAAABACAAAAAAAAAUAAT#Q3iTV#EVNAAAAOP####8AAAACAA1DTWVzdXJlQWZmaXhlAP####8AAXoAAAAeAAAAOf####8AAAABAA1DRm9uY0NvbXBsZXhlAP####8AA251bQASMipyZSh6KSsyKm54KmltKHopAAAABwAAAAAHAgAAAAFAAAAAAAAAAP####8AAAACAAlDRm9uY3Rpb25M#####wAAAAIAEUNWYXJpYWJsZUZvcm1lbGxlAAAAAAAAAAcCAAAABwIAAAABQAAAAAAAAAD#####AAAAAQAXQ1Jlc3VsdGF0VmFsZXVyQ29tcGxleGUAAAAcAAAAF00AAAAYAAAAAAABegAAAA8A#####wH#AP8AAQAAAAQAAAABAAAADAAAAA8AAAAB#####wAAAAIACENNZXN1cmVZAP####8AAnlVAAAACQAAADn#####AAAAAgAIQ01lc3VyZVgA#####wACeFUAAAAJAAAAOQAAAA4A#####wAAAAEAAAA5AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAPwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAAA#AAAADwD#####AQAAAAABAAAABAAAAEAAAABBAAAAQgAAAED#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAP####8AAAAAAAAAQwAAAAgAAAAdAAAAOQAAAAYAAAA5AAAAPwAAAEAAAABBAAAAQgAAAEMAAAAcAP####8AAAAAAAAARAAAAAgAAAAcAAAANQAAAAoAAAA1AAAANwAAADgAAAA5AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAACgD#####AAAADAAAAAFATgAAAAAAAAAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABGAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAEYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAARgAAAA8A#####wH#AP8ABAAAAAQAAABHAAAASAAAAEkAAABHAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAPwAAAAkA#####wEAAAAAEAABQQAAAAAAAAAAAEAIAAAAAAAABQAAAABJAAAAPwAAAA8A#####wEAAAAAAQAAAAQAAABLAAAATAAAAE0AAABLAAAAHAD#####AQAAAAAAAE4AAAAIAAAAHQAAADkAAAAGAAAAOQAAAD8AAABLAAAATAAAAE0AAABOAAAAHAD#####AAAAAAAAAE8AAAAIAAAAHAAAADUAAAAKAAAANQAAADcAAAA4AAAAOQAAAD8AAABLAAAATAAAAE0AAABOAAAATwAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADkAAABNAAAAAT#VVUdaMaS+AAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAOQAAAE0AAAABP+VVR1oxpL4AAAAFAP####8AA3hVJwAbaW50KHhVKjEwMDAwMDArMC41KS8xMDAwMDAwAAAABwMAAAAXAgAAAAcAAAAABwIAAAAIAAAAPgAAAAFBLoSAAAAAAAAAAAE#4AAAAAAAAAAAAAFBLoSAAAAAAAAAAAUA#####wADeVUnABtpbnQoeVUqMTAwMDAwMCswLjUpLzEwMDAwMDAAAAAHAwAAABcCAAAABwAAAAAHAgAAAAgAAAA9AAAAAUEuhIAAAAAAAAAAAT#gAAAAAAAAAAAAAUEuhIAAAAAA#####wAAAAEAD0NDYWxjdWxDb21wbGV4ZQD#####AAJ6VQAJeFUnK2kqeVUnAAAABwAAAAAZAAAAUwAAAAcC#####wAAAAEAC0NDb25zdGFudGVpAAAAGQAAAFQAAAAdAP####8ABG51bVUABm51bSh6Kf####8AAAABABZDQXBwZWxGb25jdGlvbkNvbXBsZXhlAAAAOwAAABkAAAA6#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAADAMQAAAAAAAMAkAAAAAAAAAAAAURAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAIAAABWAAAAHQD#####AAVudW1VMQAGbnVtVSsxAAAABwAAAAAZAAAAVgAAAAE#8AAAAAAAAAAAACAA#####wEAAAAAwC4AAAAAAADAIAAAAAAAAAAAAFIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAWAAAABwA#####wAAAAAAAABXAAAACAAAAB0AAAA5AAAABwAAADkAAAA6AAAAPwAAAE0AAABRAAAAVgAAAFcAAAAcAP####8AAAAAAAAAWgAAAAgAAAAcAAAANQAAAAsAAAA1AAAANwAAADgAAAA5AAAAOgAAAD8AAABNAAAAUQAAAFYAAABXAAAAWgAAABwA#####wAAAAAAAABZAAAACAAAAB0AAAA5AAAACAAAADkAAAA6AAAAPwAAAE0AAABSAAAAVgAAAFgAAABZAAAAHAD#####AAAAAAAAAFwAAAAIAAAAHAAAADUAAAAMAAAANQAAADcAAAA4AAAAOQAAADoAAAA#AAAATQAAAFIAAABWAAAAWAAAAFkAAABcAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAABQAAAAOAP####8AAAABAAAAXgAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABfAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAF8AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAXwAAAA8A#####wD#AAAAAgAAAAQAAABgAAAAYQAAAGIAAABgAAAAEAD#####AP8AAAAAAAUAAABjAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAJgAAABQAAAAOAP####8AAAABAAAAZQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAABmAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAZgAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAUAAAADgD#####AAAAAQAAABMAAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAATAAAAawAAAA4A#####wAAAGwAAAAmAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARwAAAG0AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABIAAAAbQAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEkAAABtAAAADwD#####AAAA#wABAAAABAAAAG4AAABvAAAAcAAAAG4AAAAQAP####8AAAD#AAAABQAAAHEAAAAOAP####8AAAABAAAADwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADQAAABzAAAAFAD#####AAAAAAAQAAABAAEAAAB0AAAAH#####8AAAABABBDSW50RHJvaXRlRHJvaXRlAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAxAAAAM#####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAfwAAQDUAAAAAAADARQAAAAAAAQAAAHYQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAAUAP####8AAAD#ABAAAAEAAQAAAAEAAAA0AAAAIQD#####AQAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAeAAAACcAAAAiAP####8AAAD#AMBAAAAAAAAAwAgAAAAAAAAAAAB5EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMykpAAAAIQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAMQAAAHUAAAAiAP####8AAH8AAMBEgAAAAAAAP#AAAAAAAAAAAAB7EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMSkpAAAAEQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAALQAAACz#####AAAAAQAJQ0Ryb2l0ZU9tAP####8A#wAAABAAAAEAAgAAAAkAAAB9AAAAAT#wAAAAAAAAAAAAIQD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAfgAAADMAAAAiAP####8A#wAAAMA1AAAAAAAAwEKAAAAAAAAAAAB#EAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMikpAAAAIQD#####AP8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAfgAAAHUAAAAiAP####8A#wAAAMAUAAAAAAAAQCYAAAAAAAAAAACBEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woMikp################";
    this.MG32codeBase64corr =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wEAAAAAAAAAAAUcAAAC0gAAAQEAAAAAAAAAAQAAAMz#####AAAAAQAKQ0NhbGNDb25zdAD#####AAJwaQAWMy4xNDE1OTI2NTM1ODk3OTMyMzg0Nv####8AAAABAApDQ29uc3RhbnRlQAkh+1RELRj#####AAAAAQAKQ1BvaW50QmFzZQD#####AAAAAAEQAAFPAAAAAAAAAAAAQAgAAAAAAAAFAAFATMAAAAAAAEBTYUeuFHri#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8BAAAAARAAAAEAAQAAAAEBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQF6AAAAAAAAAAAAC#####wAAAAEAB0NDYWxjdWwA#####wAEem9vbQABOAAAAAFAIAAAAAAAAP####8AAAABAAtDSG9tb3RoZXRpZQD#####AAAAAf####8AAAABAApDT3BlcmF0aW9uAwAAAAE#8AAAAAAAAAAAAAcBAAAAAUA0AAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAT#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAABEAABSQAAAAAAAAAAAEAIAAAAAAAABQAAAAADAAAABf####8AAAABAAlDUm90YXRpb24A#####wAAAAH#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAUBOAAAAAAAAAAAACQD#####AQAAAAEQAAFKAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAYAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAAGAAAACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAAAAAAUA#####wACeEIAATYAAAABQBgAAAAAAAAAAAAFAP####8AAnlCAAEwAAAAAQAAAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAABEAABQgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAAAoAAAAIAAAACwAAAAUA#####wACeEMAATAAAAABAAAAAAAAAAAAAAAFAP####8AAnlDAAE2AAAAAUAYAAAAAAAAAAAADQD#####AQAAAAEQAAFDAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAADQAAAAgAAAAOAAAABQD#####AAN4TTEAATgAAAABQCAAAAAAAAAAAAAFAP####8AA3lNMQABMgAAAAFAAAAAAAAAAAAAAA0A#####wEAAAAAEAACTTEAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAQAAAACAAAABEAAAANAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAAA#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAAEwAAAAEAAAAJAP####8BAAAAABAAAVcAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAABQAAAAOAP####8AAAABAAAAFQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAAWAAAACQD#####AQAAAAAQAAFYAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAwAAAAWAAAACQD#####AQAAAAAQAAFZAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAAAW#####wAAAAEACUNQb2x5Z29uZQD#####AQB#AAABAAAABAAAABcAAAAYAAAAGQAAABf#####AAAAAQAQQ1N1cmZhY2VQb2x5Z29uZQD#####AQB#AAAAAAUAAAAaAAAABQD#####AAJueAABNwAAAAFAHAAAAAAAAAAAAAUA#####wACbnkAATcAAAABQBwAAAAAAAAAAAAMAP####8A5ubmAAEAAAABAAAADAAAAA8AAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAAAAAANAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAeAAAACAAAABwAAAAIAAAAHf####8AAAABAAdDTWlsaWV1AP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAHwAAAAUA#####wADeE4zAAIyNgAAAAFAOgAAAAAAAAAAAAUA#####wADeU4zAAEyAAAAAUAAAAAAAAAAAAAABQD#####AAN4TTMAAjE2AAAAAUAwAAAAAAAAAAAABQD#####AAN5TTMAAjIyAAAAAUA2AAAAAAAAAAAADQD#####AQAA#wAQAAJOMwAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACEAAAAIAAAAIgAAAA0A#####wEAAP8AEAACTTMAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAAjAAAACAAAACT#####AAAAAQALQ01lZGlhdHJpY2UA#####wEAAP8AEAAAAQACAAAAJQAAACYAAAAFAP####8AA3hOMgACMTQAAAABQCwAAAAAAAAAAAAFAP####8AA3lOMgABMgAAAAFAAAAAAAAAAAAAAAUA#####wADeU0yAAIxNAAAAAFALAAAAAAAAAAAAAUA#####wADeE0yAAEyAAAAAUAAAAAAAAAAAAAADQD#####AQB#AAAQAAJOMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAJAAAACAAAACgAAAAIAAAAKQAAAA0A#####wEAfwAAEAACTTIAAAAAAAAAAABACAAAAAAAAAUAAAAACQAAAAgAAAArAAAACAAAACoAAAAFAP####8AA3hOMQACMTYAAAABQDAAAAAAAAAAAAAFAP####8AA3lOMQACMTAAAAABQCQAAAAAAAAAAAANAP####8BAAAAABAAAk4xAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAkAAAAIAAAALgAAAAgAAAAvAAAAEgD#####AQB#AAEQAAQoZDEpAQACP+zMzMzMzM0AAAAwAAAAEv####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAAwAAAAHAQAAAAgAAAAcAAAAAT#wAAAAAAAA#####wAAAAEACENTZWdtZW50AP####8AAAAAABAAAAEAAQAAAAEAAAAyAAAAEwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAA8AAAAHAQAAAAgAAAAdAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAAAAAAAAAAAAMwAAAA4A#####wAAAAEAAAA0AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANQAAADYAAAAUAP####8BAAAAABAAAAEAAQAAADUAAAA3AAAABAD#####AQAAAAEQAAFVAAAAAAAAAAAAQAgAAAAAAAAFAAE#0N4k1fxFTQAAADj#####AAAAAgANQ01lc3VyZUFmZml4ZQD#####AAF6AAAAHgAAADn#####AAAAAQANQ0ZvbmNDb21wbGV4ZQD#####AANudW0AEjIqcmUoeikrMipueCppbSh6KQAAAAcAAAAABwIAAAABQAAAAAAAAAD#####AAAAAgAJQ0ZvbmN0aW9uTP####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAAHAgAAAAcCAAAAAUAAAAAAAAAA#####wAAAAEAF0NSZXN1bHRhdFZhbGV1ckNvbXBsZXhlAAAAHAAAABdNAAAAGAAAAAAAAXoAAAAPAP####8B#wD#AAEAAAAEAAAAAQAAAAwAAAAPAAAAAf####8AAAACAAhDTWVzdXJlWQD#####AAJ5VQAAAAkAAAA5#####wAAAAIACENNZXN1cmVYAP####8AAnhVAAAACQAAADkAAAAOAP####8AAAABAAAAOQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAEAAAA#AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAD8AAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAPAAAAPwAAAA8A#####wEAAAAAAQAAAAQAAABAAAAAQQAAAEIAAABA#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AAAAAAAAAEMAAAAIAAAAHQAAADkAAAAGAAAAOQAAAD8AAABAAAAAQQAAAEIAAABDAAAAHAD#####AAAAAAAAAEQAAAAIAAAAHAAAADUAAAAKAAAANQAAADcAAAA4AAAAOQAAAD8AAABAAAAAQQAAAEIAAABDAAAARAAAAAoA#####wAAAAwAAAABQE4AAAAAAAAAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAARgAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAwAAABGAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAADwAAAEYAAAAPAP####8B#wD#AAQAAAAEAAAARwAAAEgAAABJAAAARwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEcAAAA#AAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASAAAAD8AAAAJAP####8BAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAD8AAAAPAP####8BAAAAAAEAAAAEAAAASwAAAEwAAABNAAAASwAAABwA#####wEAAAAAAABOAAAACAAAAB0AAAA5AAAABgAAADkAAAA#AAAASwAAAEwAAABNAAAATgAAABwA#####wAAAAAAAABPAAAACAAAABwAAAA1AAAACgAAADUAAAA3AAAAOAAAADkAAAA#AAAASwAAAEwAAABNAAAATgAAAE8AAAATAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA5AAAATQAAAAE#1VVHWjGkvgAAABMA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADkAAABNAAAAAT#lVUdaMaS+AAAABQD#####AAN4VScAG2ludCh4VSoxMDAwMDAwKzAuNSkvMTAwMDAwMAAAAAcDAAAAFwIAAAAHAAAAAAcCAAAACAAAAD4AAAABQS6EgAAAAAAAAAABP+AAAAAAAAAAAAABQS6EgAAAAAAAAAAFAP####8AA3lVJwAbaW50KHlVKjEwMDAwMDArMC41KS8xMDAwMDAwAAAABwMAAAAXAgAAAAcAAAAABwIAAAAIAAAAPQAAAAFBLoSAAAAAAAAAAAE#4AAAAAAAAAAAAAFBLoSAAAAAAP####8AAAABAA9DQ2FsY3VsQ29tcGxleGUA#####wACelUACXhVJytpKnlVJwAAAAcAAAAAGQAAAFMAAAAHAv####8AAAABAAtDQ29uc3RhbnRlaQAAABkAAABUAAAAHQD#####AARudW1VAAZudW0oein#####AAAAAQAWQ0FwcGVsRm9uY3Rpb25Db21wbGV4ZQAAADsAAAAZAAAAOv####8AAAABAA9DVmFsZXVyQWZmaWNoZWUA#####wEAAAAAwDEAAAAAAADAJAAAAAAAAAAAAFEQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAACAAAAVgAAAB0A#####wAFbnVtVTEABm51bVUrMQAAAAcAAAAAGQAAAFYAAAABP#AAAAAAAAAAAAAgAP####8BAAAAAMAuAAAAAAAAwCAAAAAAAAAAAABSEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAgAAAFgAAAAcAP####8AAAAAAAAAVwAAAAgAAAAdAAAAOQAAAAcAAAA5AAAAOgAAAD8AAABNAAAAUQAAAFYAAABXAAAAHAD#####AAAAAAAAAFoAAAAIAAAAHAAAADUAAAALAAAANQAAADcAAAA4AAAAOQAAADoAAAA#AAAATQAAAFEAAABWAAAAVwAAAFoAAAAcAP####8AAAAAAAAAWQAAAAgAAAAdAAAAOQAAAAgAAAA5AAAAOgAAAD8AAABNAAAAUgAAAFYAAABYAAAAWQAAABwA#####wAAAAAAAABcAAAACAAAABwAAAA1AAAADAAAADUAAAA3AAAAOAAAADkAAAA6AAAAPwAAAE0AAABSAAAAVgAAAFgAAABZAAAAXAAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC0AAAAUAAAADgD#####AAAAAQAAAF4AAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAABAAAAXwAAAAkA#####wH#AP8AEAABUQAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAXwAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAABfAAAADwD#####Af8AAAACAAAABAAAAGAAAABhAAAAYgAAAGAAAAAQAP####8B#wAAAAAABQAAAGMAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAmAAAAFAAAAA4A#####wAAAAEAAABlAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAAQAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAMAAAAZgAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA8AAABmAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAJgAAABQAAAAOAP####8AAAABAAAAEwAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABMAAABrAAAADgD#####AAAAbAAAACYAAAAJAP####8B#wD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABHAAAAbQAAAAkA#####wH#AP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEgAAABtAAAACQD#####Af8A#wAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASQAAAG0AAAAPAP####8BAAD#AAEAAAAEAAAAbgAAAG8AAABwAAAAbgAAABAA#####wEAAP8AAAAFAAAAcQAAAA4A#####wAAAAEAAAAPAAAACQD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAANAAAAHMAAAAUAP####8AAAAAABAAAAEAAQAAAHQAAAAf#####wAAAAEAEENJbnREcm9pdGVEcm9pdGUA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAADEAAAAz#####wAAAAIADENDb21tZW50YWlyZQD#####AQB#AABANQAAAAAAAMBFAAAAAAABAAAAdhAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAABQA#####wAAAP8AEAAAAQABAAAAAQAAADQAAAAhAP####8BAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAB4AAAAJwAAACIA#####wEAAP8AwEAAAAAAAADACAAAAAAAAAAAAHkQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgzKSkAAAAhAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAxAAAAdQAAACIA#####wAAfwAAwESAAAAAAAA#8AAAAAAAAAAAAHsQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgxKSkAAAARAP####8BAH8AABAAAkgyAAAAAAAAAAAAQAgAAAAAAAAFAAAAAC0AAAAs#####wAAAAEACUNEcm9pdGVPbQD#####Af8AAAAQAAABAAIAAAAJAAAAfQAAAAE#8AAAAAAAAAAAACEA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAH4AAAAzAAAAIgD#####Af8AAADANQAAAAAAAMBCgAAAAAAAAAAAfxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDIpKQAAACEA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAH4AAAB1AAAAIgD#####Af8AAADAFAAAAAAAAEAmAAAAAAAAAAAAgRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDIpKQAAABEA#####wEAfwAAEAACSDEAAAAAAAAAAABACAAAAAAAAAUAAAAAEgAAADAAAAAUAP####8BAH8AABAAAAEAAgAAABIAAAAwAAAABAD#####AQB#AAEQAANNJzEAAAAAAAAAAABACAAAAAAAAAUAAT#YiIhSPtDkAAAAhP####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAM#####wAAAAIAD0NNZXN1cmVBYnNjaXNzZQD#####AAJrMQAAAIMAAAASAAAAhQAAAAYA#####wAAAIMAAAAIAAAAhwAAAAkA#####wEAfwAAEAACVycAAAAAAAAAAABACAAAAAAAAAUAAAAAFQAAAIj#####AAAAAQANQ1BvaW50UHJvamV0ZQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAGAAAADEAAAAGAP####8AAACKAAAACAAAAIcAAAAJAP####8BAH8AABAAAlgnAAAAAAAAAAAAQAgAAAAAAAAFAAAAABgAAACLAAAAJgD#####AQB#AAAQAAJZJwAAAAAAAAAAAEAIAAAAAAAABQAAAAAZAAAAMQAAAAYA#####wAAAI0AAAAIAAAAhwAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAACOAAAADwD#####AQB#AAACAAAABAAAAIkAAACMAAAAjwAAAIkAAAAQAP####8BAH8AAAAABQAAAJD#####AAAAAQAPQ1N5bWV0cmllQXhpYWxlAP####8AAAAxAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAFwAAAJIAAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAAYAAAAkgAAAAkA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAABkAAACSAAAADwD#####AQB#AAACAAAABAAAAJMAAACUAAAAlQAAAJMAAAAQAP####8BAH8AAAAABQAAAJb#####AAAAAgAXQ01hY3JvQW5pbWF0aW9uUG9pbnRMaWUA#####wAAfwAB#####wpAi1QAAAAAAEA#hR64UeuGAgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAFYW5pbTEAAAAAAAAUAAAAZAAAADwAAACFAAEA#####wAAAAEAEUNNYWNyb0Rpc3Bhcml0aW9uAP####8AAH8AAf####8KQIs8AAAAAABAT8KPXCj1wwIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTEAAAAAAAgAAACRAAAAkAAAABsAAAAaAAAAMQAAAHcAAACXAAAAlv####8AAAABABBDTWFjcm9BcHBhcml0aW9uAP####8AAH8AAf####8KQItEAAAAAABAV+FHrhR64gIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MQAAAAAACAAAAJEAAACQAAAAGwAAABoAAAAxAAAAdwAAAJcAAACWAP####8AAAABAAtDTWFjcm9QYXVzZQD#####AAB#AAH#####EECN1AAAAAAAQEJCj1wo9cMCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVQYXVzZQAAAAAAAf####8AAAABABFDTWFjcm9TdWl0ZU1hY3JvcwD#####AAB#AAH#####EEBTYAAAAAAAQCMKPXCj1wwCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGEAAAAAAAQAAACaAAAAmAAAAJkAAACbAAAAFAD#####AQB#AAAQAAABAAIAAAAtAAAALAAAAAQA#####wEAfwAAEAADTScyAAAAAAAAAAAAQAgAAAAAAAAFAAE#089zR#b9RQAAAJ0AAAAlAP####8AAmsyAAAAfQAAAC0AAACeAAAAJgD#####AAB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYAAAAH4AAAAGAP####8AAACgAAAACAAAAJ8AAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABgAAAAoQAAACYA#####wEAfwAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGIAAAB+AAAABgD#####AAAAowAAAAgAAACfAAAACQD#####AQB#AAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYgAAAKQAAAAJAP####8BAH8AABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABhAAAApAAAAA8A#####wH#AAAAAgAAAAQAAACiAAAApQAAAKYAAACiAAAAEAD#####Af8AAAAAAAUAAACnAAAAKAD#####AP8AAAH#####CkCLlAAAAAAAQGKQo9cKPXECAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVhbmltMgAAAAAAABQAAABkAAAAPAAAAJ4AAQAAAAAnAP####8AAAB+AAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAYAAAAKoAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABhAAAAqgAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAGIAAACqAAAADwD#####Af8AAAACAAAABAAAAKsAAACsAAAArQAAAKsAAAAQAP####8B#wAAAAAABQAAAK4AAAApAP####8A#wAAAf####8KQIu0AAAAAABAZpCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTIAAAAAAAkAAABkAAAAYwAAAKgAAACnAAAArwAAAK4AAAB+AAAAggAAAIAAAAAqAP####8A#wAAAf####8KQIvMAAAAAABAahCj1wo9cQIAAAAAAAAAAAAAAAABAAAAAAAAAAAACWFwcGFyYWl0MgAAAAAACQAAAGQAAABjAAAAqAAAAKcAAACvAAAArgAAAH4AAACCAAAAgAAAAAAsAP####8A#wAAAf####8QQGhwAAAAAABAIwo9cKPXDAIAAAAAAAAAAAAAAAABAAAAAAAAAAAADENvcnJlY3Rpb24gYgAAAAAABAAAALEAAACpAAAAsAAAAJsAAAARAP####8B#wAAABAAAkgzAAAAAAAAAAAAQAgAAAAAAAAFAAAAACYAAAAlAAAAFAD#####Af8AAAAQAAABAAIAAAAmAAAAJQAAAAQA#####wH#AAAAEAADTSczAAAAAAAAAAAAQAgAAAAAAAAFAAE#0spidDyBMgAAALQAAAAlAP####8AAmszAAAAswAAACYAAAC1AAAAJgD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAbgAAACcAAAAmAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABwAAAAJwAAAAYA#####wAAALcAAAAIAAAAtgAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAG4AAAC5AAAABgD#####AAAAuAAAAAgAAAC2AAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAcAAAALsAAAAGAP####8AAACzAAAACAAAALYAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABvAAAAvQAAAA8A#####wEAAP8AAgAAAAQAAAC6AAAAvgAAALwAAAC6AAAAJwD#####AAAAJwAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAG4AAADAAAAACQD#####Af8AAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAbwAAAMAAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABwAAAAwAAAAA8A#####wEAAP8AAgAAAAQAAADBAAAAwgAAAMMAAADBAAAAEAD#####AQAA#wAAAAUAAADEAAAAEAD#####AQAA#wAAAAUAAAC#AAAAKAD#####AAAA#wH#####CkCL9AAAAAAAQHAoUeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAVhbmltMwAAAAAAABQAAABkAAAAPAAAALUAAQAAAAApAP####8AAAD#Af####8KQIwEAAAAAABAcjhR64UeuAIAAAAAAAAAAAAAAAABAAAAAAAAAAAAB21hc3F1ZTMAAAAAAAgAAAByAAAAcQAAAMYAAAC#AAAAxQAAAMQAAAAnAAAAegAAACoA#####wAAAP8B#####wpAjAwAAAAAAEB0CFHrhR64AgAAAAAAAAAAAAAAAAEAAAAAAAAAAAAJYXBwYXJhaXQzAAAAAAAIAAAAcgAAAHEAAADGAAAAvwAAAMUAAADEAAAAJwAAAHoAAAAALAD#####AAAA#wH#####EEBzWAAAAAAAQCUKPXCj1wwCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAxDb3JyZWN0aW9uIGMAAAAAAAQAAADJAAAAxwAAAJsAAADIAAAALAD#####AAAA#wH#####EECMdAAAAAAAQHb4UeuFHrgCAAAAAAAAAAAAAAAAAQAAAAAAAAAAAApDb3JyZWN0aW9uAAAAAAADAAAAnAAAALIAAADKAAAAhv##########";
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let texte = ``,
      texte_corr = ``;
    let tabfigA = [],
      tabfigB = [];
    let nx = 7,
      ny = 7,
      xB = 6,
      yB = 0,
      xC = 0,
      yC = 6,
      zoom = 8;
    let xM1, yM1, xN1, yN1, xM2, yM2, xN2, yN2, xM3, yM3, xN3, yN3;
    let trouver = false,
      indexa,
      numa,
      anum,
      indexaxe1,
      xmil1,
      ymil1,
      indexb,
      numb,
      bnum,
      indexaxe2,
      xmil2,
      ymil2,
      indexc,
      numc,
      cnum,
      indexaxe3,
      xmil3,
      ymil3;
    let point = [0, 0, 0];

    for (let y = 0; y < ny; y++) {
      // On initialise les tableaux avec les coordonnÃ©es des points de rÃ©fÃ©rence (A,B,C et D) de chaque translatÃ© et son numÃ©ro dans le pavage.
      for (let x = 0; x < nx; x++) {
        tabfigA.push([2 + x * 6, 2 + y * 6, 2 * x + 2 * y * nx]);
        tabfigB.push([4 + x * 6, 4 + y * 6, 2 * x + 2 * y * nx + 1]);
      }
    }

    // PremiÃ¨re question : une figure dans tabfigA, une symÃ©trie par rapport Ã  une droite parallÃ¨le Ã  y=-x, l'image est dans tabfigB	 !
    // L'axe de symÃ©trie est la mÃ©diatrice du segment d'extrÃ©mitÃ©s les centres de gravitÃ©s des figures A et B.

    indexa = randint(0, nx * ny - 1);
    numa = tabfigA[indexa][2];
    indexaxe1 = randint(0, nx * ny - 1); // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    //on calcule les coordonnÃ©es du milieu de [BC] on ajoute aux coordonnÃ©es du milieu de [BC] celles du vecteur BB'. (j'aurais pu rÃ©duire mais cela aurait rendu le calcul plus opaque)
    xmil1 = tabfigA[indexaxe1][0] - 2;
    ymil1 = tabfigA[indexaxe1][1] - 2;
    point = [tabfigA[indexa][0], tabfigA[indexa][1]];
    point = image_point_par_transformation(2, point, [xmil1, ymil1]);

    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigB[j][0] && point[1] == tabfigB[j][1]) {
          trouver = true;
          anum = tabfigB[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexa = randint(0, nx * ny - 1);
        numa = tabfigA[indexa][2];
        indexaxe1 = randint(0, nx * ny - 1);
        xmil1 = tabfigA[indexaxe1][0] - 2;
        ymil1 = tabfigA[indexaxe1][1] - 2;
        point = [tabfigA[indexa][0], tabfigA[indexa][1]];
        point = image_point_par_transformation(2, point, [xmil1, ymil1]);
      }
    }
    xM1 = tabfigA[indexa][0];
    yM1 = tabfigA[indexa][1];
    xN1 = point[0];
    yN1 = point[1];

    texte = `Le point O peut Ãªtre dÃ©placÃ© pour recadrer Ã©ventuellement le pavage.<br>`;
    texte +=
      num_alpha(0) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numa} dans la symÃ©trie par rapport Ã  la droite $(d_1)$ ?<br>`,
        `green`
      );
    texte_corr =
      num_alpha(0) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numa} dans la symÃ©trie par rapport Ã  la droite $(d_1)$ porte le numÃ©ro ${anum}.<br>`,
        `green`
      );
    // DeuxiÃ¨me question : une figure dans tabfigA, une symÃ©trie par rapport Ã  une parallÃ¨le Ã  y=x ql'image est une figure dans tabfigA
    // On tracera la mÃ©diatrice du segment d'extrÃ©mitÃ© les 2 centres de gravitÃ©s symÃ©triques.
    indexb = randint(0, nx * ny - 1);
    numb = tabfigA[indexb][2];
    indexaxe2 = randint(0, nx * ny - 1, [indexb]); // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    xmil2 = tabfigA[indexaxe2][0] - 2;
    ymil2 = tabfigA[indexaxe2][1] - 2;
    point = image_point_par_transformation(
      1,
      [tabfigA[indexb][0], tabfigA[indexb][1]],
      [xmil2, ymil2]
    );
    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
          trouver = true;
          bnum = tabfigA[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexb = randint(0, nx * ny - 1);
        numb = tabfigA[indexb][2];
        indexaxe2 = randint(0, nx * ny - 1);
        xmil2 = tabfigA[indexaxe2][0] - 2;
        ymil2 = tabfigA[indexaxe2][1] - 2;
        point = image_point_par_transformation(
          1,
          [tabfigA[indexb][0], tabfigA[indexb][1]],
          [xmil2, ymil2]
        );
      }
    }
    xM2 = tabfigA[indexb][0];
    yM2 = tabfigA[indexb][1];
    xN2 = point[0];
    yN2 = point[1];

    texte +=
      num_alpha(1) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numb} dans la symÃ©trie par rapport Ã  la droite $(d_2)$ ?<br>`,
        `red`
      );
    texte_corr +=
      num_alpha(1) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numb} dans la symÃ©trie par rapport Ã  la droite $(2)$ porte le numÃ©ro ${bnum}.<br>`,
        `red`
      );

    // troisiÃ¨me question : une figure dans tabfigB, une symÃ©trie par rapport Ã  une parallÃ¨le Ã  y=0, l'image est dans tabfigA
    indexc = 3; //randint(0,nx*ny-1)
    numc = tabfigB[indexc][2];
    indexaxe3 = 14; //randint(0,nx*ny-1) // l'index alÃ©atoire dans le tableau des centres de gravitÃ© des figA sert Ã  choisir un point de passage pour l'axe (xG-2,yG-2).
    xmil3 = tabfigA[indexaxe3][0] - 2;
    ymil3 = tabfigA[indexaxe3][1] - 2;
    point = [tabfigB[indexc][0], tabfigB[indexc][1]];
    point = changement_de_base_ortho_tri(
      image_point_par_transformation(
        3,
        changement_de_base_tri_ortho(point),
        changement_de_base_tri_ortho([xmil3, ymil3])
      )
    );
    point[0] = arrondi(point[0], 1); // Les coordonnÃ©es sont censÃ©es Ãªtre entiÃ¨res mais les calculs JS laissent toujours de cent-milliardiÃ¨mes indÃ©sirables.
    point[1] = arrondi(point[1], 1);
    trouver = false;
    while (trouver == false) {
      for (let j = 0; j < nx * ny; j++) {
        if (point[0] == tabfigA[j][0] && point[1] == tabfigA[j][1]) {
          trouver = true;
          cnum = tabfigA[j][2];
          break;
        }
      }
      if (trouver == false) {
        indexc = randint(0, nx * ny - 1);
        numc = tabfigB[indexc][2];
        indexaxe3 = randint(0, nx * ny - 1);
        xmil3 = tabfigA[indexaxe3][0] - 2;
        ymil3 = tabfigA[indexaxe3][1] - 2;
        point = [tabfigA[indexa][0], tabfigA[indexa][1]];
        point = changement_de_base_ortho_tri(
          image_point_par_transformation(
            3,
            changement_de_base_tri_ortho(point),
            [xmil3, ymil3]
          )
        );
        point[0] = arrondi(point[0], 1);
        point[1] = arrondi(point[1], 1);
      }
    }

    xM3 = tabfigB[indexc][0];
    yM3 = tabfigB[indexc][1];
    xN3 = point[0];
    yN3 = point[1];

    texte +=
      num_alpha(2) +
      texte_en_couleur_et_gras(
        ` Quel est le numÃ©ro de la figure symÃ©trique de la figure ${numc} dans la symÃ©trie par rapport Ã  la droite $(d_3)$ ?<br>`,
        `blue`
      );
    texte_corr +=
      num_alpha(2) +
      texte_en_couleur_et_gras(
        ` La figure symÃ©trique de la figure ${numc} dans la symÃ©trie par rapport Ã  la droite $(d_3)$ porte le numÃ©ro ${cnum}.<br>`,
        `blue`
      );

    if (sortie_html) {
      this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM1", "${xM1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM1", "${yM1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN1", "${xN1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN1", "${yN1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM2", "${xM2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM2", "${yM2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN2", "${xN2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN2", "${yN2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xM3", "${xM3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yM3", "${yM3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN3", "${xN3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN3", "${yN3}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "zoom", "${zoom}");

			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yB", "${yB}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yC", "${yC}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM1", "${xM1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM1", "${yM1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN1", "${xN1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN1", "${yN1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM2", "${xM2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM2", "${yM2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN2", "${xN2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN2", "${yN2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xM3", "${xM3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yM3", "${yM3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN3", "${xN3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN3", "${yN3}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ny", "${ny}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "nx", "${nx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "ny", "${ny}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "zoom", "${zoom}");

			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.executeMacro("MG32svgcorr${numero_de_l_exercice}","Correction")
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`;

      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    } else {
      texte = ``;
      texte_cor = ``;
      this.liste_questions.push(texte); // on envoie la question
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    }
  };
  // this.besoin_formulaire_numerique = ['Transformations',5, '1 : SymÃ©tries axiales\n 2 : SymÃ©tries centrales\n 3 : Rotations\n 4 : Translations\n 5 : HomothÃ©ties\n'];
}

/**
 * Transformations : trouvers un point numÃ©rotÃ© par une des transformations du plan. Fonction gÃ©nÃ©rale utilisÃ©e sur tous les niveaux
 * @Auteur Jean-Claude Lhote
 * Pas de version LaTeX
 */
function Transformations() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  // this.titre = "Trouver l'image d'un point par une transformation du plan";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.pas_de_version_LaTeX = true;
  // this.sup = 1; // 1 pour les 6Ã¨me, 2 pour les 5Ã¨mes, 3 pour les 4Ã¨mes, et 4 pour les 3Ã¨mes.
  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 1.5);
  this.liste_packages = "tkz-euclide";
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.type_exercice = "MG32";
    this.MG32editable = false;
    this.taille_div_MG32 = [700, 700];
    this.MG32codeBase64 =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAAAAAAEAAABt#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEAB0NDYWxjdWwA#####wACeU8AATQAAAABQBAAAAAAAAAAAAACAP####8AAnhPAAE0AAAAAUAQAAAAAAAA#####wAAAAEACkNQb2ludEJhc2UA#####wEAAAAADgABRwDAKAAAAAAAAAAAAAAAAAAABQABQEnAAAAAAABAhAQo9cKPXP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####ANjY2AAQAAABAQEAAAADAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AQAAAAAOAAFJAMAcAAAAAAAAQDQAAAAAAAAFAAFAUIAAAAAAAAAAAAT#####AAAAAQAJQ0Ryb2l0ZUFCAP####8BAAAAABAAAAEAAQAAAAMAAAAF#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wDY2NgAEAAAAQEBAAAAAwAAAAb#####AAAAAQAJQ0NlcmNsZU9BAP####8BAAAAAAEAAAADAAAABf####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAHAAAACP####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAAA4AAUoAwC4AAAAAAABAGAAAAAAAAAUAAgAAAAn#####AAAAAgAHQ1JlcGVyZQD#####AObm5gEBAAAAAwAAAAUAAAAKAQEBAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAT#wAAAAAAAAAAAAAT#wAAAAAAAA#####wAAAAEAEENQb2ludERhbnNSZXBlcmUA#####wEAAAAAEAABUQAAAAAAAAAAAEAIAAAAAAAABQAAAAALAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAA#####wAAAAEADENUcmFuc2xhdGlvbgD#####AAAAAwAAAAX#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAAADgACUTEAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA0AAAANAP####8AAAADAAAACgAAAA4A#####wEAAAAADgACUTIAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA######AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAwAAAABQCIAAAAAAAAAAAAOAP####8BAAAAAA4AAlEzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAARAAAADgD#####AQAAAAAOAAJRNAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAEf####8AAAABAAhDU2VnbWVudAD#####AQAAAAAQAAABAAEAAAAMAAAAEgAAAAUA#####wEAAAAADgACUjEAAAAAAAAAAABACAAAAAAAAAUAAT#uZmZmZmZmAAAAFAAAAA0A#####wAAAAwAAAATAAAADgD#####AQAAAAAOAAJSMgAAAAAAAAAAAEAIAAAAAAAABQAAAAAVAAAAFgAAABAA#####wEAAAAAEAAAAQABAAAAFQAAABcAAAAFAP####8Bf39#AA4AAlMxAAAAAAAAAAAAQAgAAAAAAAADAAE#u38NRim38QAAABgAAAALAP####8A5ubmAAEAAAAMAAAADgAAABAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABP#AAAAAAAAAAAAABP#AAAAAAAAD#####AAAAAgAIQ01lc3VyZVgA#####wADeFMxAAAAGgAAABn#####AAAAAgAIQ01lc3VyZVkA#####wADeVMxAAAAGgAAABkAAAACAP####8ACE5vbVBvaW50AAoxMCp5UzEreFMx#####wAAAAEACkNPcGVyYXRpb24AAAAAEwIAAAABQCQAAAAAAAD#####AAAAAQAPQ1Jlc3VsdGF0VmFsZXVyAAAAHAAAABQAAAAb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAABAKAAAAAAAAEAxAAAAAAAAAAAAGQ4AAf###wAAAAEAAAACAAAAAUBGgAAAAAAAAAAAAAIAAAAd#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAB4AAAABQCQAAAAAAAAAAAAZAAAABQAAABkAAAAbAAAAHAAAAB0AAAAeAAAAFgD#####AAAAAAAAAB8AAAABQCQAAAAAAAAAAAAVAAAACQAAABUAAAAXAAAAGAAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHwAAABYA#####wEAAAAAAAAZAAAAAUAkAAAAAAAAAAAAGQAAAAIAAAAZAAAAGQAAABYA#####wCkpKQAAAAhAAAAAUAkAAAAAAAAAAAAFQAAAAUAAAAVAAAAFwAAABgAAAAZAAAAIQAAAAoA#####wEAAAAAEAAAAQUAAQAAAAn#####AAAAAQAKQ1VuaXRleFJlcAD#####AAR1bml0AAAACwAAAA8A#####wAAAAMAAAATAwAAAAE#8AAAAAAAAAAAABQAAAAkAAAADgD#####AQAAAAAQAAJXIgBAJAAAAAAAAEAYAAAAAAAAAQAAAAAFAAAAJf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAMAAAAmAAAADAD#####AQAAAAAQAAJPIgDAMQAAAAAAAMBBAAAAAAAACQAAAAAL#####wAAAAIACUNGb25jdGlvbgAAAAAUAAAAAgAAABkAAAAAFAAAAAH#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAsAAAAoAAAAAT#wAAAAAAAAAAAAAgD#####AARiaXMxAAExAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAEQAAABAAEAAAAoAT#wAAAAAAAAAAAAAgD#####AAN4eCcAATEAAAABP#AAAAAAAAAAAAAPAP####8AAAAoAAAAFAAAACwAAAAEAP####8BAAAAARAAAAEAAQAAACgAP#AAAAAAAAAAAAACAP####8AA3l5JwABMQAAAAE#8AAAAAAAAAAAAA8A#####wAAACgAAAAUAAAALwAAABoA#####wEAAAAAEAAAAQABAAAACwAAACj#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAT#wAAAAAAAAAAAAAgD#####AARiaXMyAAExAAAAAT#wAAAAAAAAAAAADwD#####AAAAKAAAABQAAAAyAAAADwD#####AAAAAwAAAAE#8AAAAAAAAAAAAA4A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACgAAAA0#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAADAAAABQAAAAFAHmZmZmZmZgAAAAIA#####wACeE4AATMAAAABQAgAAAAAAAAAAAAMAP####8BAAAAAQ4AAU0AwCwAAAAAAADAOQAAAAAAAAMAAAAACwAAAAFAGAAAAAAAAAAAAAFAFAAAAAAAAAAAAAIA#####wACeU4AAi0xAAAAGwAAAAE#8AAAAAAAAAAAAAwA#####wEAAAABDgABTgDAKAAAAAAAAMA9AAAAAAAAAwAAAAALAAAAEwAAAAABQBgAAAAAAAAAAAAUAAAANwAAABMAAAAAAUAUAAAAAAAAAAAAFAAAADkAAAACAP####8ACEFmZmljaGVOAAEwAAAAAQAAAAAAAAAAAAAAAgD#####AAhBZmZpY2hlTQABMAAAAAEAAAAAAAAAAAAAAA8A#####wAAAAMAAAATAwAAAAE#8AAAAAAAAAAAABQAAAA7AAAADgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAAOAAAAD0AAAAPAP####8AAAADAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAPAAAAA4A#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAADgAAAA#AAAADwD#####AAAAAwAAABMDAAAAAT#wAAAAAAAAAAAAFAAAADsAAAAOAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA6AAAAQf####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwC4AAAAAAADAOAAAAAAAAAAAAEAQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABTQAAAB0A#####wAAAAAAwCoAAAAAAADAOgAAAAAAAAAAAEIQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAABTgAAAAIA#####wAEbnVtMAACMjMAAAABQDcAAAAAAAAAAAACAP####8AAnkwAAxpbnQobnVtMC8xMCkAAAAZAgAAABMDAAAAFAAAAEUAAAABQCQAAAAAAAAAAAACAP####8AAngwAAxtb2QobnVtMCwxMCn#####AAAAAQANQ0ZvbmN0aW9uMlZhcgYAAAAUAAAARQAAAAFAJAAAAAAAAAAAAAwA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAUAAAARwAAABQAAABGAAAAAgD#####AARudW0yAAIyNwAAAAFAOwAAAAAAAAAAAAIA#####wACeTIADGludChudW0yLzEwKQAAABkCAAAAEwMAAAAUAAAASQAAAAFAJAAAAAAAAAAAAAIA#####wACeDIADG1vZChudW0yLDEwKQAAAB4GAAAAFAAAAEkAAAABQCQAAAAAAAAAAAAMAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAFAAAAEsAAAAUAAAASgAAAAIA#####wAEbnVtMQACNTEAAAABQEmAAAAAAAAAAAACAP####8AAnkxAAxpbnQobnVtMS8xMCkAAAAZAgAAABMDAAAAFAAAAE0AAAABQCQAAAAAAAAAAAACAP####8AAngxAAxtb2QobnVtMSwxMCkAAAAeBgAAABQAAABNAAAAAUAkAAAAAAAAAAAADAD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAABQAAABPAAAAFAAAAE4AAAACAP####8ACEFmZmljaGVPAAExAAAAAT#wAAAAAAAAAAAADwD#####AAAAAwAAABMDAAAAAT#wAAAAAAAAAAAAFAAAAFEAAAAOAP####8AAAAAABIAAU8AwDEAAAAAAADAQgAAAAAAAAkAAAAAKAAAAFIAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAKv####8AAAABAAxDRHJvaXRlSW1hZ2UA#####wAAAAAAEAAAAQACAAAAKQAAAFQAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAAMgAAAB8A#####wAAAAAAEAAAAQACAAAAMQAAAFYAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAALAAAAB8A#####wAAAAAAEAAAAQADAAAAKwAAAFgAAAAPAP####8AAAAoAAAAEwMAAAABP#AAAAAAAAAAAAAUAAAALwAAAB8A#####wAAAAAAEAAAAQADAAAALgAAAFr#####AAAAAgAJQ0NlcmNsZU9SAP####8BAAAAAAMAAAAoAAAAAUAUAAAAAAAAAAAAAAkA#####wAAAFcAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAQAAAF0AAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAXQAAAAkA#####wAAAFsAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAQAAAGAAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAYAAAAAkA#####wAAAFUAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAgAAAGMAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAYwAAAAkA#####wAAAFkAAABcAAAACgD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAgAAAGYAAAAKAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAZgAAAB0A#####wAAAAAAwDYAAAAAAADARoAAAAAAAAAAAF8QAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAAdAP####8AAAAAAMA9AAAAAAAAwD8AAAAAAAAAAABiEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAACChkI0woNCkpAAAAHQD#####AAAAAADAAAAAAAAAAMBHAAAAAAAAAAAAZRAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAAB0A#####wAAAAAAQBwAAAAAAADAPQAAAAAAAAAAAGgQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgzKSkAAAAn##########8=";
    this.MG32codeBase64corr =
      "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAQAAAAYACFN5bWV0cmllAClDbHF1ZXIgc3VyIGxlIHBvaW50CkNsaXF1ZXIgc3VyIGxhIGRyb2l0ZQAAAAIAAAAGAAAAABr#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAAAAAAT#####AAAAAAAAAAAACf##########AAAAAQAHQ0NhbGN1bAD#####AAJ5TwABNP####8AAAABAApDQ29uc3RhbnRlQBAAAAAAAAAAAAABAP####8AAnhPAAE0AAAAAkAQAAAAAAAAAAAAAQD#####AARiaXMyAAExAAAAAj#wAAAAAAAAAAAAAQD#####AARudW0xAAI1MQAAAAJASYAAAAAAAAAAAAEA#####wACeTEADGludChudW0xLzEwKf####8AAAACAAlDRm9uY3Rpb24C#####wAAAAEACkNPcGVyYXRpb24D#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAUAAAACQCQAAAAAAAAAAAABAP####8AAngxAAxtb2QobnVtMSwxMCn#####AAAAAQANQ0ZvbmN0aW9uMlZhcgYAAAAFAAAABQAAAAJAJAAAAAAAAP####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAAAH#####AAAAAQALQ1BvaW50SW1hZ2UB#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAI#####wAAAAEAB0NNaWxpZXUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAJ#####wAAAAEACENTZWdtZW50Af####8AAAD#ABAAAAEAAgAAAAAAAAAKAAAACgH#####AAAA#wAQAAABAAIAAAAKAAAACf####8AAAACAAlDQ2VyY2xlT1IA#####wEAAP8AAgAAAAoAAAACP9MzMzMzMzMA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAN#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAAOAAAACgD#####AQAAAAAQAAABAAEAAAAKAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8AAAAAAA0AAAEBAQAAAAoAAAAQ#####wAAAAEACUNDZXJjbGVPQQD#####AAAAAAEBAAAACgAAAA8AAAAMAP####8AAAARAAAAEgAAAA0A#####wAAAP8AEgAAAQcAAgAAABP#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAAKAAAADwAAAAgA#####wAAAP8AEgAAAQcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAf####8AAAD#AAIAAAAFAAAACgAAAA8AAAAWAAAAFAAAAAr#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQB#####wAAAP8AAgAAAAALAAAAEgH#####AAAA#wACAAAAAAwAAAABAAABNP####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2AAAAAkAJIftURC0YAAAAAQD#####AAJ5TwABNAAAAAJAEAAAAAAAAAAAAAEA#####wACeE8AATQAAAACQBAAAAAAAAD#####AAAAAQAKQ1BvaW50QmFzZQD#####AQAAAAAOAAFHAMAoAAAAAAAAAAAAAAAAAAAFAAFAScAAAAAAAECEBCj1wo9c#####wAAAAEAFENEcm9pdGVEaXJlY3Rpb25GaXhlAP####8A2NjYABAAAAEBAQAAAAMBP#AAAAAAAAD#####AAAAAQAPQ1BvaW50TGllRHJvaXRlAP####8BAAAAAA4AAUkAwBwAAAAAAABANAAAAAAAAAUAAUBQgAAAAAAAAAAABP####8AAAABAAlDRHJvaXRlQUIA#####wEAAAAAEAAAAQABAAAAAwAAAAUAAAAOAP####8A2NjYABAAAAEBAQAAAAMAAAAGAAAADwD#####AQAAAAABAAAAAwAAAAUAAAAMAP####8AAAAHAAAACAAAAA0A#####wEAAAAADgABSgDALgAAAAAAAEAYAAAAAAAABQACAAAACf####8AAAACAAdDUmVwZXJlAP####8A5ubmAQEAAAADAAAABQAAAAoBAQEAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAACP#AAAAAAAAAAAAACP#AAAAAAAAD#####AAAAAQAQQ1BvaW50RGFuc1JlcGVyZQD#####AQAAAAAQAAFRAAAAAAAAAAAAQAgAAAAAAAAFAAAAAAsAAAACAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAQAP####8AAAADAAAABQAAAAgA#####wEAAAAADgACUTEAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA0AAAAQAP####8AAAADAAAACgAAAAgA#####wEAAAAADgACUTIAAAAAAAAAAABACAAAAAAAAAUAAAAADAAAAA######AAAAAQALQ0hvbW90aGV0aWUA#####wAAAAwAAAACQCIAAAAAAAAAAAAIAP####8BAAAAAA4AAlEzAAAAAAAAAAAAQAgAAAAAAAAFAAAAAA4AAAARAAAACAD#####AQAAAAAOAAJRNAAAAAAAAAAAAEAIAAAAAAAABQAAAAAQAAAAEQAAAAoA#####wEAAAAAEAAAAQABAAAADAAAABIAAAAWAP####8BAAAAAA4AAlIxAAAAAAAAAAAAQAgAAAAAAAAFAAE#7mZmZmZmZgAAABQAAAAQAP####8AAAAMAAAAEwAAAAgA#####wEAAAAADgACUjIAAAAAAAAAAABACAAAAAAAAAUAAAAAFQAAABYAAAAKAP####8BAAAAABAAAAEAAQAAABUAAAAXAAAAFgD#####AX9#fwAOAAJTMQAAAAAAAAAAAEAIAAAAAAAAAwABP7t#DUYpt#EAAAAYAAAAGAD#####AObm5gABAAAADAAAAA4AAAAQAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAj#wAAAAAAAAAAAAAj#wAAAAAAAA#####wAAAAIACENNZXN1cmVYAP####8AA3hTMQAAABoAAAAZ#####wAAAAIACENNZXN1cmVZAP####8AA3lTMQAAABoAAAAZAAAAAQD#####AAhOb21Qb2ludAAKMTAqeVMxK3hTMQAAAAQAAAAABAIAAAACQCQAAAAAAAAAAAAFAAAAHAAAAAUAAAAb#####wAAAAEAD0NWYWxldXJBZmZpY2hlZQD#####AQAAAABAKAAAAAAAAEAxAAAAAAAAAAAAGQ4AAf###wAAAAEAAAACAAAAAkBGgAAAAAAAAAAAAAIAAAAd#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQD#####AQAAAAAAAB4AAAACQCQAAAAAAAAAAAAZAAAABQAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHgD#####AAAAAAAAAB8AAAACQCQAAAAAAAAAAAAVAAAACQAAABUAAAAXAAAAGAAAABkAAAAbAAAAHAAAAB0AAAAeAAAAHwAAAB4A#####wEAAAAAAAAZAAAAAkAkAAAAAAAAAAAAGQAAAAIAAAAZAAAAGQAAAB4A#####wCkpKQAAAAhAAAAAkAkAAAAAAAAAAAAFQAAAAUAAAAVAAAAFwAAABgAAAAZAAAAIQAAAA0A#####wEAAAAAEAAAAQUAAQAAAAn#####AAAAAQAKQ1VuaXRleFJlcAD#####AAR1bml0AAAACwAAABoA#####wAAAAMAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAkAAAACAD#####AQAAAAAQAAJXIgBAJAAAAAAAAEAYAAAAAAAAAQAAAAAFAAAAJf####8AAAABAAlDTG9uZ3VldXIA#####wAAAAMAAAAmAAAAGQD#####AQAAAAAQAAJPIgDAMQAAAAAAAMBBAAAAAAAACQAAAAALAAAAAwAAAAAFAAAAAgAAAAMAAAAABQAAAAH#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAsAAAAoAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMxAAExAAAAAj#wAAAAAAAAAAAAFQD#####AQAAAAEQAAABAAEAAAAoAT#wAAAAAAAAAAAAAQD#####AAN4eCcAATEAAAACP#AAAAAAAAAAAAAaAP####8AAAAoAAAABQAAACwAAAAVAP####8BAAAAARAAAAEAAQAAACgAP#AAAAAAAAAAAAABAP####8AA3l5JwABMQAAAAI#8AAAAAAAAAAAABoA#####wAAACgAAAAFAAAALwAAACEA#####wEAAAAAEAAAAQABAAAACwAAACj#####AAAAAQAMQ01vaW5zVW5haXJlAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMyAAExAAAAAj#wAAAAAAAAAAAAGgD#####AAAAKAAAAAUAAAAyAAAAGgD#####AAAAAwAAAAI#8AAAAAAAAAAAAAgA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAACgAAAA0#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAADAAAABQAAAAJAHmZmZmZmZgAAAAEA#####wACeE4AATMAAAACQAgAAAAAAAAAAAAZAP####8BAAAAAQ4AAU0AwCwAAAAAAADAOQAAAAAAAAMAAAAACwAAAAJAGAAAAAAAAAAAAAJAFAAAAAAAAAAAAAEA#####wACeU4AAi0xAAAAIgAAAAI#8AAAAAAAAAAAABkA#####wEAAAABDgABTgDAKAAAAAAAAMA9AAAAAAAAAwAAAAALAAAABAAAAAACQBgAAAAAAAAAAAAFAAAANwAAAAQAAAAAAkAUAAAAAAAAAAAABQAAADkAAAABAP####8ACEFmZmljaGVOAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAhBZmZpY2hlTQABMQAAAAI#8AAAAAAAAAAAABoA#####wAAAAMAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAA7AAAACAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAMAAAAAOAAAAD0AAAAaAP####8AAAADAAAABAMAAAACP#AAAAAAAAAAAAAFAAAAPAAAAAgA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAADgAAAA#AAAAGgD#####AAAAAwAAAAQDAAAAAj#wAAAAAAAAAAAABQAAADsAAAAIAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA6AAAAQf####8AAAACAAxDQ29tbWVudGFpcmUA#####wAAAAAAwC4AAAAAAADAOAAAAAAAAAAAAEAQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAABTQAAACQA#####wAAAAAAwCoAAAAAAADAOgAAAAAAAAAAAEIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAABTgAAAAEA#####wAEbnVtMAACMjMAAAACQDcAAAAAAAAAAAABAP####8AAnkwAAxpbnQobnVtMC8xMCkAAAADAgAAAAQDAAAABQAAAEUAAAACQCQAAAAAAAAAAAABAP####8AAngwAAxtb2QobnVtMCwxMCkAAAAGBgAAAAUAAABFAAAAAkAkAAAAAAAAAAAAGQD#####AAAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAAAUAAABHAAAABQAAAEYAAAABAP####8ABG51bTIAAjI3AAAAAkA7AAAAAAAAAAAAAQD#####AAJ5MgAMaW50KG51bTIvMTApAAAAAwIAAAAEAwAAAAUAAABJAAAAAkAkAAAAAAAAAAAAAQD#####AAJ4MgAMbW9kKG51bTIsMTApAAAABgYAAAAFAAAASQAAAAJAJAAAAAAAAAAAABkA#####wAAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAFAAAASwAAAAUAAABKAAAAAQD#####AARudW0xAAI1MQAAAAJASYAAAAAAAAAAAAEA#####wACeTEADGludChudW0xLzEwKQAAAAMCAAAABAMAAAAFAAAATQAAAAJAJAAAAAAAAAAAAAEA#####wACeDEADG1vZChudW0xLDEwKQAAAAYGAAAABQAAAE0AAAACQCQAAAAAAAAAAAAZAP####8AAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAABQAAAE8AAAAFAAAATgAAAAEA#####wAIQWZmaWNoZU8AATEAAAACP#AAAAAAAAAAAAAaAP####8AAAADAAAABAMAAAACP#AAAAAAAAAAAAAFAAAAUQAAAAgA#####wEAAAAAEgABTwDAMQAAAAAAAMBCAAAAAAAACQAAAAAoAAAAUgAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAq#####wAAAAEADENEcm9pdGVJbWFnZQD#####AAAAAAAQAAABAAIAAAApAAAAVAAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAyAAAAJQD#####AAAAAAAQAAABAAIAAAAxAAAAVgAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAsAAAAJQD#####AAAAAAAQAAABAAMAAAArAAAAWAAAABoA#####wAAACgAAAAEAwAAAAI#8AAAAAAAAAAAAAUAAAAvAAAAJQD#####AAAAAAAQAAABAAMAAAAuAAAAWgAAAAsA#####wEAAAAAAwAAACgAAAACQBAAAAAAAAAAAAAADAD#####AAAAVwAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAXQAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAIAAABdAAAADAD#####AAAAWwAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQABAAAAYAAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAIAAABgAAAADAD#####AAAAVQAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAYwAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAEAAABjAAAADAD#####AAAAWQAAAFwAAAANAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQACAAAAZgAAAA0A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAEAAABmAAAAJAD#####AAAAAADANgAAAAAAAMBGgAAAAAAAAAAAXxAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDIpKQAAACQA#####wAAAAAAwD0AAAAAAADAPwAAAAAAAAAAAGIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAIKGQjTCg0KSkAAAAkAP####8AAAAAAMAAAAAAAAAAwEcAAAAAAAAAAABlEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAACChkI0woMSkpAAAAJAD#####AAAAAABAHAAAAAAAAMA9AAAAAAAAAAAAaBAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDMpKf####8AAAABAAVDRm9uYwD#####AARhYnNuAAltb2QoeCwxMCkAAAAGBv####8AAAACABFDVmFyaWFibGVGb3JtZWxsZQAAAAAAAAACQCQAAAAAAAAAAXgAAAAmAP####8ABG9yZG4ACWludCh4LzEwKQAAAAMCAAAABAMAAAAnAAAAAAAAAAJAJAAAAAAAAAABeAAAAAEA#####wACbjEAATEAAAACP#AAAAAAAAAAAAABAP####8AAm4yAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAJuMwACNzcAAAACQFNAAAAAAAAAAAABAP####8AAm40AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAJuNQACNTYAAAACQEwAAAAAAAAAAAABAP####8AAm42AAE2AAAAAkAYAAAAAAAAAAAAAQD#####AAJuNwABNwAAAAJAHAAAAAAAAAAAAAEA#####wACbjgAAjg1AAAAAkBVQAAAAAAAAAAAAQD#####AAJuOQACNTMAAAACQEqAAAAAAAAAAAAZAP####8BAAD#ABIAAlAxAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAv#####AAAAAQAOQ0FwcGVsRm9uY3Rpb24AAABtAAAABQAAAG8AAAAoAAAAbgAAAAUAAABvAAAAGQD#####AQAA#wASAAJQMgAAAAAAAAAAAEAIAAAAAAAABwAAAAALAAAAKAAAAG0AAAAFAAAAcAAAACgAAABuAAAABQAAAHAAAAAZAP####8BAAD#ABIAAnAzAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAsAAAAoAAAAbQAAAAUAAABxAAAAKAAAAG4AAAAFAAAAcQAAABkA#####wEAAP8AEgACUDQAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAACgAAABtAAAABQAAAHIAAAAoAAAAbgAAAAUAAAByAAAAGQD#####AQAA#wASAAJQNQAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAKAAAAG0AAAAFAAAAcwAAACgAAABuAAAABQAAAHMAAAAZAP####8BAAD#ABIAAlA2AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAoAAAAbQAAAAUAAAB0AAAAKAAAAG4AAAAFAAAAdAAAABkA#####wEAAP8AEgACUDcAAAAAAAAAAABACAAAAAAAAAkAAAAACwAAACgAAABtAAAABQAAAHUAAAAoAAAAbgAAAAUAAAB1AAAAGQD#####AQAA#wASAAJQOAAAAAAAAAAAAEAIAAAAAAAACQAAAAALAAAAKAAAAG0AAAAFAAAAdgAAACgAAABuAAAABQAAAHYAAAAZAP####8BAAD#ABIAAlA5AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAsAAAAoAAAAbQAAAAUAAAB3AAAAKAAAAG4AAAAFAAAAdwAAACYA#####wAFdGVzdG4ABzEtKHg8MCkAAAAEAQAAAAI#8AAAAAAAAAAAAAQEAAAAJwAAAAAAAAACAAAAAAAAAAAAAXgAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABvAAAACAD#####AAAA#wESAANQJzEAAAAAAAAAAABACAAAAAAAAAkAAAAAeAAAAIIAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABwAAAACAD#####AAAA#wESAANQJzIAAAAAAAAAAABACAAAAAAAAAkAAAAAeQAAAIQAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABxAAAACAD#####AAAA#wESAANQJzMAAAAAAAAAAABACAAAAAAAAAkAAAAAegAAAIYAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAByAAAACAD#####AAAA#wESAANQJzQAAAAAAAAAAABACAAAAAAAAAkAAAAAewAAAIgAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAABzAAAACAD#####AAAA#wESAANQJzUAAAAAAAAAAABACAAAAAAAAAkAAAAAfAAAAIoAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB0AAAACAD#####AAAA#wESAANQJzYAAAAAAAAAAABACAAAAAAAAAkAAAAAfQAAAIwAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB1AAAACAD#####AAAA#wESAANQJzcAAAAAAAAAAABACAAAAAAAAAkAAAAAfgAAAI4AAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB2AAAACAD#####AAAA#wESAANQJzgAAAAAAAAAAABACAAAAAAAAAkAAAAAfwAAAJAAAAAaAP####8AAAAoAAAABAMAAAACP#AAAAAAAAAAAAAoAAAAgQAAAAUAAAB3AAAACAD#####AAAA#wESAANQJzkAAAAAAAAAAABACAAAAAAAAAkAAAAAgAAAAJL#####AAAAAQAUQ0ltcGxlbWVudGF0aW9uUHJvdG8A#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACDAAAAVQAAAAEAAAAAlAADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAACUAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAJQAA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAAlAADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAAlAABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAJgAAAACQCQAAAAAAAAAAAABAAAAAJQAAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAmAAAAAJAJAAAAAAAAAAAAAcAAAAAlAAAAFUAAAAIAQAAAJQAAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACDAAAAmwAAAAkAAAAAlAAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIMAAACcAAAACgEAAACUAAAA#wAQAAABAAIAAACDAAAAnQAAAAoBAAAAlAAAAP8AEAAAAQACAAAAnQAAAJwAAAALAAAAAJQBAAD#AAIAAACdAAAAAj#TMzMzMzMzAAAAAAwAAAAAlAAAAJ4AAACgAAAADQAAAACUAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAAKEAAAAKAAAAAJQBAAAAABAAAAEAAQAAAJ0AAACiAAAADgAAAACUAAAAAAAQAAABAQEAAACdAAAAowAAAA8AAAAAlAAAAAABAQAAAJ0AAACiAAAADAAAAACUAAAApAAAAKUAAAANAAAAAJQAAAD#ABAAAAEHAAIAAACmAAAAEAAAAACUAAAAnQAAAKIAAAAIAAAAAJQAAAD#ABAAAAEHAAAAAKcAAACoAAAAEQEAAACUAAAA#wACAAAABQAAAJ0AAACiAAAAqQAAAKcAAACdAAAAEgEAAACUAP8AAAEBAAAAAJ4AAAASAQAAAJQA#wAAAQEAAAAAnwAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACFAAAAVwAAAAEAAAAArQADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAACtAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAK0AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAArQADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAArQABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAALEAAAACQCQAAAAAAAAAAAABAAAAAK0AAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAsQAAAAJAJAAAAAAAAAAAAAcAAAAArQAAAFcAAAAIAQAAAK0AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACFAAAAtAAAAAkAAAAArQAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIUAAAC1AAAACgEAAACtAAAA#wAQAAABAAIAAACFAAAAtgAAAAoBAAAArQAAAP8AEAAAAQACAAAAtgAAALUAAAALAAAAAK0BAAD#AAIAAAC2AAAAAj#TMzMzMzMzAAAAAAwAAAAArQAAALcAAAC5AAAADQAAAACtAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAALoAAAAKAAAAAK0BAAAAABAAAAEAAQAAALYAAAC7AAAADgAAAACtAAAAAAAQAAABAQEAAAC2AAAAvAAAAA8AAAAArQAAAAABAQAAALYAAAC7AAAADAAAAACtAAAAvQAAAL4AAAANAAAAAK0AAAD#ABAAAAEHAAIAAAC#AAAAEAAAAACtAAAAtgAAALsAAAAIAAAAAK0AAAD#ABAAAAEHAAAAAMAAAADBAAAAEQEAAACtAAAA#wACAAAABQAAALYAAAC7AAAAwgAAAMAAAAC2AAAAEgEAAACtAP8AAAEBAQAAALcAAAASAQAAAK0A#wAAAQEBAAAAuAAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACHAAAAWQAAAAEAAAAAxgADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAADGAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAMYAA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAAxgADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAAxgABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAMoAAAACQCQAAAAAAAAAAAABAAAAAMYAAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAAygAAAAJAJAAAAAAAAAAAAAcAAAAAxgAAAFkAAAAIAQAAAMYAAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACHAAAAzQAAAAkAAAAAxgAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIcAAADOAAAACgEAAADGAAAA#wAQAAABAAIAAACHAAAAzwAAAAoBAAAAxgAAAP8AEAAAAQACAAAAzwAAAM4AAAALAAAAAMYBAAD#AAIAAADPAAAAAj#TMzMzMzMzAAAAAAwAAAAAxgAAANAAAADSAAAADQAAAADGAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAANMAAAAKAAAAAMYBAAAAABAAAAEAAQAAAM8AAADUAAAADgAAAADGAAAAAAAQAAABAQEAAADPAAAA1QAAAA8AAAAAxgAAAAABAQAAAM8AAADUAAAADAAAAADGAAAA1gAAANcAAAANAAAAAMYAAAD#ABAAAAEHAAIAAADYAAAAEAAAAADGAAAAzwAAANQAAAAIAAAAAMYAAAD#ABAAAAEHAAAAANkAAADaAAAAEQEAAADGAAAA#wACAAAABQAAAM8AAADUAAAA2wAAANkAAADPAAAAEgEAAADGAP8AAAEBAgAAANAAAAASAQAAAMYA#wAAAQECAAAA0QAAACkA#####wAIU3ltZXRyaWUAAAASAAAABgAAAAIAAACJAAAAWwAAAAEAAAAA3wADeU8xAAE0AAAAAkAQAAAAAAAAAAAAAQAAAADfAAN4TzEAATQAAAACQBAAAAAAAAAAAAABAAAAAN8AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAAA3wADbnVtAAI1MQAAAAJASYAAAAAAAAAAAAEAAAAA3wABeQALaW50KG51bS8xMCkAAAADAgAAAAQDAAAABQAAAOMAAAACQCQAAAAAAAAAAAABAAAAAN8AAXgAC21vZChudW0sMTApAAAABgYAAAAFAAAA4wAAAAJAJAAAAAAAAAAAAAcAAAAA3wAAAFsAAAAIAQAAAN8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACJAAAA5gAAAAkAAAAA3wAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAIkAAADnAAAACgEAAADfAAAA#wAQAAABAAIAAACJAAAA6AAAAAoBAAAA3wAAAP8AEAAAAQACAAAA6AAAAOcAAAALAAAAAN8BAAD#AAIAAADoAAAAAj#TMzMzMzMzAAAAAAwAAAAA3wAAAOkAAADrAAAADQAAAADfAAAA#wAQAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAAOwAAAAKAAAAAN8BAAAAABAAAAEAAQAAAOgAAADtAAAADgAAAADfAAAAAAAQAAABAQEAAADoAAAA7gAAAA8AAAAA3wAAAAABAQAAAOgAAADtAAAADAAAAADfAAAA7wAAAPAAAAANAAAAAN8AAAD#ABAAAAEHAAIAAADxAAAAEAAAAADfAAAA6AAAAO0AAAAIAAAAAN8AAAD#ABAAAAEHAAAAAPIAAADzAAAAEQEAAADfAAAA#wACAAAABQAAAOgAAADtAAAA9AAAAPIAAADoAAAAEgEAAADfAP8AAAEBAwAAAOkAAAASAQAAAN8A#wAAAQEDAAAA6v####8AAAABAAlDUm90YXRpb24A#####wAAACgAAAACQFaAAAAAAAAAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACLAAAA+AAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAIsAAAAKAP####8AAAD#ABAAAAEAAQAAACgAAAD5#####wAAAAIAE0NNYXJxdWVBbmdsZU9yaWVudGUA#####wD#AAAAAQAAAAFAMAAAAAAAAAAAAIsAAAAoAAAA+QAAAAASAP####8A#wAAAAEBAAAA+gAAABIA#####wD#AAAAAQEAAAD7#####wAAAAEAEkNBcmNEZUNlcmNsZURpcmVjdAD#####AP8AAAABAAAAKAAAAIsAAAD5AAAAKgD#####AAAAKAAAACIAAAACQFaAAAAAAAAAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACNAAABAAAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAI0AAAAKAP####8AAAD#ABAAAAEAAQAAACgAAAEBAAAAEgD#####AP8AAAABAQAAAQMAAAASAP####8A#wAAAAEBAAABAgAAACsA#####wD#AAAAAQAAAAFAMAAAAAAAAAAAAI0AAAAoAAABAQD#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wD#AAAAAQAAACgAAACNAAABAf####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAAKAAAAAgA#####wAAAP8AEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAI8AAAEIAAAACgD#####AAAA#wAQAAABAAEAAACPAAAAKAAAAAoA#####wAAAP8AEAAAAQABAAAAKAAAAQkAAAASAP####8A#wAAAAECAAABCwAAABIA#####wD#AAAAAQIAAAEKAAAAEAD#####AAAAQAAAAEIAAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAACRAAABDv####8AAAABAAhDVmVjdGV1cgD#####AP8AAAAQAAABAAEAAACRAAABDwAAAAAvAP####8A#wAAABAAAAEAAQAAAEAAAABCAAAAAAoA#####wD#AAAAEAAAAQEBAAAAQAAAAJEAAAAKAP####8A#wAAABAAAAEBAQAAAEIAAAEPAAAAAQD#####AAFrAAE0AAAAAkAQAAAAAAAAAAAAGgD#####AAAAKAAAAAUAAAEUAAAACAD#####AAAA#wESAAFBAAAAAAAAAAAAQAgAAAAAAAAJAAAAAJMAAAEVAAAACgD#####AAAA#wAQAAABAQEAAAAoAAAAkwAAAAoA#####wAAAP8AEAAAAQEBAAAAKAAAARYAAAApAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACgAAACT#####wAAAAEAC0NNZWRpYXRyaWNlAAAAARkBAAAAABAAAAEAAQAAACgAAACTAAAACQAAAAEZAQAAAAAQAAABBQAAAAAoAAAAkwAAAAsAAAABGQEAAAAAAQAAARsAAAACQDAAAAAAAAABAAAADAAAAAEZAAABGgAAARwAAAANAAAAARkBAAAAABAAAAEFAAEAAAEdAAAAIAEAAAEZAAAAKAAAAJMAAAApAP####8AEk1lc3VyZSBkZSBsb25ndWV1cgAAAAUAAAABAAAAAgAAACgAAAEWAAAAMAAAAAEgAQAAAAAQAAABAAEAAAAoAAABFgAAAAkAAAABIAEAAAAAEAAAAQUAAAAAKAAAARYAAAALAAAAASABAAAAAAEAAAEiAAAAAkAwAAAAAAAAAQAAAAwAAAABIAAAASEAAAEjAAAADQAAAAEgAQAAAAAQAAABBQABAAABJAAAACABAAABIAAAACgAAAEWAAAAFgD#####Af8AAAASAAFGAAAAAAAAAAAAQAgAAAAAAAAFAAE#585Z#OWfzwAAARgAAAAeAP####8A#wAAAAABJwAAAAQAAAAABQAAARQAAAACP#AAAAAAAAAAAAEnAAAAAgAAAScAAAEnAAAAAQD#####AANuMTAAAjE5AAAAAkAzAAAAAAAAAAAAGQD#####Af8AAAASAANQMTAAAAAAAAAAAABACAAAAAAAAAUAAAAACwAAACgAAABtAAAABQAAASkAAAAoAAAAbgAAAAUAAAEpAAAAGgD#####AAAAKAAAAAQDAAAAAj#wAAAAAAAAAAAAKAAAAIEAAAAFAAABKQAAAAgA#####wAAAP8BEgAEUCcxMAAAAAAAAAAAAEAIAAAAAAAACQAAAAEqAAABKwAAAAoA#####wAAAP8AEAAAAQEBAAAAKAAAASwAAAABAP####8AAmsyAAE0AAAAAkAQAAAAAAAAAAAAGgD#####AAAAKAAAAAQDAAAAAj#wAAAAAAAAAAAABQAAAS4AAAAIAP####8AAAD#ABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAEsAAABLwAAABYA#####wEAAP8AEgABRQAAAAAAAAAAAEAIAAAAAAAABQABP+MmybJsmyQAAAEtAAAAHgD#####AP8AAAAAATEAAAAEAAAAAAMAAAAABQAAAS4AAAACP#AAAAAAAAAAAAExAAAAAgAAATEAAAExAAAACgD#####AAAA#wAQAAABAQEAAAAoAAABMAAAACf##########w==";
    this.liste_questions = [];
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let antecedents = [0, 0, 0],
      images = [0, 0, 0],
      k = [1, 1, 1],
      k1,
      k2,
      xO = 4,
      yO = 4,
      xu,
      yu,
      point_reseau; // k : rapports d'homothÃ©ties, (xO,yO) point de rencontre des droites et centre, les composantes du vecteur de translation : (xu,yu)
    let bis1 = 0,
      bis2 = 0,
      xx = 0,
      yy = 0,
      AfficheO = 1,
      AfficheN = 0,
      AfficheM = 0;
    let n = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
    let texte = ``,
      texte_corr = ``;
    let point = [[]];
    let transformation = parseInt(this.sup) - 1;
    let liste_type_de_questions = [
      [1, 2, 3, 4],
      [1, 2, 3, 4, 7],
      [1, 2, 3, 4, 7, 8],
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    ];
    let choix_transformation = combinaison_listes(
      liste_type_de_questions[transformation],
      3
    );
    xu = randint(-3, 3);
    if (xu == 0) yu = randint(-3, 3, [0]);
    // pas de vecteur nul de translation.
    else yu = randint(-3, 3);
    for (let j = 0; j < 3; j++) {
      if (choix_transformation[j] == 10) {
        k[j] = choice([2, 4]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie < 1 ( 0.5 ou 0.25 )
        k2 = k[j];
      } else if (choix_transformation[j] == 9) {
        k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie >=1 (1,2 ou 3)
        k1 = k[j];
      }
      antecedents[j] = randint(0, 99);
      point[j] = image_point_par_transformation(
        choix_transformation[j],
        [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],
        [xO, yO],
        [xu, yu],
        k[j]
      );
      images[j] = point[j][0] + point[j][1] * 10;
      // Limitation des points invariants
      if (choix_transformation[j] == 1 && images[j] % 11 == 0) point[j][0] = -1; // Point impossible sur (d1) pour sa symÃ©trie
      if (choix_transformation[j] == 3 && Math.floor(images[j] / 10 == 4))
        point[j][0] = -1; // Point impossible sur (d3) pour sa symÃ©trie
      if (choix_transformation[j] == 4 && images[j] % 10 == 4) point[j][0] = -1; // Point impossible sur  (d4) pour sa symÃ©trie
      if (
        (choix_transformation[j] == 5 || choix_transformation[j] == 5) &&
        antecedents[j] == 44
      )
        point[j][0] = -1; // point O impossible pour rotation
      if (choix_transformation[j] == 10 && antecedents[j] == 44)
        point[j][0] = -1; // point O impossible par homothÃ©tie de rapport 1/k2
      // pour Ã©viter les points en dehors des clous dans homothÃ©tie de rapport 1/k2
      if (
        point[j][0] - Math.floor(point[j][0]) == 0 &&
        point[j][1] - Math.floor(point[j][1]) == 0
      )
        point_reseau = true;
      else point_reseau = false;
      // On vÃ©rifie que l'image est bien un point du rÃ©seau sinon, on change.
      while (
        point[j][0] < 0 ||
        point[j][0] > 9 ||
        point[j][1] < 0 ||
        point[j][1] > 9 ||
        point_reseau == false
      ) {
        if (choix_transformation[j] == 10) {
          k[j] = choice([2, 4]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie < 1 ( 0.5 ou 0.25 )
          k2 = k[j];
        } else if (choix_transformation[j] == 9) {
          k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]); // rapport d'homothÃ©tie >=1 (1,2 ou 3)
          k1 = k[j];
        }
        antecedents[j] = randint(0, 99);
        point[j] = image_point_par_transformation(
          choix_transformation[j],
          [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],
          [xO, yO],
          [xu, yu],
          k[j]
        );
        images[j] = point[j][0] + point[j][1] * 10;
        // Limitation des points invariants
        if (choix_transformation[j] == 1 && images[j] % 11 == 0)
          point[j][0] = -1; // Point impossible sur (d1) pour sa symÃ©trie
        if (choix_transformation[j] == 3 && Math.floor(images[j] / 10 == 4))
          point[j][0] = -1; // Point impossible sur (d3) pour sa symÃ©trie
        if (choix_transformation[j] == 4 && images[j] % 10 == 4)
          point[j][0] = -1; // Point impossible sur  (d4) pour sa symÃ©trie
        if (
          (choix_transformation[j] == 5 || choix_transformation[j] == 5) &&
          antecedents[j] == 44
        )
          point[j][0] = -1; // point O impossible pour rotation
        if (choix_transformation[j] == 10 && antecedents[j] == 44)
          point[j][0] = -1; // point O impossible par homothÃ©tie de rapport 1/k2

        // pour Ã©viter les points en dehors des clous dans homothÃ©tie de rapport 1/k2
        if (
          point[j][0] - Math.floor(point[j][0]) == 0 &&
          point[j][1] - Math.floor(point[j][1]) == 0
        )
          point_reseau = true;
        else point_reseau = false;
      }
    }
    // n[i] est un tableau contenant -1 pour la transformation d'indice i si elle n'est pas utilisÃ©e, et contenant le numÃ©ro du point concernÃ© si la transformation i est utilisÃ©e pour ce point.
    // Je l'utilise pour faire apparaÃ®tre la correction liÃ©e au point et Ã  la transformation.
    for (let j = 0; j < 3; j++) {
      n[choix_transformation[j] - 1] = antecedents[j];
    }
    for (let i = 0; i < 3; i++) {
      switch (choix_transformation[i]) {
        case 1:
          bis1 = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_1)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_1)$ est le point ${images[i]}.<br>`;
          break;

        case 2:
          bis2 = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_2)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_2)$ est le point ${images[i]}.<br>`;
          break;

        case 3:
          xx = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_3)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_3)$ est le point ${images[i]}.<br>`;
          break;

        case 4:
          yy = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro du symÃ©trique du point ${antecedents[i]} par rapport Ã  la droite $(d_4)$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` Le symÃ©trique du point ${antecedents[i]} par rapport Ã  $(d_4)$ est le point ${images[i]}.<br>`;
          break;

        case 5:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 6:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 7:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la symÃ©trie de centre O.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la symÃ©trie de centre O est le point ${images[i]}.<br>`;
          break;

        case 11:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 12:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 13:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens anti-horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens anti-horaire est le point ${images[i]}.<br>`;
          break;

        case 14:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens horaire.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120Â° dans le sens horaire est le point ${images[i]}.<br>`;
          break;

        case 8:
          AfficheN = 1;
          AfficheM = 1;
          // AfficheOO=1
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par la translation qui transforme M en N.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par la translation qui transforme M en N est le point ${images[i]}.<br>`;
          break;

        case 9:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]} par l'homothÃ©tie de centre O et de rapport ${k1}.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]} par l'homothÃ©tie de centre O et de rapport ${k1} est le point ${images[i]}.<br>`;
          break;

        case 10:
          AfficheO = 1;
          texte +=
            num_alpha(i) +
            ` Donner le numÃ©ro de l'image du point ${antecedents[i]
            } par l'homothÃ©tie de centre O et de rapport $${tex_fraction_reduite(
              1,
              k2
            )}$.<br>`;
          texte_corr +=
            num_alpha(i) +
            ` L'image du point ${antecedents[i]
            } par l'homothÃ©tie de centre O et de rapport $${tex_fraction_reduite(
              1,
              k2
            )}$ est le point ${images[i]}.<br>`;
          break;
      }
    }
    if (sortie_html) {
      /*
      boolÃ©ens permettant l'affichage des Ã©lÃ©ments si =1 et le masquage si =0
      bis1 affiche la droite de coefficient directeur 1 passant par O'
      bis2 affiche la droite de coefficient directeur -1 passant par O'
      xx' affiche la droite horizontale passant par O'
      yy' affiche la droite verticale passant par O'
      AfficheO' affiche O' comme son nom l'indique.
      AfficheN, AffichM pour afficher les points M et N dÃ©finissant la translation.
    	
      */
      this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t0", "${choix_transformation[0]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t1", "${choix_transformation[1]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "t2", "${choix_transformation[2]}");						
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num0", "${antecedents[0]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num1", "${antecedents[1]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "num2", "${antecedents[2]}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yO", "${yO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xO", "${xO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yN", "${yu}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xN", "${xu}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yy\'", "${yy}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xx\'", "${xx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheO", "${AfficheO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheM", "${AfficheM}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheN", "${AfficheN}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k", "${k1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k2", "${k2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n1", "${n[0]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n2", "${n[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n3", "${n[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n4", "${n[3]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n5", "${n[4]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n6", "${n[5]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n7", "${n[6]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n8", "${n[7]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n9", "${n[8]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "n10", "${n[9]}");									
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num0", "${antecedents[0]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num1", "${antecedents[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "num2", "${antecedents[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO", "${yO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO", "${xO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yN", "${yu}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xN", "${xu}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yy\'", "${yy}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xx\'", "${xx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheO", "${AfficheO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheM", "${AfficheM}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheN", "${AfficheN}");	

			
			
			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`;
      this.liste_questions.push(texte);
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    } else {
      texte = ``;
      texte_corr = ``;
      this.liste_questions.push(texte); // on envoie la question
      this.liste_corrections.push(texte_corr);
      liste_de_question_to_contenu_sans_numero(this);
    }
  };
  // this.besoin_formulaire_numerique = ['Transformations',5, '1 : SymÃ©tries axiales\n 2 : SymÃ©tries centrales\n 3 : Rotations\n 4 : Translations\n 5 : HomothÃ©ties\n'];
}
/**
 * Construction de symÃ©trique avec dispositif d'auto-correction alÃ©atoire
 * Ref 6G24-3 
 * @Auteur Jean-Claude Lhote
 * PubliÃ© le 30/11/2020
 */
function Construire_symetrique_point_6e() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Construire le symÃ©trique d'un point avec cible auto-corrective";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 3;
  this.nouvelle_version = function () {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let result = [0, 0], texte_corr = "", nbpoints = parseInt(this.sup)
    let celluleAlea = function (rang) {
      let lettre = lettre_depuis_chiffre(randint(1, rang))
      let chiffre = Number(randint(1, rang)).toString()
      return lettre + chiffre
    }
    // On prÃ©pare la figure...
    let a = randint(-10, 10), b = randint(-10, 10, a)
    let d = droite(a, b, 0, '(d)')
    let A = translation(point(0, 0), homothetie(d.directeur, point(0, 0), -0.5))
    let B = translation(point(0, 0), homothetie(d.directeur, point(0, 0), 0.5))
    let marks = ['/', '//', '///', 'x', 'o', 'S', 'V']
    let noms = choisit_lettres_differentes(nbpoints, 'Q', majuscule = true)
    this.consigne = `Construire le symÃ©trique des points $${noms[0]}$`
    for (let i = 1; i < nbpoints - 1; i++) {
      this.consigne += `, $${noms[i]}$`
    }
    this.consigne += ` et $${noms[nbpoints - 1]}$ par rapport Ã  $(d)$.`;
    let cibles = [], M = [], N = [], objets_enonce = [], objets_correction = []  //cibles, M point marquÃ©s, N symÃ©trique de M
    let cellules = []
    let xMin, yMin, xMax, yMax
    [xMin, yMin, xMax, yMax] = [0, 0, 0, 0]
    for (let i = 0; i < nbpoints; i++) { //On place les cibles.
      N.push(point(calcul(randint(-80, 80, 0) / 10), calcul(randint(-80, 80, 0) / 10), noms[i] + "\'"))
      nontrouve = true
      while (distancePointDroite(N[i], d) < 3 || nontrouve) {
        nontrouve = true
        if (distancePointDroite(N[i], d) < 3) {
          N[i].x = calcul(randint(-80, 80, 0) / 10)
          N[i].y = calcul(randint(-80, 80, 0) / 10)
        }
        else {
          assezloin = true
          for (let j = 0; j < i; j++) {
            if (longueur(N[i], N[j]) < 4.5) assezloin = false
          }
          if (assezloin == false) {//Ã©loigner les points donc les grilles
            N[i].x = calcul(randint(-80, 80, 0) / 10)
            N[i].y = calcul(randint(-80, 80, 0) / 10)
          }
          else nontrouve = false
        }
      }
    }

    objets_enonce.push(d)
    objets_correction.push(d, tracePoint(A, B))

    for (let i = 0; i < nbpoints; i++) {
      cellules.push(celluleAlea(4))
      result = dansLaCibleCarree(N[i].x, N[i].y, 4, 0.6, cellules[i])
      cible = cibleCarree({ x: result[0], y: result[1], rang: 4, num: i + 1, taille: 0.6 })
      cible.taille = 0.6
      cible.color = 'orange'
      cible.opacite = 0.7
      cibles.push(cible)
    }
    for (let i = 0; i < nbpoints; i++) {
      M.push(symetrieAxiale(N[i], d, noms[i]))
      objets_enonce.push(tracePoint(M[i]), labelPoint(M[i]), cibles[i])
      objets_correction.push(tracePoint(M[i], N[i]), labelPoint(M[i], N[i]), cibles[i])
      objets_correction.push(segment(M[i], N[i], arcenciel(i)), codageMediatrice(M[i], N[i], arcenciel(i + 5), marks[i]))
      objets_correction.push(traceCompas(A, N[i], 20), traceCompas(B, N[i], 20))
      texte_corr += `$${noms[i]}\'$, le symÃ©trique du point $${noms[i]}$ est dans la case ${cellules[i]} de la grille ${i + 1}.<br>`
    }

    for (let i = 0; i < nbpoints; i++) {
      xMin = Math.min(xMin, N[i].x - 3, M[i].x - 3)
      yMin = Math.min(yMin, N[i].y - 3, M[i].y - 3)
      xMax = Math.max(xMax, N[i].x + 3, M[i].x + 3)
      yMax = Math.max(yMax, N[i].y + 3, M[i].y + 3)
    }

    fenetreMathalea2d = [xMin, yMin, xMax, yMax]

    this.liste_questions.push(mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.7 }, objets_enonce))
    this.liste_corrections.push(texte_corr + mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.7 }, objets_correction))
    liste_de_question_to_contenu(this)

    //  let nonchoisi,coords=[],x,y,objets_enonce=[],objets_correction=[],nomd,label_pos

  }
  this.besoin_formulaire_numerique = ['Nombre de points (1 Ã  5)', 5, "1\n2\n3\n4\n5"];
  // this.besoin_formulaire2_case_a_cocher = ["Avec des points de part et d'autre"];	
}
/**
 * Construction de mÃ©diatrices avec dispositif d'auto-correction alÃ©atoire
 * Ref 6G25
 * @Auteur Jean-Claude Lhote
 * PubliÃ© le 30/11/2020
 */
function Construire_mediatrices_6e() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Construire des mÃ©diatrices avec cible auto-corrective";
  this.consigne = "";
  this.nb_questions = 1;
  this.nb_questions_modifiable = false
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 3;
  this.nouvelle_version = function () {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let result = [0, 0], texte_corr = "", texte = "", num1, num2
    if (sortie_html) {
      num1 = `<tspan dy="5" style="font-size:70%">`
      num2 = `</tspan><tspan dy="-5">)</tspan>`
    }
    else {
      num1 = `_`
      num2 = `)`
    }
    let celluleAlea = function (rang) {
      let lettre = lettre_depuis_chiffre(randint(1, rang))
      let chiffre = Number(randint(1, rang)).toString()
      return lettre + chiffre
    }
    // On prÃ©pare la figure...
    let noms = choisit_lettres_differentes(4, 'QI', majuscule = true)
    texte = `Construire la mÃ©diatrice $(d_1)$ du segment $[${noms[0]}${noms[1]}]$ et la mÃ©diatrice $(d_2)$ du segment $[${noms[2]}${noms[3]}]$.<br>`
    texte += `Prolonger les droites $(d_1)$ et $(d_2)$ pour obtenir leur point d'intersection.<br>`
    let marks = ['/', '//', '///', 'x', 'o', 'S', 'V']
    let I = point(0, 0, 'I')
    let A = pointAdistance(I, randint(3, 6))
    let B = similitude(A, I, randint(65, 150), randint(8, 15) / 10)
    let medA = droite(I, A, `(d${num1}1${num2}`), medB = droite(I, B, `(d${num1}2${num2}`)

    let dA = droiteParPointEtPerpendiculaire(A, medA)
    let dB = droiteParPointEtPerpendiculaire(B, medB)
    medA.color = 'blue'
    medB.color = 'green'
    let cA = cercle(A, calcul(randint(25, 40) / 20))
    let cB = cercle(B, calcul(randint(45, 60) / 20))
    let A1 = pointIntersectionLC(dA, cA, noms[0], 1)
    let A2 = pointIntersectionLC(dA, cA, noms[1], 2)
    let B1 = pointIntersectionLC(dB, cB, noms[2], 1)
    let B2 = pointIntersectionLC(dB, cB, noms[3], 2)
    let sA = segmentAvecExtremites(A1, A2)
    let sB = segmentAvecExtremites(B1, B2)
    sA.color = 'black'
    sB.color = 'black'


    let cible, objets_enonce = [], objets_correction = [], cellule
    let xMin, yMin, xMax, yMax
    let nomA1 = texteParPoint(noms[0], homothetie(A1, A2, 1.1), 'milieu', 'black', 1, '', true)
    let nomA2 = texteParPoint(noms[1], homothetie(A2, A1, 1.1), 'milieu', 'black', 1, '', true)
    let nomB1 = texteParPoint(noms[2], homothetie(B1, B2, 1.1), 'milieu', 'black', 1, '', true)
    let nomB2 = texteParPoint(noms[3], homothetie(B2, B1, 1.1), 'milieu', 'black', 1, '', true)

    cellule = celluleAlea(6)
    result = dansLaCibleCarree(I.x, I.y, 6, 0.6, cellule)
    cible = cibleCarree({ x: result[0], y: result[1], rang: 6, taille: 0.6 })
    cible.taille = 0.6
    cible.color = 'orange'
    cible.opacite = 0.7

    objets_enonce.push(cible, sA, sB, nomA1, nomA2, nomB1, nomB2)
    objets_correction.push(cible, sA, sB, tracePoint(I), labelPoint(I), nomA1, nomA2, nomB1, nomB2)
    objets_correction.push(medA, medB, codageMediatrice(A1, A2, 'blue', marks[1]), codageMediatrice(B1, B2, 'green', marks[2]))

    //      objets_correction.push(segment(M[i],N[i],arcenciel(i)),codageMediatrice(M[i],N[i],arcenciel(i+5),marks[i])) 
    //      objets_correction.push(traceCompas(A1,N[i],20),traceCompas(B,N[i],20))
    texte_corr += `Le point $I$ d'intersection des deux mÃ©diatrices est dans la case ${cellule} de la grille.<br>`
    xMin = Math.min(A1.x - 1, A2.x - 1, B1.x - 1, B2.x - 1, I.x - 4)
    yMin = Math.min(A1.y - 1, A2.y - 1, B1.y - 1, B2.y - 1, I.y - 4)
    xMax = Math.max(A1.x + 1, A2.x + 1, B1.x + 1, B2.x + 1, I.x + 4)
    yMax = Math.max(A1.y + 1, A2.y + 1, B1.y + 1, B2.y + 1, I.y + 4)

    fenetreMathalea2d = [xMin, yMin, xMax, yMax]

    this.liste_questions.push(texte + mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.7 }, objets_enonce))
    this.liste_corrections.push(texte_corr + mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.7 }, objets_correction))
    liste_de_question_to_contenu(this)

    //  let nonchoisi,coords=[],x,y,objets_enonce=[],objets_correction=[],nomd,label_pos

  }
}

/**
 * Ref 6G32-1
 * PubliÃ© le 26/10/2020
 * @Auteur Jean-Claude Lhote
 */
function Symetrie_axiale_conservation1() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "PropriÃ©tÃ©s de conservation de la symÃ©trie axiale";
  this.consigne = "";
  this.nb_questions = 4;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles = ["Segment", "Droite", "1/2droite", "Triangle", "Angle"];
    let points = [], traces = [], nom = [], alternance
    for (let i = 0; i < 25; i++) nom.push(lettre_depuis_chiffre(i + 1))
    let noms = shuffle(nom)

    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions);
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    this.liste_questions.push(`${texte_gras('Dans la symÃ©trie d\'axe (d)...')}`);
    this.liste_corrections.push(`${texte_gras('Dans la symÃ©trie d\'axe (d)...')}`);
    // On prÃ©pare la figure...
    let axe = parseInt(this.sup)
    let d, nonchoisi, coords = [], x, y, objets_enonce = [], objets_correction = [], nomd, label_pos
    if (axe == 5) axe = randint(1, 4) //choix de l'axe et des coordonnÃ©es
    switch (axe) {
      case 1: d = droite(1, 0, 0);
        nomd = texteParPosition('(d)', 0.3, 5.6)
        label_pos = 'above left'
        for (let i = 0; i < 12; i++) {
          nonchoisi = false
          while (!nonchoisi) { // Le nouveau point est-il dÃ©jÃ  dans la liste ?
            [x, y] = [randint(-5, 0), randint(-5, 5)]
            nonchoisi = true
            for (let j = 0; j < i; j++)
              if (coords[j][0] == x && coords[j][1] == y) nonchoisi = false
          }
          coords.push([x, y]) //on stocke les 12 points
        }
        for (let j = 0; j < 12; j++) coords.push([-coords[j][0], coords[j][1]]) // on stocke les 12 images
        break;
      case 2: d = droite(0, 1, 0);
        label_pos = 'above'
        nomd = texteParPosition('(d)', 5.6, 0.3)
        for (let i = 0; i < 12; i++) {
          nonchoisi = false
          while (!nonchoisi) { // Le nouveau point est-il dÃ©jÃ  dans la liste ?
            [x, y] = [randint(-5, 5), randint(-5, 0)]
            nonchoisi = true
            for (let j = 0; j < i; j++)
              if (coords[j][0] == x && coords[j][1] == y) nonchoisi = false
          }
          coords.push([x, y]) //on stocke les 12 points
        }
        for (let j = 0; j < 12; j++) coords.push([coords[j][0], -coords[j][1]]) // on stocke les 12 images
        break;
      case 3: d = droite(1, -1, 0);
        label_pos = 'above'
        nomd = texteParPosition('(d)', -5.8, -5.4)
        for (let i = 0; i < 12; i++) {
          nonchoisi = false
          while (!nonchoisi) { // Le nouveau point est-il dÃ©jÃ  dans la liste ?
            x = randint(-5, 5)
            y = randint(x, 5)
            nonchoisi = true
            for (let j = 0; j < i; j++)
              if (coords[j][0] == x && coords[j][1] == y) nonchoisi = false
          }
          coords.push([x, y]) //on stocke les 12 points
        }
        for (let j = 0; j < 12; j++) coords.push([coords[j][1], coords[j][0]]) // on stocke les 12 images
        break;
      case 4: d = droite(1, 1, 0);
        label_pos = 'above'
        nomd = texteParPosition('(d)', -5.8, 5.4)
        for (let i = 0; i < 12; i++) {
          nonchoisi = false
          while (!nonchoisi) { // Le nouveau point est-il dÃ©jÃ  dans la liste ? Si oui, on recommence.
            x = randint(-5, 5)
            y = randint(-5, -x)
            nonchoisi = true
            for (let j = 0; j < i; j++)
              if (coords[j][0] == x && coords[j][1] == y)
                nonchoisi = false;
          }
          coords.push([x, y]) //on stocke les 12 points
        }
        for (let j = 0; j < 12; j++)
          coords.push([-coords[j][1], -coords[j][0]]); // on stocke les 12 images
        break;
    }
    for (let i = 0; i < 24; i++) {
      if (i < 12) points.push(point(coords[i][0], coords[i][1], noms[i], label_pos))
      else if (coords[i][0] == coords[i - 12][0] && coords[i][1] == coords[i - 12][1]) {
        points.push(point(coords[i][0], coords[i][1], noms[i - 12], label_pos))
        noms[i] = noms[i - 12]
      }
      else points.push(point(coords[i][0], coords[i][1], noms[i], label_pos))
      traces.push(tracePoint(points[i]));
    }
    // On rÃ©dige les questions et les rÃ©ponses
    if (this.sup2 == true) alternance = 2
    else alternance = 1
    function index(i) {
      return (i + 12 * (i % alternance)) % 24
    }
    objets_enonce.length = 0
    objets_correction.lenght = 0
    for (let i = 0, texte, texte_corr, choix, cpt = 0; i < this.nb_questions && cpt < 50;) {

      switch (liste_type_de_questions[i]) {
        case "Segment":
          choix = randint(0, 10) + randint(0, 1) * 12
          texte = `Quel est le symÃ©trique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ ?`
          texte_corr = `Le symÃ©trique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ est le segment $[${noms[index(choix + 12)]}${noms[index(choix + 13)]}]$.`
          s1 = segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2))
          s2 = segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2))
          s1.epaisseur = 2
          s2.epaisseur = 2
          objets_correction.push(s1, s2)
          break;
        case "Droite":
          choix = randint(0, 10) + randint(0, 1) * 12
          texte = `Quel est la symÃ©trique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`
          texte_corr = `La symÃ©trique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ est la droite $(${noms[index(choix + 12)]}${noms[index(choix + 13)]})$.`
          objets_correction.push(droite(points[index(choix)], points[index(choix + 1)], "", texcolors(i * 3 + 2)))
          objets_correction.push(droite(points[index(choix + 12)], points[index(choix + 13)], "", texcolors(i * 3 + 2)))
          break;
        case "1/2droite":
          choix = randint(0, 10) + randint(0, 1) * 12
          texte = `Quel est la symÃ©trique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`
          texte_corr = `La symÃ©trique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ est la demi-droite $[${noms[index(choix + 12)]}${noms[index(choix + 13)]})$`
          objets_correction.push(demiDroite(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))
          objets_correction.push(demiDroite(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))
          break;
        case "Triangle":
          choix = randint(0, 9) + randint(0, 1) * 12
          texte = `Quel est le symÃ©trique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ ?`
          texte_corr = `Le symÃ©trique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ est le triangle $${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}$.`
          objets_correction.push(polygone([points[index(choix)], points[index(choix + 1)], points[index(choix + 2)]], texcolors(i * 3 + 2)))
          objets_correction.push(polygone([points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)]], texcolors(i * 3 + 2)))
          break;
        case "Angle":
          choix = randint(0, 9) + randint(0, 1) * 12
          texte = `Quel est le symÃ©trique de l'angle $\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ ?`
          texte_corr = `Le symÃ©trique de l'angle $\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ est l'angle $\\widehat{${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}}$.`
          objets_correction.push(codeAngle(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))
          objets_correction.push(codeAngle(points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))
          objets_correction.push(segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))
          objets_correction.push(segment(points[index(choix + 1)], points[index(choix + 2)], texcolors(i * 3 + 2)))
          objets_correction.push(segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))
          objets_correction.push(segment(points[index(choix + 13)], points[index(choix + 14)], texcolors(i * 3 + 2)))

          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    d.isVisible = true;
    objets_enonce.push(nomd, d);
    objets_correction.push(nomd, d);
    for (let i = 0; i < 24; i++) {
      objets_enonce.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))
      objets_correction.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))

    }
    this.liste_questions.push(mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1 }, objets_enonce))
    this.liste_corrections.push(mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1 }, objets_correction))
    liste_de_question_to_contenu_sans_numero(this);

  }
  this.besoin_formulaire_numerique = ['Type d\'axe', 5, "1 : Axe vertical\n2 : Axe horizontal\n3 : Axe oblique 1\n4 : Axe oblique 2\n5 : Axe alÃ©atoire"];
  this.besoin_formulaire2_case_a_cocher = ["Avec des points de part et d'autre"];
}


/**
 * Reconnaitre un quadrilatÃ¨re particulier Ã  partir de ses propriÃ©tÃ©s
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G33
*/
function Reconnaitre_quadrilatere_particulier() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Reconnaitre un quadrilatÃ¨re particulier Ã  partir de ses propriÃ©tÃ©s";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_questions_modifiable = false;
  this.nb_cols = 2; // Nombre de colonnes pour la sortie LaTeX
  this.nb_cols_corr = 2; // Nombre de colonnes dans la correction pour la sortie LaTeX
  this.correction_detaillee_disponible = true;
  sortie_html ? this.correction_detaillee = true : this.correction_detaillee = false

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let liste_de_questions = shuffle([choice(['losange1','losange2']),choice(['rectangle1','rectangle2']),choice(['carre1','carre2','carre3'])])
    for (let i = 0, texte, texte_corr,cpt = 0; i < this.nb_questions && cpt < 50;)
     {
      texte = '';
      texte_corr = '';
      let A,B,C,D,O,ABCD,codage,codage1,codage2,codage3,codage4,sAC,sBD,sOA,sOB,sOC,sOD,marquesDemiDiagonales,marquesDemiDiagonales1,marquesDemiDiagonales2;
      switch (liste_de_questions[i]) {
          case 'losange1':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant 4 cÃ´tÃ©s de mÃªme longueur ?";
              A = point(0, 0);
              B = point(2, 3);
              C = point(0, 6);
              D = point(-2, 3);
              O = point(0, 3);
              ABCD = polygone(A, B, C, D);
              //codage = codageAngleDroit(C, O, B);
              marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              // sAC = segment(A, C);
              // sBD = segment(B, D);
              // sOA = segment(O, A);
              // sOB = segment(O, B);
              // sOC = segment(O, C);
              // sOD = segment(O, D);
              // sAC.pointilles = true;
              // sBD.pointilles = true;
              // marquesDemiDiagonales = codeSegments("|", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-3,xmax:3,ymin:-1,ymax:7},ABCD,marquesCotes)+"<br>"}
              texte_corr += "C'est un losange."
              break;
          case 'losange2':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant ses diagonales perpendiculaires et sÃ©cantes en leur milieu ?";
              A = point(0, 0);
              B = point(2, 3);
              C = point(0, 6);
              D = point(-2, 3);
              O = point(0, 3);
              ABCD = polygone(A, B, C, D);
              codage = codageAngleDroit(C, O, B);
              //marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              sAC = segment(A, C);
              sBD = segment(B, D);
              sOA = segment(O, A);
              sOB = segment(O, B);
              sOC = segment(O, C);
              sOD = segment(O, D);
              sAC.pointilles = true;
              sBD.pointilles = true;
              marquesDemiDiagonales1 = codeSegments("|", "blue", O, A, O, C);
              marquesDemiDiagonales2 = codeSegments("|||", "blue", O, B, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-3,xmax:3,ymin:-1,ymax:7},ABCD,codage,sAC,sBD,marquesDemiDiagonales1,marquesDemiDiagonales2)+"<br>"}
              texte_corr += "C'est un losange."
              break;
          case 'rectangle1':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant 3 angles droits ?";
              A = point(0, 0);
              B = point(5, 0);
              C = point(5, 3);
              D = point(0, 3);
              O = point(2.5, 1.5);
              ABCD = polygone(A, B, C, D);
              codage1 = codageAngleDroit(A,B,C);
              codage2 = codageAngleDroit(B,C,D);
              codage3 = codageAngleDroit(C,D,A);
              //marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              // sAC = segment(A, C);
              // sBD = segment(B, D);
              // sOA = segment(O, A);
              // sOB = segment(O, B);
              // sOC = segment(O, C);
              // sOD = segment(O, D);
              // sAC.pointilles = true;
              // sBD.pointilles = true;
              // marquesDemiDiagonales = codeSegments("||", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-1,xmax:6,ymin:-1,ymax:4},ABCD,codage1,codage2,codage3)+"<br>"}
              texte_corr += "C'est un rectangle."
              break;
          case 'rectangle2':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant ses diagonales de mÃªme longueur et sÃ©cantes en leur milieu ?";
              A = point(0, 0);
              B = point(5, 0);
              C = point(5, 3);
              D = point(0, 3);
              O = point(2.5, 1.5);
              ABCD = polygone(A, B, C, D);
              // codage1 = codageAngleDroit(A,B,C);
              // codage2 = codageAngleDroit(B,C,D);
              // codage3 = codageAngleDroit(C,D,A);
              //marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              sAC = segment(A, C);
              sBD = segment(B, D);
              // sOA = segment(O, A);
              // sOB = segment(O, B);
              // sOC = segment(O, C);
              // sOD = segment(O, D);
              // sAC.pointilles = true;
              // sBD.pointilles = true;
              marquesDemiDiagonales = codeSegments("||", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-1,xmax:6,ymin:-1,ymax:4},ABCD,marquesDemiDiagonales,sAC,sBD)+"<br>"}
              texte_corr += "C'est un rectangle."
              break;
          case 'carre1':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant ses 4 cÃ´tÃ©s de mÃªme longueur et 4 angles droits ?";
              A = point(0, 0);
              B = point(3, 0);
              C = point(3, 3);
              D = point(0, 3);
              O = point(1.5, 1.5);
              ABCD = polygone(A, B, C, D);
              codage1 = codageAngleDroit(A,B,C);
              codage2 = codageAngleDroit(B,C,D);
              codage3 = codageAngleDroit(C,D,A);
              codage4 = codageAngleDroit(D,A,B);
              marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              // sAC = segment(A, C);
              // sBD = segment(B, D);
              // sOA = segment(O, A);
              // sOB = segment(O, B);
              // sOC = segment(O, C);
              // sOD = segment(O, D);
              // sAC.pointilles = true;
              // sBD.pointilles = true;
              // marquesDemiDiagonales = codeSegments("||", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage1,codage2,codage3,marquesCotes)+"<br>"}
              texte_corr += "C'est un carrÃ©."
              break;
          case 'carre2':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant ses ses diagonales perpendiculaires, de mÃªme longueur et sÃ©cantes en leur milieu ?";
              A = point(0, 0);
              B = point(3, 0);
              C = point(3, 3);
              D = point(0, 3);
              O = point(1.5, 1.5);
              ABCD = polygone(A, B, C, D);
              codage = codageAngleDroit(C,O,D);
              // codage2 = codageAngleDroit(B,C,D);
              // codage3 = codageAngleDroit(C,D,A);
              // codage4 = codageAngleDroit(D,A,B);
              // marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              sAC = segment(A, C);
              sBD = segment(B, D);
              sOA = segment(O, A);
              sOB = segment(O, B);
              sOC = segment(O, C);
              sOD = segment(O, D);
              sAC.pointilles = true;
              sBD.pointilles = true;
              marquesDemiDiagonales = codeSegments("||", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage,marquesDemiDiagonales,sAC,sBD)+"<br>"}
              texte_corr += "C'est un carrÃ©."
              break;
          case 'carre3':
              texte = "Quelle est la nature d'un quadrilatÃ¨re ayant ses 4 cÃ´tÃ©s de mÃªme longueur et un angle droit ?";
              A = point(0, 0);
              B = point(3, 0);
              C = point(3, 3);
              D = point(0, 3);
              O = point(1.5, 1.5);
              ABCD = polygone(A, B, C, D);
              codage = codageAngleDroit(A,B,C);
              // codage2 = codageAngleDroit(B,C,D);
              // codage3 = codageAngleDroit(C,D,A);
              // codage4 = codageAngleDroit(D,A,B);
              marquesCotes = codeSegments("||", "blue", A, B, B, C, C, D, D, A);
              // sAC = segment(A, C);
              // sBD = segment(B, D);
              // sOA = segment(O, A);
              // sOB = segment(O, B);
              // sOC = segment(O, C);
              // sOD = segment(O, D);
              // sAC.pointilles = true;
              // sBD.pointilles = true;
              // marquesDemiDiagonales = codeSegments("||", "blue", O, A, O, B, O, C, O, D);
              if (this.correction_detaillee) {texte_corr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage,marquesCotes)+"<br>"}
              texte_corr += "C'est un carrÃ©."
              break;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3,'1 : ....\n2 : .....,\n3 : .....];
}


// Exercices paramÃ©trÃ©s pour correspondre au rÃ©fÃ©rentiel
// RÃ©fÃ©rence 5P10
//function Proportionnalite_pas_proportionnalite_5e(){
//  Proportionnalite_pas_proportionnalite.call(this)
// Pas de paramÃ¨tres Sup
//}

// RÃ©fÃ©rence 6C23
function Exercice_additionner_des_fractions_6e() {
  Exercice_additionner_ou_soustraire_des_fractions_5e.call(this);
  this.sup2 = 1;
  this.level = 6;
  this.titre = "Additionner des fractions de mÃªme dÃ©nominateur";
  this.besoin_formulaire_numerique2 = false;
}
/**
 * @Auteur Jean-Claude Lhote
 * vocabulaire arÃªte, face, perpendicularitÃ© dans l'espace, parallÃ©lisme dans l'espace
 * rÃ©fÃ©rence : 6G43
 */
function Utiliser_vocabulaire_pave() {
  Solide_6e.call(this);
  this.titre = "Utiliser le vocabulaire associÃ© au pavÃ© droit"
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G11
 */
function Tracer_des_perpendiculaires() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des perpendiculaires";
  this.sup = 1;
  this.besoin_formulaire_numerique = false;
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G12
 */
function Tracer_des_paralleles() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des parallÃ¨les";
  this.sup = 2;
  this.besoin_formulaire_numerique = false;
}
/**
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G12-1
 */
function Tracer_des_perpendiculaires_et_des_paralleles() {
  Parallele_et_Perpendiculaires.call(this);
  this.titre = "Tracer des perpendiculaires et des parallÃ¨les";
  this.sup = 3;
  this.besoin_formulaire_numerique = false;
}
/**
 * Exercice en html seulement. SymÃ©trie centrale dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 5G12
 */
function Pavages_et_demi_tour() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie centrale dans un pavage (sortie Latex Impossible)";
  this.sup = 2;
}
/**
 * Exercice en html seulement. SymÃ©trie axiale dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6G25-2
 */
function Pavages_et_symetries() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une symÃ©trie axiale dans un pavage carrÃ© (sortie Latex Impossible)";
  this.sup = 1;
}
/**
 * Exercice en html seulement. Translations dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 4G11-1
 */
function Pavages_et_translation() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une translation dans un pavage (sortie Latex Impossible)";
  this.sup = 3;
}
/**
 * Exercice en html seulement. Rotationss dans un pavage.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 3G12-1
 */
function Pavages_et_rotation() {
  Pavages_et_transformations.call(this);
  this.titre =
    "Trouver l'image d'une figure par une rotation de 90 degrÃ©s dans un pavage (sortie Latex Impossible)";
  this.sup = 4;
}

/**
 * Lire les coordonnÃ©es d'un point du quart de plan positif avec une prÃ©cision allant de l'unitÃ© Ã  0,25.
 * @Auteur Jean-Claude Lhote
 * rÃ©fÃ©rence 6N33
 */
function Reperage_point_du_quart_de_plan() {
  Reperage_point_du_plan.call(this);
  this.titre = "DÃ©terminer les coordonnÃ©es (positives) d'un point";
  this.quart_de_plan = true;
}
// 3F21
function Lecture_expression_fonctions_lineaires() {
  Lecture_expression_fonctions_affines.call(this);
  this.titre = "DÃ©terminer une fonction linÃ©aire";
  this.lineaire = true;
}
// RÃ©fÃ©rence 6C21

function Divisions_euclidiennes_niv2() {
  Divisions_euclidiennes.call(this);
  this.sup = 2;
  this.titre = "Divisions euclidiennes - Niveau 2";
}
//4G40
function Exercice_Trigo_longueurs_4e() {
  Exercice_Trigo_longueurs.call(this);
  this.sup = 1;
  this.besoin_formulaire_numerique = false;
  this.titre =
    "Utiliser le cosinus pour calculer une longueur dans un triangle rectangle";
}
// 4G41
function Exercice_Trigo_angles_4e() {
  this.sup = 1;
  this.quatrieme = true;
  this.titre =
    "Utiliser le cosinus pour calculer la mesure d'un angle dans un triangle rectangle";
  Exercice_Trigo_angles.call(this);
}
// rÃ©fÃ©rence 6G24
function Transformations_6e() {
  Transformations.call(this);
  this.sup = 1;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale`;
  this.pas_de_version_LaTeX = true;
}

// 5G10
function Symetrie_axiale_5e() {
  Transformations.call(this);
  this.sup = 1;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale`;
  this.pas_de_version_LaTeX = true;
}
// 5G11
function Transformations_5e() {
  Transformations.call(this);
  this.sup = 2;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale ou centrale`;
  this.pas_de_version_LaTeX = true;
}
// 4G40
function Transformations_4e() {
  Transformations.call(this);
  this.sup = 3;
  this.titre = `Trouver l'image d'un point par une symÃ©trie axiale ou centrale ou par une translation`;
  this.pas_de_version_LaTeX = true;
}
// 3G10-2
function Transformations_3e() {
  Transformations.call(this);
  this.sup = 4;
  this.titre = `Trouver l'image d'un point par une transformation choisie alÃ©atoirement`;
  this.pas_de_version_LaTeX = true;
}

function Exercice_6N13() {
  this.sup = 1;
  this.titre = "Utiliser les prÃ©fixes multiplicateurs (dÃ©ca Ã  kilo)";
  Exercice_conversions.call(this);
}
// 6N24
function Exercice_6N24() {
  Exercice_conversions.call(this);
  this.sup = 3;
  this.titre =
    "Utiliser les prÃ©fixes multiplicateurs et diviseurs (milli Ã  kilo)";
  this.correction_avec_des_fractions = true;
  this.spacing_corr = 2;
}
// RÃ©fÃ©rence 6M12
function Reglages_6M12() {
  Exercice_conversions_de_longueurs.call(this);
  this.sup = 3;
  this.nb_questions = 8;
}

function Reglages_6M23() {
  Exercice_conversions_aires.call(this);
  this.sup = 3;
  this.nb_cols_corr = 1;
}
// RÃ©fÃ©rence 6M10
function Reglages_6M10() {
  Exercice_perimetres_et_aires.call(this);
  this.sup = 1;
}
// RÃ©fÃ©rence 6M22
function Reglages_6M22() {
  Exercice_perimetres_et_aires.call(this);
  this.sup = 2;
  this.titre = "PÃ©rimÃ¨tres et aires de disques (Ã  partir d'un texte).";
}

function Reglages_6N34() {
  Exercice_conversions.call(this);
  this.sup = 5;
  this.titre = "Conversions avec tous les prÃ©fixes de milli Ã  tera.";
}

// 4G30-1
function Thales_4eme() {
  //Dans cette version, pas de configuration papillon reservÃ©e aux 3Ã¨mes.
  Exercice_Thales.call(this);
  this.titre = "Calculer des longueurs avec la propriÃ©tÃ© de ThalÃ¨s (MG32)"
  this.quatrieme = true;
  sortie_html ? this.spacing = 1.5 : this.spacing = 1;
}
// 4G31
function Reciproque_Thales_4eme() {
  Reciproque_Thales.call(this);
  this.quatrieme = true;
}

// 4G30
function Thales2D_4e(params) {
  Thales2D.call(this);
  this.besoin_formulaire_numerique = false
  this.titre = "Calculer des longueurs avec la propriÃ©tÃ© de ThalÃ¨s";

}

// 3G20
function Thales2D_3e(params) {
  Thales2D.call(this);
  this.sup = 2;
}

/**
 * Vocabulaire des triangles
 * 6G20-2 ; 5G20-1
 * @author SÃ©bastien Lozano
 */

function Vocabulaire_des_triangles() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.consigne = "Donner la nature des triangles en justifiant.";
  this.sup = 1;
  this.sup2 = false;
  this.titre = "Vocabulaire des triangles";
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.nb_questions_modifiable = false;

  this.liste_packages = `bclogo`;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.classe == 6) {
      if (this.sup == 1) {
        this.nb_questions = 4;
      } else {
        //this.nb_questions = 9;
        this.nb_questions = 5;
      }
    } else if (this.classe == 5) {
      //this.nb_questions = 11;
      this.nb_questions = 5;
    }

    let texte_intro = ``;
    if (sortie_html) {
      if (this.classe == 6) {
        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle isocÃ¨le</b> est un triangle qui a deux cÃ´tÃ©s de mÃªme longueur.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle Ã©quilatÃ©ral</b> est un triangle qui a trois cÃ´tÃ©s de mÃªme longueur.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;
      } else if (this.classe == 5) {
        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle isocÃ¨le</b> est un triangle qui a deux cÃ´tÃ©s ou deux angles de mÃªme mesure.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle Ã©quilatÃ©ral</b> est un triangle qui a trois cÃ´tÃ©s ou trois angles de mÃªme mesure.`;
        texte_intro += `<br>`;
        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;
      }
      // this.introduction = lampe_message({
      // 	titre : `Quelques dÃ©finitions`,
      // 	texte : texte_intro,
      // 	couleur : `nombres`
      // });

      this.bouton_aide = modal_texte_long(
        numero_de_l_exercice,
        //`<i class="lightbulb outline icon"></i> Quelques dÃ©finitions`,
        `<i class="info circle icon"></i> Quelques dÃ©finitions`,
        texte_intro,
        "Aide",
        "info circle"
      );
    } else {
      if (this.classe == 6) {
        texte_intro = tex_enumerate_sans_numero(
          [
            `- Un \\textbf{triangle quelconque} est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`,
            `- Un \\textbf{triangle isocÃ¨le} est un triangle qui a deux cÃ´tÃ©s de mÃªme longueur.`,
            `- Un \\textbf{triangle Ã©quilatÃ©ral} est un triangle qui a trois cÃ´tÃ©s de mÃªme longueur.`,
            `- Un \\textbf{triangle rectangle} est un triangle qui a un angle droit.`,
          ],
          1
        );
      } else if (this.classe == 5) {
        texte_intro = tex_enumerate_sans_numero(
          [
            `- Un \\textbf{triangle quelconque} est un triangle qui ne prÃ©sente aucune relation particuliÃ¨re entre ses angles ou ses cÃ´tÃ©s.`,
            `- Un \\textbf{triangle isocÃ¨le} est un triangle qui a deux cÃ´tÃ©s ou deux angles de mÃªme mesure.`,
            `- Un \\textbf{triangle Ã©quilatÃ©ral} est un triangle qui a trois cÃ´tÃ©s ou trois angles de mÃªme mesure.`,
            `- Un \\textbf{triangle rectangle} est un triangle qui a un angle droit.`,
          ],
          1
        );
      }

      this.introduction = lampe_message({
        titre: `Quelques dÃ©finitions`,
        texte: texte_intro,
        couleur: `nombres`,
      });
    }

    if (this.classe == 6) {
      if (this.sup == 1) {
        type_de_questions_disponibles = [1, 3, 5, 7]; //6e facile isocÃ¨le, Ã©quilatÃ©ral et rectangle.
      } else if (this.sup == 2) {
        //type_de_questions_disponibles = [1,3,4,5,6,7,8,9]; //6e tout sauf par les angles
        type_de_questions_disponibles = [1, 4, 6, 8, 9]; //6e les autres cas sauf par les angles
      }
    } else if (this.classe == 5) {
      // type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10,11]; // 5e : on ajoute la caractÃ©isation par les angles
      type_de_questions_disponibles = [
        choice([1, 2]),
        choice([3, 4, 10]),
        choice([5, 6, 11]),
        7,
        choice([8, 9]),
      ]; // 5e : tout sauf les basiques de 6e, on ajoute la caractÃ©isation par les angles
    }
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    ); // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    //let liste_type_de_questions = type_de_questions_disponibles // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, l1, l2, l3, a1, a2, a3, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      // on fixe longueur min et max en cm
      let l_min = 2;
      let l_max = 20;
      // on fixe angle min et max en degrÃ©
      let a_min = 30;
      let a_max = 100;

      // on crÃ©e les triangles
      let triangle_quelconque = new Triangles();
      let triangle_isocele = new Triangles();
      let triangle_equilateral = new Triangles();
      let triangle_rectangle = new Triangles();
      let triangle_isocele_rectangle = new Triangles();
      let partieDecimale1, partieDecimale2, partieDecimale3;
      if (this.sup2) {
        partieDecimale1 = calcul(randint(1, 9) / 10 * randint(0, 1));
        partieDecimale2 = calcul(randint(1, 9) / 10 * randint(0, 1));
        partieDecimale3 = calcul(randint(1, 9) / 10 * randint(0, 1));
      }
      else {
        partieDecimale1 = 0;
        partieDecimale2 = 0;
        partieDecimale3 = 0;
      }
      switch (liste_type_de_questions[i]) {
        case 1: // triangle quelconque par les longueurs sans conversion
          while (!triangle_quelconque.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            l3 = randint(l_min, l_max, [l1, l2]);
            triangle_quelconque.l1 = l1 + partieDecimale1;
            triangle_quelconque.l2 = l2 + partieDecimale2;
            triangle_quelconque.l3 = l3 + partieDecimale3;
          }

          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${triangle_quelconque.getLongueurs()[0]
            } $= ${tex_nombre(triangle_quelconque.l1)}$ cm ; `;
          texte += `${triangle_quelconque.getLongueurs()[1]} $= ${tex_nombre(triangle_quelconque.l2)
            }$ cm et ${triangle_quelconque.getLongueurs()[2]} $= ${tex_nombre(
              triangle_quelconque.l3)
            }$ cm.`;
          texte_corr = `Les 3 cÃ´tÃ©s du triangle ${triangle_quelconque.getNom()} sont diffÃ©rents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;
          break;
        case 2: // triangle quelconque par les angles
          while (!triangle_quelconque.isTrueTriangleAngles()) {
            a1 = randint(a_min, a_max);
            a2 = randint(a_min, a_max, a1);
            a3 = randint(a_min, a_max, [a1, a2]);
            triangle_quelconque.a1 = a1;
            triangle_quelconque.a2 = a2;
            triangle_quelconque.a3 = a3;
          }

          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${triangle_quelconque.getAngles()[0]
            } $= ${triangle_quelconque.a1}\\degree$ ; `;
          texte += ` ${triangle_quelconque.getAngles()[1]} $= ${triangle_quelconque.a2
            }\\degree$ et  ${triangle_quelconque.getAngles()[2]} $= ${triangle_quelconque.a3
            }\\degree$ .`;
          texte_corr = `Les 3 angles du triangle ${triangle_quelconque.getNom()} sont diffÃ©rents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;
          break;

        case 3: // triangle isocÃ¨le sans conversion
          while (!triangle_isocele.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            triangle_isocele.l1 = l1 + partieDecimale1;
            triangle_isocele.l2 = l1 + partieDecimale1;
            triangle_isocele.l3 = l2 + partieDecimale2;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getLongueurs()[0]
            } $= ${tex_nombre(triangle_isocele.l1)}$ cm ; `;
          texte += `${triangle_isocele.getLongueurs()[1]} $= ${tex_nombre(triangle_isocele.l2)
            }$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${tex_nombre(triangle_isocele.l3)
            }$ cm.`;
          texte_corr = `Les longueurs des cÃ´tÃ©s ${triangle_isocele.getCotes()[0]
            } et ${triangle_isocele.getCotes()[1]
            } du triangle ${triangle_isocele.getNom()} valent toutes les deux $${tex_nombre(triangle_isocele.l1)
            }$ cm donc ${triangle_isocele.getNom()} est un triangle isocÃ¨le en ${triangle_isocele.getSommets()[1]
            }.`;
          break;
        case 4: // triangle isocÃ¨le avec conversion
          while (!triangle_isocele.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            l2 = randint(l_min, l_max, l1);
            triangle_isocele.l1 = l1 + partieDecimale1;
            triangle_isocele.l2 = l1 + partieDecimale1;
            triangle_isocele.l3 = l2 + partieDecimale2;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getLongueurs()[0]
            } $= ${triangle_isocele.l1 * 10}$ mm ; `;
          texte += `${triangle_isocele.getLongueurs()[1]} $= ${tex_nombre(triangle_isocele.l2)
            }$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${tex_nombre(triangle_isocele.l3)
            }$ cm.`;
          texte_corr = `${triangle_isocele.getLongueurs()[0]} $= ${tex_nombre(triangle_isocele.l1 * 10)
            }$ mm $= ${tex_nombre(triangle_isocele.l1)}$ cm = ${triangle_isocele.getLongueurs()[1]
            }, ${triangle_isocele.getNom()} a donc deux cÃ´tÃ©s Ã©gaux, c'est un triangle isocÃ¨le en ${triangle_isocele.getSommets()[1]
            }.`;
          break;
        case 5: // triangle Ã©quilatÃ©ral sans conversion
          while (!triangle_equilateral.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            triangle_equilateral.l1 = l1 + partieDecimale1;
            triangle_equilateral.l2 = l1 + partieDecimale1;
            triangle_equilateral.l3 = l1 + partieDecimale1;
          }
          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getLongueurs()[0]
            } $= ${tex_nombre(triangle_equilateral.l1)}$ cm ; `;
          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${tex_nombre(triangle_equilateral.l2)
            }$ cm et ${triangle_equilateral.getLongueurs()[2]} $= ${tex_nombre(triangle_equilateral.l3)
            }$ cm.`;
          texte_corr = `Les longeurs des trois cÃ´tÃ©s du triangle ${triangle_equilateral.getNom()} sont Ã©gales donc c'est un triangle Ã©quilatÃ©ral.`;
          break;
        case 6: // triangle Ã©quilatÃ©ral avec conversion
          while (!triangle_equilateral.isTrueTriangleLongueurs()) {
            l1 = randint(l_min, l_max);
            triangle_equilateral.l1 = l1 + partieDecimale1;
            triangle_equilateral.l2 = l1 + partieDecimale1;
            triangle_equilateral.l3 = l1 + partieDecimale1;
          }
          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getLongueurs()[0]
            } $= ${tex_nombre(triangle_equilateral.l1)}$ cm ; `;
          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${tex_nombre(triangle_equilateral.l2 * 10)
            }$ mm et ${triangle_equilateral.getLongueurs()[2]} $= ${tex_nombre(
              triangle_equilateral.l3 / 10
            )}$ dm.`;
          texte_corr = `${triangle_equilateral.getLongueurs()[1]} $= ${tex_nombre(triangle_equilateral.l2 * 10)
            }$ mm $= ${triangle_equilateral.l2}$ cm.`;
          texte_corr += `<br> ${triangle_equilateral.getLongueurs()[2]
            } $= ${tex_nombre(triangle_equilateral.l3 / 10)}$ dm $= ${tex_nombre(triangle_equilateral.l3)
            }$ cm.`;
          texte_corr += `<br> ${triangle_equilateral.getLongueurs()[0]} $= ${tex_nombre(triangle_equilateral.l1)
            }$ cm.`;
          texte_corr += `<br> Les longeurs des trois cÃ´tÃ©s du triangle ${triangle_equilateral.getNom()} sont Ã©gales donc c'est un triangle Ã©quilatÃ©ral.`;
          break;
        case 7: // triangle rectangle pas de conversion necessaire
          l1 = randint(l_min, l_max);
          triangle_rectangle.l1 = l1 + partieDecimale1;
          triangle_rectangle.l2 = randint(l_min, l_max, l1) + partieDecimale2;
          triangle_rectangle.a1 = 90;

          texte = `${triangle_rectangle.getNom()} est un triangle tel que ${triangle_rectangle.getLongueurs()[0]
            } $= ${tex_nombre(triangle_rectangle.l1)}$ cm ; `;
          texte += `${triangle_rectangle.getLongueurs()[1]} $= ${tex_nombre(triangle_rectangle.l2)
            }$ cm `;
          texte += `et `;
          if (this.classe == 6) {
            texte += ` qui a un angle droit en ${triangle_rectangle.getSommets()[1]
              }.`;
            texte_corr = `Le triangle ${triangle_rectangle.getNom()} a un angle droit en ${triangle_rectangle.getSommets()[1]
              } donc ${triangle_rectangle.getNom()} est rectangle en ${triangle_rectangle.getSommets()[1]
              }.`;
          } else {
            texte += `${triangle_rectangle.getAngles()[0]} $= ${triangle_rectangle.a1
              }\\degree$.`;
            texte_corr = `L'angle ${triangle_rectangle.getAngles()[0]
              } du triangle ${triangle_rectangle.getNom()} est un angle droit donc ${triangle_rectangle.getNom()} est rectangle en ${triangle_rectangle.getSommets()[1]
              }.`;
          }

          break;
        case 8: // triangle isocÃ¨le rectangle sans conversion
          l1 = randint(l_min, l_max);
          triangle_isocele_rectangle.l1 = l1 + partieDecimale1;
          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;
          triangle_isocele_rectangle.a1 = 90;

          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${triangle_isocele_rectangle.getLongueurs()[0]
            }$= ${tex_nombre(triangle_isocele_rectangle.l1)}$ cm ; `;
          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${tex_nombre(triangle_isocele_rectangle.l2)
            }$ cm `;
          texte += `et `;
          if (this.classe == 6) {
            texte += `qui a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]
              } donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]
              } $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${tex_nombre(triangle_isocele_rectangle.l1)
              }$ cm donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
          } else {
            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${triangle_isocele_rectangle.a1
              }\\degree$.`;
            texte_corr = `L'angle ${triangle_isocele_rectangle.getAngles()[0]
              } du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]
              } $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${triangle_isocele_rectangle.l1
              }$ cm donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
          }
          break;
        case 9: // triangle isocÃ¨le rectangle avec conversion
          triangle_isocele_rectangle.l1 = randint(l_min, l_max) + partieDecimale1;
          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;
          triangle_isocele_rectangle.a1 = 90;

          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${triangle_isocele_rectangle.getLongueurs()[0]
            } $= ${tex_nombre(triangle_isocele_rectangle.l1 * 10)}$ mm ; `;
          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${tex_nombre(triangle_isocele_rectangle.l2)
            }$ cm`;
          texte += ` et `;
          if (this.classe == 6) {
            texte += `qui a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]
              } donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]
              } $= ${triangle_isocele_rectangle.l1 * 10}$ mm $= ${tex_nombre(triangle_isocele_rectangle.l1)
              }$ cm =${triangle_isocele_rectangle.getLongueurs()[1]
              } donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
          } else {
            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${triangle_isocele_rectangle.a1
              }\\degree$.`;
            texte_corr = `L'angle ${triangle_isocele_rectangle.getAngles()[0]
              } du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]
              } $= ${tex_nombre(triangle_isocele_rectangle.l1 * 10)}$ mm $= ${tex_nombre(triangle_isocele_rectangle.l1)
              }$ cm =${triangle_isocele_rectangle.getLongueurs()[1]
              } donc ${triangle_isocele_rectangle.getNom()} est isocÃ¨le en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocÃ¨le et rectangle en ${triangle_isocele_rectangle.getSommets()[1]
              }.`;
          }
          break;
        case 10: // triangle isocÃ¨le par les angles
          a3 = -1;
          while (a3 < 0) {
            triangle_isocele.a1 = randint(a_min, a_max);
            triangle_isocele.a2 = triangle_isocele.a1;
            a3 = 180 - 2 * triangle_isocele.a1;
            triangle_isocele.a3 = a3;
          }
          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getAngles()[0]
            } $= ${triangle_isocele.a1}\\degree$ ; `;
          texte += ` ${triangle_isocele.getAngles()[1]} $= ${triangle_isocele.a2
            }\\degree$ et  ${triangle_isocele.getAngles()[2]} $= ${triangle_isocele.a3
            }\\degree$ .`;
          texte_corr = `Le triangle ${triangle_isocele.getNom()} a deux angles Ã©gaux, ${triangle_isocele.getAngles()[0]
            } = ${triangle_isocele.getAngles()[1]} $= ${triangle_isocele.a1
            }\\degree$ donc ${triangle_isocele.getNom()} est un triangle isocÃ¨le en ${triangle_isocele.getSommets()[0]
            }.`;
          break;
        case 11: // triangle Ã©quilatÃ©ral par les angles
          triangle_equilateral.a1 = 60;
          triangle_equilateral.a2 = 60;
          triangle_equilateral.a3 = 60;

          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getAngles()[0]
            } $= ${triangle_equilateral.a1}\\degree$ ; `;
          texte += ` ${triangle_equilateral.getAngles()[1]} $= ${triangle_equilateral.a2
            }\\degree$ et  ${triangle_equilateral.getAngles()[2]} $= ${triangle_equilateral.a3
            }\\degree$.`;
          texte_corr = `Le triangle ${triangle_equilateral.getNom()} a trois angles Ã©gaux, ${triangle_equilateral.getAngles()[0]
            } = ${triangle_equilateral.getAngles()[1]} = ${triangle_equilateral.getAngles()[2]
            } $= ${triangle_equilateral.a1
            }\\degree$ donc ${triangle_equilateral.getNom()} est un triangle Ã©quilateral.`;
          break;
      }
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };

  if (this.classe == 6) {
    this.besoin_formulaire_numerique = [
      "Niveau de difficultÃ©",
      2,
      "1 : sans conversions de longueurs\n2 : avec conversions de longueurs",
    ];
  }
  this.besoin_formulaire2_case_a_cocher = ["Avec des dÃ©cimaux", false];
}

/**
 * @Auteur Jean-Claude Lhote
 * Placer les sommets et les Ã©galitÃ©s de longueur...
 * RÃ©fÃ©rence 6G20
 */
function Nommer_et_coder_des_polygones() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Nommer et coder des polygones";
  this.consigne =
    "Nommer les figures en fonction de l'Ã©noncÃ© puis ajouter le codage.";
  this.nb_questions = 4;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, k, carreaux
    ppc = 20
    if (sortie_html) {
      sc = 0.5
    } else {
      sc = 0.4
    }

    let params

    let liste = combinaison_listes([1, 2, 3, 4, 5, 6, 7, 8], this.nb_questions);

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pixelsParCm = 40;
      let pol, polcode, polsom, polnom
      function choisir_polygone(n) { // n compris entre 1 et 8 (1 Ã  4 pour un triangle, 5 Ã  8 pour une quadrilatÃ¨re)
        let A, B, C, D
        let nom = creerNomDePolygone(4, "PQ"), pnom, q, p, pcode, enonce
        switch (n) {
          case 1: // triangle isocÃ¨le
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, randint(25, 80), nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est isocÃ¨le en $${nom[0]}$.<br>`
            break
          case 2: // triangle Ã©quilatÃ©ral
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, 60, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C, B, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est Ã©quilatÃ©ral.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 3: // triangle rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = similitude(B, A, 90, randint(30, 100) / 100, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = codageAngleDroit(B, A, C)
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle en $${nom[0]}$.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 4: // triangle rectangle isocÃ¨le
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])
            C = rotation(B, A, 90, nom[2])
            q = polygone(A, B, C)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])
            pcode = [codeSegments('||', 'blue', A, B, A, C), codageAngleDroit(B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]
            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle et isocÃ¨le en $${nom[0]}$.`
            break
          //on choisit un quadrilatÃ¨re 
          case 5: // carrÃ©
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            q = carre(A, B)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('||', 'blue', A, B, B, C, C, D, D, A), codageAngleDroit(B, A, D), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un carrÃ©.<br>$\\phantom{et sa longueur est AB}$`
            break
          case 6: // rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            C = similitude(A, B, -90, randint(30, 80) / 100, nom[2])
            D = translation(C, vecteur(B, A), nom[3])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('||', 'blue', A, B, C, D), codeSegments('|', 'red', C, B, A, D), codageAngleDroit(B, A, C), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un rectangle et $${nom[0] + nom[1]}$ est sa longueur.`
            break
          case 7: // losange
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            C = rotation(A, B, randint(100, 150), nom[2])
            D = translation(C, vecteur(B, A), nom[3])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codeSegments('O', 'blue', A, B, B, C, C, D, D, A), codeAngle(C, D, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(C, B, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(B, C, D, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(D, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un losange et [$${nom[0] + nom[2]}$] est sa plus grande diagonale.`
            break
          case 8: // trapÃ¨ze rectangle
            A = point(3, randint(0, 20) / 10, nom[0])
            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])
            D = similitude(B, A, 90, randint(30, 80) / 100, nom[3])
            C = translation(D, homothetie(vecteur(A, B), A, randint(30, 80) / 100), nom[2])
            q = polygone(A, B, C, D)
            p = rotation(q, barycentre(q), randint(0, 360))
            A = p.listePoints[0]
            B = p.listePoints[1]
            C = p.listePoints[2]
            D = p.listePoints[3]
            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])
            pcode = [codageAngleDroit(B, A, D), codageAngleDroit(C, D, A)]
            enonce = `le quadrilatÃ¨re $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un trapÃ¨ze rectangle de grande base $${nom[0] + nom[1]}$ de hauteur $${nom[0] + nom[3]}$.`
            break
        }
        return [p, nom, pcode, pnom, enonce]
      }
      [pol, polnom, polcode, polsom, texte] = choisir_polygone(liste[i]);
      if (pol.listePoints.length == 4) {
        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) - 1)
        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) - 1)
        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) + 1)
        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) + 1)
      }
      else {
        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) - 1)
        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) - 1)
        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) + 1)
        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) + 1)

      }
      params = {
        xmin: Xmin,
        ymin: Ymin,
        xmax: Xmax,
        ymax: Ymax,
        pixelsParCm: ppc,
        scale: sc,
      }
      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
      else g = ''
      if (this.sup == 2) {
        k = 0.8;
        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
      } else {
        k = 0.5;
        carreaux = "";
      }

      pol.epaisseur = 2
      texte += `<br>` + mathalea2d(params, pol, polnom, g, carreaux)
      texte_corr = mathalea2d(params, pol, polnom, polcode, polsom, g, carreaux)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
    pixelsParCm = 20
  };
  this.besoin_formulaire_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/**
 * ReprÃ©senter une somme de fracions de mÃªme dÃ©nominateur sur un segment graduÃ© de faÃ§on adaptÃ©e.
 * @Auteur Jean-Claude Lhote
 * 6N14-2
 */
function Ajouter_des_fractions_d_unite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "mettre bout Ã  bout des segments";
  this.consigne = "";
  this.nb_questions = 4;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.sup = 3;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, k, carreaux, objets
    ppc = 20
    if (sortie_html) {
      sc = 0.5
    } else {
      sc = 0.3
    }

    let params, den, num = [0, 0, 0, 0], f = []

    let liste = combinaison_listes([5, 6, 7, 8], this.nb_questions);

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;) {
      objets = []
      den = liste[i]
      num[0] = randint(1, den - 1)
      num[1] = randint(1, den - 1, num[0])
      num[2] = randint(1, den - 1, num[1])
      num[3] = randint(1, den - 1, [num[2], num[0]])
      for (let j = 0; j < 4; j++)
        f[j] = fraction(num[j], den)


      texte = `On place bout Ã  bout 4 segments de longueurs respectives$ ${f[0].texFraction()}$, $${f[1].texFraction()}$, $${f[2].texFraction()}$ et $${f[3].texFraction()}$.<br>`
      texte += `Quelle est la longueur du segment obtenu ?`
      texte_corr = `Voici sur ces dessins, coloriÃ©s en rouge, les diffÃ©rents segments :<br>`
      for (let j = 0; j < 4; j++)
        objets.push(f[j].representation(0, 5 - j * 1.25, 5, 0, 'segment', 'red', 0, 1, 1))
      params = {
        xmin: -0.4,
        ymin: -1.5,
        xmax: 6,
        ymax: 6,
        pixelsParCm: ppc,
        scale: 0.5,
      }
      texte_corr += mathalea2d(params, ...objets)
      texte_corr += `<br>Ce qui donne en les mettant bout Ã  bout :<br>`
      params = {
        xmin: -0.4,
        ymin: -1.5,
        xmax: 20,
        ymax: 1,
        pixelsParCm: ppc,
        scale: sc,
      }
      texte_corr += mathalea2d(params, fraction(num[0] + num[1] + num[2] + num[3], den).representation(0, 0, 5, 0, 'segment', 'red', 0, 1, 0.6))
      texte_corr += `<br>La longueur du segment ainsi obtenu est : $${fraction(num[0] + num[1] + num[2] + num[3], den).texFraction()}$`
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/**
 * Utiliser les notations des segments, droites et demi-droites
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G10
 */
function Notation_segment_droite_demi_droite() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Notation des droites, segments et demi-droites";
  this.consigne =
    "ComplÃ©ter les programmes de constructions qui ont permis d'obtenir ces figures.";
  this.nb_questions = 3;
  this.nb_cols = 3;
  this.nb_cols_corr = 2;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      pixelsParCm = 40;
      let p = creerNomDePolygone(3, "PQ");
      let A = point(0, 0, p[0], "above left");
      let B = point(1, 1.2, p[1], "above");
      let C = point(2.2, -0.3, p[2], "above right");
      let dAB, dAC, dBC, dABCorr, dACCorr, dBCCorr;
      function creerDroiteDemiSegment(A, B) {
        let trait, notation;
        switch (randint(1, 4)) {
          case 1:
            trait = droite(A, B);
            notation = `$(${A.nom}${B.nom})$`;
            break;
          case 2:
            trait = demiDroite(A, B);
            notation = `$[${A.nom}${B.nom})$`;
            break;
          case 3:
            trait = demiDroite(B, A);
            notation = `$[${B.nom}${A.nom})$`;
            break;
          case 4:
            trait = segment(A, B);
            notation = `$[${A.nom}${B.nom}]$`;
            break;
        }
        return [trait, notation];
      }
      [dAB, dABCorr] = creerDroiteDemiSegment(A, B);
      [dAC, dACCorr] = creerDroiteDemiSegment(A, C);
      [dBC, dBCCorr] = creerDroiteDemiSegment(B, C);
      let labels = labelPoint(A, B, C);

      texte = `Placer 3 points $${p[0]}$, $${p[1]}$ et $${p[2]}$ non alignÃ©s puis tracer... <br><br>`;
      texte += mathalea2d(
        { xmin: -1, ymin: -1, xmax: 3, ymax: 2.5, pixelsParCm: 40, scale: 1 },
        dAB,
        dBC,
        dAC,
        labels
      );
      texte_corr = `...tracer ${dABCorr}, ${dBCCorr}, ${dACCorr}.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}



/**
 * Vocabulaire des triangles
 * 6G20-2
 * @author SÃ©bastien Lozano
 */
function Vocabulaire_des_triangles_6e() {
  this.classe = 6;
  Vocabulaire_des_triangles.call(this);
}

/**
 * Vocabulaire des triangles
 * 5G20-1
 * @author SÃ©bastien Lozano
 */
function Vocabulaire_des_triangles_5e() {
  this.classe = 5;
  Vocabulaire_des_triangles.call(this);
}
// RÃ©fÃ©rence 6G21
function Construire_un_triangle_6e() {
  Construire_un_triangle.call(this)
  this.classe = 6
}
function Construire_un_triangle_avec_cible_6e() {
  Construire_un_triangle_avec_cible.call(this)
  this.classe = 6
}
function Construire_un_triangle_avec_cible_5e() {
  Construire_un_triangle_avec_cible.call(this)
  this.classe = 5
}
/**
 * PubliÃ© le 30/08/202
 * @Auteur Jean-Claude Lhote
 * RÃ©frence 6G21 et ... (exercice en 5e ? pas encore fait)
 */
function Construire_un_triangle() {
  "use strict"
  Exercice.call(this)
  this.titre = "Construire un triangle aux instruments";
  this.nb_questions = 2;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = false;
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []
    this.liste_corrections = []
    let type_de_questions_disponibles, A, B, C, CC, lAB, lBC, lAC, cA, cB, T, TT, dBC, dAB, objets_enonce, objets_correction, params_enonce, params_correction, nom, sommets
    if (this.classe == 6) type_de_questions_disponibles = [1, 2]
    else type_de_questions_disponibles = [1, 2, 3, 4, 5, 6]
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      objets_enonce = []
      objets_correction = []
      texte = `Le triangle ci-dessous a Ã©tÃ© rÃ©alisÃ© Ã  main levÃ©e.<br>Construire ce triangle avec les instruments de gÃ©omÃ©trie en respectant les mesures indiquÃ©es.<br>`
      texte_corr = `Voici la construction que tu devais rÃ©aliser.<br>`
      nom = creerNomDePolygone(3, "PQ")
      sommets = []
      for (let i = 0; i < 3; i++) sommets.push(nom[i])
      sommets = shuffle(sommets)
      A = point(0, 0, sommets[0],'left')
      switch (liste_type_de_questions[i]) {
        case 1:
          lAC = randint(35, 45)
          lBC = calcul(randint(35, 45, lAC) / 10)
          lAB = calcul(randint(46, 60) / 10)
          lAC = calcul(lAC / 10)
          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])
          B.positionLabel='right'
          cA = cercle(A, lAC)
          cB = cercle(B, lBC)
          C = pointIntersectionCC(cA, cB, sommets[2], 1)
          C.positionLabel='above'
          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])

          objets_enonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))
          objets_correction.push(traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))
          texte_corr += `Pour cette construction, nous avons utilisÃ© le compas et la rÃ¨gle graduÃ©e.<br>`
          break;

        case 2:
          lAC = randint(70, 80) / 10
          lAB = calcul(randint(46, 60) / 10)
          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])
          cA = cercle(A, lAC)
          dAB = droite(A, B)
          dBC = droiteParPointEtPerpendiculaire(B, dAB)
          C = pointIntersectionLC(dBC, cA, sommets[2], 1)
          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])

          objets_enonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, A), codageAngleDroit(A, B, C))
          objets_correction.push(traceCompas(A, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(C, A))
          texte_corr += `Pour cette construction, nous avons utilisÃ© la rÃ¨gle graduÃ©e, l'Ã©querre et le compas.<br>`
          break

        case 3:

          break
      }
      T = polygoneAvecNom(A, B, C)
      TT = polygoneAvecNom(A, B, CC)
      objets_enonce.push(TT[0], TT[1])
      objets_correction.push(T[0], T[1])
      params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }
      params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 2), ymin: Math.min(A.y - 1, B.y - 1, C.y - 2), xmax: Math.max(A.x + 1, B.x + 1, C.x + 2), ymax: Math.max(A.y + 1, B.y + 1, C.y + 2), pixelsParCm: 30, scale: 1 }
      texte += mathalea2d(params_enonce, objets_enonce)
      texte_corr += mathalea2d(params_correction, objets_correction)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}
/**
 * publiÃ© le 1/12/2020
 * @Auteur Jean-Claude Lhote
 * RÃ©frence 6G21-1 et ... (exercice en 5e ? pas encore fait)
 */
function Construire_un_triangle_avec_cible() {
  "use strict"
  Exercice.call(this)
  this.titre = "Construire un triangle avec cible auto-corrective";
  this.nb_questions = 4;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = false;
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []
    this.liste_corrections = []
    let celluleAleaRonde = function (rang) {
      let lettre = lettre_depuis_chiffre(randint(1, 8))
      let chiffre = Number(randint(1, rang)).toString()
      return lettre + chiffre
    }

    let type_de_questions_disponibles, cible, cellule, result, A, B, C, CC, lAB, lBC, lAC, cA, cB, T, TT, dBC,dAC, dAB, objets_enonceml, objets_enonce, objets_correction, params_enonceml, params_enonce, params_correction, nom, sommets
    if (this.classe == 6) type_de_questions_disponibles = [1, 2]
    else type_de_questions_disponibles = [1, 2, 3,4]
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      objets_enonce = []
      objets_enonceml = []
      objets_correction = []
      texte = `Le triangle ci-dessous a Ã©tÃ© rÃ©alisÃ© Ã  main levÃ©e.<br>Construire ce triangle avec les instruments de gÃ©omÃ©trie en respectant les mesures indiquÃ©es.<br>`
      texte_corr = `Voici la construction que tu devais rÃ©aliser.<br>`
      nom = creerNomDePolygone(3, "PQ")
      sommets = []
      for (let i = 0; i < 3; i++) sommets.push(nom[i])
      sommets = shuffle(sommets)
      A = point(0, 0, sommets[0],'left')
      switch (liste_type_de_questions[i]) {
        case 1:
          lAC = randint(35, 45)
          lBC = calcul(randint(35, 45, lAC) / 10)
          lAB = calcul(randint(46, 60) / 10)
          lAC = calcul(lAC / 10)
          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])
          B.positionLabel='right'
          cA = cercle(A, lAC)
          cB = cercle(B, lBC)
          C = pointIntersectionCC(cA, cB, sommets[2], 1)
          C.positionLabel='above'
          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])
          cellule = celluleAleaRonde(5)
          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)
          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })
          objets_enonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))
          objets_enonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B, 'black', 1), afficheLongueurSegment(A, C, 'black', 1))
          objets_correction.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))
          texte_corr += `Pour cette construction, nous avons utilisÃ© le compas et la rÃ¨gle graduÃ©e.<br>`
          texte_corr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`
          break;

        case 2:
          lAC = randint(70, 80) / 10
          lAB = calcul(randint(46, 60) / 10)
          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])
          B.positionLabel='right'
          cA = cercle(A, lAC)
          dAB = droite(A, B)
          dBC = droiteParPointEtPerpendiculaire(B, dAB)
          C = pointIntersectionLC(dBC, cA, sommets[2], 1)
          C.positionLabel='above'
          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])
          cellule = celluleAleaRonde(5)
          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)
          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })
          objets_enonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))
          objets_enonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(A, C, 'black', 1), codageAngleDroit(A, B, CC))
          objets_correction.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(C, A))
          texte_corr += `Pour cette construction, nous avons utilisÃ© la rÃ¨gle graduÃ©e, l'Ã©querre et le compas.<br>`
          texte_corr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`
  
          break

        case 3:
          lAB = calcul(randint(46, 60) / 10)
          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])
          B.positionLabel='right'
          dAB = droite(A, B)
          dAC=rotation(dAB,A,randint(8,14)*5)
          dBC=rotation(dAB,B,-randint(8,12)*5)
          C=pointIntersectionDD(dAC,dBC,sommets[2])
          C.positionLabel='above'
          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])
          cellule = celluleAleaRonde(5)
          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)
          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })
          objets_enonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))
          objets_enonceml.push(codeAngle(B, A,CC,1.1),texteParPoint(nombre_avec_espace(Math.round(angle(B,A,C)))+`Â°`,similitude(B,A,angle(B,A,C)/2,1/lAB+0.1)), codeAngle(A, B,CC,1.1),texteParPoint(nombre_avec_espace(Math.round(angle(A,B,C)))+`Â°`,similitude(A,B,-angle(A,B,C)/2,1/lAB+0.1)))
          objets_correction.push(cible,afficheLongueurSegment(B, A),afficheMesureAngle(B, A,C,'black',1), afficheMesureAngle(A, B,C,'black',1))
          texte_corr += `Pour cette construction, nous avons utilisÃ© le rapporteur.<br>`
          texte_corr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`
  
           
    

          break
          case 4:
            lAB = calcul(randint(46, 60) / 10)
            lAC = randint(40, 60) / 10
            B = pointAdistance(A, lAB, randint(-45, 45), sommets[1],'right')
            C=similitude(B,A,randint(8,24)*5,lAC/lAB,sommets[2],'above')
            CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])
            cellule = celluleAleaRonde(5)
            result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)
            cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })
            objets_enonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))
            objets_enonceml.push(codeAngle(B, A,CC,1.1),afficheLongueurSegment(B, A),texteParPoint(nombre_avec_espace(Math.round(angle(B,A,C)))+`Â°`,similitude(B,A,angle(B,A,C)/2,1/lAB+0.1)),afficheLongueurSegment(A, C, 'black', 1) )
            objets_correction.push(cible,afficheLongueurSegment(B, A),afficheMesureAngle(B, A,C,'black',1), afficheLongueurSegment(A, C, 'black', 1))
            texte_corr += `Pour cette construction, nous avons utilisÃ© le rapporteur et la rÃ¨gle graduÃ©e.<br>`
            texte_corr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`
             break  
          
      }
      T = polygoneAvecNom(A, B, C)
      TT = polygoneAvecNom(A, B, CC)
      objets_enonceml.push(TT[0], TT[1])
      objets_correction.push(T[0], T[1])
      params_enonceml = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }
      params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 30, scale: 1, mainlevee: false, amplitude: 1 }
      params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 30, scale: 1 }
      texte += mathalea2d(params_enonceml, objets_enonceml) + mathalea2d(params_enonce, objets_enonce)
      texte_corr += mathalea2d(params_correction, objets_correction)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}
/**
 * Non PubliÃ© : base servant Ã  faire des tutoriels vidÃ©os
 * @Auteur Jean-Claude Lhote
 * RÃ©f : betaExoConstruction
 * publiÃ© le 1/12/2020
 */
function Exercice_constructions_basiques() {
  "use strict"
  Exercice.call(this)
  this.titre = "Programmes de constructions (en chantier)";
  this.nb_questions = 1; // Ici le nombre de questions
  this.nb_questions_modifiable=false // Active le formulaire nombre de questions
  this.nb_cols = 1; // Le nombre de colonnes dans l'Ã©noncÃ© LaTeX
  this.nb_cols_corr = 1;// Le nombre de colonne pour la correction LaTeX
  this.pas_de_version_LaTeX=false // mettre Ã  true si on ne veut pas de l'exercice dans le gÃ©nÃ©rateur LaTeX
  this.pas_de_version_HMTL=false // mettre Ã  true si on ne veut pas de l'exercice en ligne
// Voir la Classe Exercice pour une liste exhaustive des propriÃ©tÃ©s disponibles.

//  this.sup = false; // A dÃ©commenter : valeur par dÃ©faut d'un premier paramÃ¨tre
//  this.sup2 = false; // A dÃ©commenter : valeur par dÃ©faut d'un deuxiÃ¨me paramÃ¨tre
//  this.sup3 = false; // A dÃ©commenter : valeur par dÃ©faut d'un troisiÃ¨me paramÃ¨tre

// c'est ici que commence le code de l'exercice cette fonction crÃ©e une copie de l'exercice
  this.nouvelle_version = function (numero_de_l_exercice) {
  // la variable numero_de_l_exercice peut Ãªtre rÃ©cupÃ©rÃ©e pour permettre de diffÃ©rentier deux copies d'un mÃªme exo
  // Par exemple, pour Ãªtre certain de ne pas avoir les mÃªmes noms de points en appelant 2 fois cet exo dans la mÃªme page

  this.liste_questions = [] // tableau contenant la liste des questions 
  this.liste_corrections = []
  let type_de_questions_disponibles=[1] // tableau Ã  complÃ©ter par valeurs possibles des types de questions
  let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
// Ci-dessus On crÃ©e une liste alÃ©atoire comprenant nb_questions parmi les types disponibles.
/* Un exemple ci-dessous : si la classe est 6, alors les types dispo sont 1 et 2 sinon , 1,2,3 et 4.
if (this.classe == 6) type_de_questions_disponibles = [1, 2]
    else type_de_questions_disponibles = [1, 2, 3,4]
liste_type_de_questions = combin,aison_listes(type_de_questions_disponibles, this.nb_questions)
*/
// boucle pour fabriquer les nb_questions questions en s'assurant que si il n'y a pas nb_questions diffÃ©rentes
// La boucle s'arrÃªte aprÃ¨s 50 tentatives.
    let A,B,C,D,traces1,traces2,labels1,labels2,kare,aA,aB,aC,aD
    let objets_enonce,objets_enonceml,objets_correction,params_enonce,params_enonceml,params_correction
    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      objets_enonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncÃ©
      objets_enonceml = [] // Idem pour l'enoncÃ© Ã  main levÃ©e si besoin
      objets_correction = [] // Idem pour la correction

      texte = `Construire le carrÃ© $ABCD$.<br>` // Nous utilisons souvent cette variable pour construire le texte de la question.
      texte_corr = `Pour cette construction on peut utiliser la rÃ¨gle et l'Ã©querre.<br>` // Idem pour le texte de la correction.
//      nom = creerNomDePolygone(3, "PQ")
// fonction permettant de choisir un nom de polygone, soit ici 3 lettres qui se suivent Ã  l'exclusion de la sÃ©quence PQ
      switch (liste_type_de_questions[i]) { // Chaque question peut Ãªtre d'un type diffÃ©rent, ici 4 cas sont prÃ©vus...
        case 1:
          A=point(0,0,'A','below')
          B=point(5,randint(-30,30)/10,'B','below')
          C=rotation(A,B,-90,'C','above')
          D=rotation(B,A,90,'D','above')
          traces1=tracePoint(A,B)
          labels1=labelPoint(A,B)
          traces2=tracePoint(A,B,C,D)
          labels2=labelPoint(A,B,C,D)
          kare=carre(A,B)
          kare.epaisseur=2
          aA=codageAngleDroit(B,A,D)
          aB=codageAngleDroit(A,B,C)
          aC=codageAngleDroit(B,C,D)
          aD=codageAngleDroit(C,D,A)

          objets_enonce.push (traces1,labels1) 
          objets_enonceml.push(traces2,labels2,kare,aA,aB,aC,aD)
          objets_correction.push(traces2,labels2,kare,aA,aB,aC,aD)
          //ici sont crÃ©Ã©s les texte, tex_corr, objets mathalea2d divers entrant dans le contenu de l'exercice
        break;

        case 2:

          // Idem Cas1 mais avec d'autres texte, texte_corr...
        break

        case 3:
          
        break
          
        case 4:
        
        break  
          
      }
//  objets_enonce.push () // On rempli les tableaux d'objets Mathalea2d
//  objets_enonceml.push()
//  objets_correction.push()

//paramÃ¨tres de la fenÃªtre Mathalea2d pour l'Ã©noncÃ© main levÃ©e
     params_enonceml = { xmin: -5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1, mainlevee: true, amplitude: 1 }
//paramÃ¨tres de la fenÃªtre Mathalea2d pour l'Ã©noncÃ© normal
      params_enonce = { xmin:-5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1, mainlevee: false}
//paramÃ¨tres de la fenÃªtre Mathalea2d pour la correction
      params_correction = { xmin: -5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1 }
// On ajoute au texte de l'Ã©noncÃ©, la figure Ã  main levÃ©e et la figure de l'enoncÃ©.
      texte += mathalea2d(params_enonceml, objets_enonceml)+ mathalea2d(params_enonce, objets_enonce)
// On ajoute au texte de la correction, la figure de la correction
      texte_corr += mathalea2d(params_correction, objets_correction)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on la stocke dans la liste des questions
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this); // On envoie l'exercice Ã  la fonction de mise en page
  };
// Si les variables suivantes sont dÃ©finies, elles provoquent l'affichage des formulaires des paramÃ¨tres correspondants
// Il peuvent Ãªtre de 3 types : _numerique, _case_a_cocher ou _texte.
// Il sont associÃ©s respectivement aux paramÃ¨tres sup, sup2 et sup3.

//	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
//  this.besoin_formulaire2_numerique = ["Type de cahier",3,`1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`];
// this.besoin_formulaire3_case_a_cocher =['figure Ã  main levÃ©e',true]

} // Fin de l'exercice.


/**
 * @Auteur Jean-Claude Lhote
 * PubliÃ© le 6/12/2020
 * Ref : c3C10-2 et 6C10-5
 * Parcourir un labyrinthe de nombres en passant par les multiples du nombre choisi.
 */

function Exercice_labyrinthe_multiples() {
  "use strict"
  Exercice.call(this)
  this.titre = "Labyrinthe de multiples";
  this.consigne=""
  this.niveau = '6e'
  this.nb_questions = 1;
  this.nb_questions_modifiable = false
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.pas_de_version_LaTeX = false
  this.pas_de_version_HMTL = false
  this.sup3 = 3
  this.sup = 9;
  if (this.niveau = 'CM') {
    this.sup2 = 10;
    this.sup3 = 3;
  }
  else {
    this.sup2 = 13;
    this.sup3 = 4;
  }
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections=[]
    this.liste_questions=[]
    let params, texte, texte_corr, trouve
    let laby = labyrinthe()
    laby.niveau = parseInt(this.sup3) // Le niveau (de 1 Ã  6=mÃ©lange) dÃ©finit le nombre d'Ã©tapes
    laby.chemin = laby.choisitChemin(laby.niveau) // On choisi un chemin
    laby.murs2d = laby.construitMurs(laby.chemin) // On construit le labyrinthe
    laby.chemin2d = laby.traceChemin(laby.chemin) // On trace le chemin solution
    let monchemin = laby.chemin
    let table = parseInt(this.sup)
    let maximum = parseInt(this.sup2)
 //   this.consigne=`Trouve la sortie en ne passant que par les cases contenant un multiple de $${table}$.`
    texte = `${texte_en_couleur_et_gras(`Trouve la sortie en ne passant que par les cases contenant un multiple de `,'black')}$${table}$.<br>`
    texte_corr = `${texte_en_couleur_et_gras(`Voici le chemin en marron et la sortie Ã©tait la numÃ©ro $${2 - monchemin[monchemin.length - 1][1] + 1}$.`, 'black')}<br>`
    // Zone de construction du tableau de nombres : Si ils sont sur monchemin et seulement si, ils doivent vÃ©rifier la consigne
    let listeMultiples = [], index = 0
    for (let i = 2; i <= maximum; i++){
      listeMultiples.push(table * i)
    }
    listeMultiples = combinaison_listes(listeMultiples, 12)
    for (let a=1;a<7;a++) {
      laby.nombres.push([0,0,0])
    }
    for (let a = 1; a < 7; a++) {
      for (let b = 0; b < 3; b++) {
        trouve = false
        for (let k = 0; k < monchemin.length; k++) {
          if (monchemin[k][0] == a && monchemin[k][1] == b) trouve = true
        }
        if (!trouve) {
          laby.nombres[a - 1][b] = randint(2, maximum) * table + randint(1, table - 1)
        }
        else {
          laby.nombres[a - 1][b] = listeMultiples[index]
          index++
        }
      }
    } // Le tableau de nombre Ã©tant fait, on place les objets nombres.
    laby.nombres2d = laby.placeNombres(laby.nombres,1.5)
    params = { xmin: -4, ymin: 0, xmax: 22, ymax: 11, pixelsParCm: 20, scale: 0.7 }
    texte += mathalea2d(params, laby.murs2d, laby.nombres2d)
    texte_corr += mathalea2d(params, laby.murs2d, laby.nombres2d, laby.chemin2d)
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this)
  }
  this.besoin_formulaire_numerique = ["Table "]
  this.besoin_formulaire2_numerique = ["Facteur maximum "];
  this.besoin_formulaire3_numerique = ['Niveau de rapiditÃ©', 6, '1 : GuÃ©pard\n 2 : Antilope\n 3 : LiÃ¨vre\n 4 : Tortue\n 5 : Escargot\n 6 : Au hasard']
} // Fin de l'exercice.

/**
 * @Auteur Jean-Claude Lhote
 * PubliÃ© le 11/12/2020
 * Ref : 6N41-1
 * Parcourir un labyrinthe de fractions en passant par des fractions Ã©gales.
 */
function Exercice_labyrinthe_fractions_egales() {
  "use strict"
  Exercice.call(this)
  this.titre = "Labyrinthe de fractions Ã©gales";
  this.consigne=""
  this.niveau = '6e'
  this.nb_questions = 1;
  this.nb_questions_modifiable = false
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.pas_de_version_LaTeX = false
  this.pas_de_version_HMTL = false
  this.sup2 = 3
  this.sup = 10
  if (this.niveau = 'CM') {
    this.sup = 10;
    this.sup2 = 3;
  }
  else {
    this.sup = 13;
    this.sup2 = 4;
  }
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections=[]
    this.liste_questions=[]
    let mesfractions=[]
    let params, texte, texte_corr, trouve
    let laby = labyrinthe()
    laby.niveau = parseInt(this.sup2) // Le niveau (de 1 Ã  6=mÃ©lange) dÃ©finit le nombre d'Ã©tapes
    laby.chemin = laby.choisitChemin(laby.niveau) // On choisi un chemin
    laby.murs2d = laby.construitMurs(laby.chemin) // On construit le labyrinthe
    laby.chemin2d = laby.traceChemin(laby.chemin) // On trace le chemin solution
    let monchemin = laby.chemin
    let table = randint(1,7)+1
    let num=randint(1,2*table-1)
    while (pgcd(num,table)!=1) {
      num=randint(2,2*table-1)
    }
    let maximum = parseInt(this.sup)
 //   this.consigne=`Trouve la sortie en ne passant que par les cases contenant un multiple de $${table}$.`
    texte = `${texte_en_couleur_et_gras(`Trouve la sortie en ne passant que par les cases contenant des fractions Ã©gales Ã  `,'black')}$${tex_fraction_reduite(num,table)}$.<br>`
    texte_corr = `${texte_en_couleur_et_gras(`Voici le chemin en marron et la sortie Ã©tait la numÃ©ro $${2 - monchemin[monchemin.length - 1][1] + 1}$.`, 'black')}<br>`
    // Zone de construction du tableau de nombres : Si ils sont sur monchemin et seulement si, ils doivent vÃ©rifier la consigne
    let listeMultiples = [], index = 0
 
    for (let i = 2; i <= maximum; i++){
      listeMultiples.push(table * i)
    }
    listeMultiples = combinaison_listes(listeMultiples, 12)
    for (let i=0;i<12;i++){
      mesfractions.push(fraction(calcul(num*listeMultiples[i]/table),listeMultiples[i]))
    }
    for (let i=0;i<12;i++) {
      switch (randint(1,3)){
        case  1:  mesfractions.push(fraction(listeMultiples[i],num*listeMultiples[i]/table))
        break
        case 2:   mesfractions.push(fraction(calcul(num*listeMultiples[i]/table),listeMultiples[i]-table))
        break
        case 3:   mesfractions.push(fraction(calcul(num*listeMultiples[i]/table),listeMultiples[i]-table))
        break
      }
    }
    for (let a=1;a<7;a++) {
      laby.nombres.push([fraction(1,1),fraction(1,1),fraction(1,1)])
    }
 
    for (let a = 1; a < 7; a++) {
      for (let b = 0; b < 3; b++) {
        trouve = false
        for (let k = 0; k < monchemin.length; k++) {
          if (monchemin[k][0] == a && monchemin[k][1] == b) trouve = true
        }
        if (!trouve) {
          laby.nombres[a - 1][b] = mesfractions[index+12]
        }
        else {
          laby.nombres[a - 1][b] = mesfractions[index]
          index++
        }
      }
    } // Le tableau de nombre Ã©tant fait, on place les objets nombres.
    laby.nombres2d = laby.placeNombres(laby.nombres,1.5)
    params = { xmin: -4, ymin: 0, xmax: 22, ymax: 11, pixelsParCm: 20, scale: 0.7 }
    texte += mathalea2d(params, laby.murs2d, laby.nombres2d)
    texte_corr += mathalea2d(params, laby.murs2d, laby.nombres2d, laby.chemin2d)
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this)
  }
 // this.besoin_formulaire_numerique = ["Table "]
  this.besoin_formulaire_numerique = ["Facteur maximum "];
  this.besoin_formulaire2_numerique = ['Niveau de rapiditÃ©', 6, '1 : GuÃ©pard\n 2 : Antilope\n 3 : LiÃ¨vre\n 4 : Tortue\n 5 : Escargot\n 6 : Au hasard']
} // Fin de l'exercice.


/**
 * @Auteur Jean-Claude Lhote
 * PubliÃ© le 9/12/2020
 * Ref 6N10-5
 * Sortir du labyrinthe en utilisant la numÃ©ration dÃ©cimale.
 */
function Exercice_labyrinthe_numeration() {
  "use strict"
  Exercice.call(this)
  this.titre = "Labyrinthe de numÃ©ration dÃ©cimale";
  this.consigne=""
  this.niveau = '6e'
  this.nb_questions = 1;
  this.nb_questions_modifiable = false
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.pas_de_version_LaTeX = false
  this.pas_de_version_HMTL = false
  this.sup = 3;

  //this.consigne=`Trouve la sortie en ne passant que par les cases contenant un nombre divisible par $${parseInt(this.sup)}$.`

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_corrections=[]
    this.liste_questions=[]

    let params, texte, texte_corr, trouve
    let laby = labyrinthe()
    laby.niveau = parseInt(this.sup) // Le niveau (de 1 Ã  6=mÃ©lange) dÃ©finit le nombre d'Ã©tapes
    laby.chemin = laby.choisitChemin(laby.niveau) // On choisi un chemin
    laby.murs2d = laby.construitMurs(laby.chemin) // On construit le labyrinthe
    laby.chemin2d = laby.traceChemin(laby.chemin) // On trace le chemin solution
    let monchemin = laby.chemin
    let positions=['unitÃ©s','dixiÃ¨mes','centiÃ¨mes','milliÃ¨mes','dizaines','centaines','unitÃ©s de mille','dix-milliÃ¨mes','dizaines de mille']
    let chiffre,hasard
    let listeNombresOK = [], index = 0,rangMax,rang
    if (this.niveau = 'CM') {
      rangMax=5
    }
    else {
      if (!this.sup) {
        rangMax=6
      }
      else {
        rangMax=8
      }
    }
    rang=randint(0,rangMax)
    chiffre=randint(0,9)
    texte = `${texte_en_couleur_et_gras(`Trouve la sortie en ne passant que par les cases contenant un nombre dont le chiffre des ${positions[rang]} est un `,'black')}$${mise_en_evidence(chiffre,'black')}$.<br>`
    texte_corr = `${texte_en_couleur_et_gras(`Voici le chemin en marron et la sortie Ã©tait la numÃ©ro $${2 - monchemin[monchemin.length - 1][1] + 1}$.`, 'black')}<br>`
    // Zone de construction du tableau de nombres : Si ils sont sur monchemin et seulement si, ils doivent vÃ©rifier la consigne
    let Dm,Um,C,D,U,d,c,m,dm,nombretemp
    for (let i = 0; i <= 30; i++) {
      if (rangMax>7){
      if (positions[rang]!='dizaines de mille') {
        Dm=randint (0,9,chiffre)
      }
      else {
        Dm=chiffre
      }}
      else {
        Dm=0
      }
      if (positions[rang]!='unitÃ©s de mille') {
        if (rangMax>5){
        Um=randint (0,9,chiffre)
      }
      else {
        Um=chiffre
      }}
      else {
        Um=0
      }

      if (positions[rang]!='centaines') {
        C=randint (0,9,chiffre)
      }
      else {
        C=chiffre
      }
      if (positions[rang]!='dizaines') {
        D=randint (0,9,chiffre)
      }
      else {
        D=chiffre
      }
      if (positions[rang]!='unitÃ©s') {
        U=randint (0,9,chiffre)
      }
      else {
        U=chiffre
      }
      if (positions[rang]!='dixiÃ¨mes') {
        d=randint (0,9,chiffre)
      }
      else {
        d=chiffre
      }
      if (positions[rang]!='centiÃ¨mes') {
        c=randint (0,9,chiffre)
      }
      else {
        c=chiffre
      }
      if (positions[rang]!='milliÃ¨mes') {
        m=randint (0,9,chiffre)
      }
      else {
        m=chiffre
      }
      if (rangMax>6){
      if (positions[rang]!='dix-milliÃ¨mes') {
  
        dm=randint (0,9,chiffre)
      }
      else {
        dm=chiffre
      }}
      else {
        dm=0
      }
      if (i>12) {
        hasard=randint(0,rangMax,rang) //on met le chiffre au hasard Ã  un autre endroit du nombre
        switch (hasard){
          case 8: 
          if (rangMax>7) {Dm=chiffre}
          else {
            Dm=0
            if (rang!=0) {
              U=chiffre
            }
            else {
              d=chiffre
            }
          }
          break
          case 6: Um=chiffre
          break
          case 5: C=chiffre
          break
          case 4: D=chiffre
          break
          case 0: U=chiffre
          break
          case 1: d=chiffre
          break
          case 2: c=chiffre
          break
          case 3: m=chiffre
          break
          case 7:
            if (rangMax>6) {dm=chiffre}
            else {
              dm=0
              if (rang!=1) {
                d=chiffre
              }
              else {
                c=chiffre
              }
            }
          break
        }
        hasard=randint(0,9,chiffre)
        switch (rang){ // On met autre chose au rang choisi 
          case 8: Dm=hasard
          break
          case 6: Um=hasard
          break
          case 5: C=hasard
          break
          case 4: D=hasard
          break
          case 0: U=hasard
          break
          case 1: d=hasard
          break
          case 2: c=hasard
          break
          case 3: m=hasard
          break
          case 7: dm=hasard
          break
        }
      }
      nombretemp=tex_nombrec2(`${Dm}*10000+${Um}*1000+${C}*100+${D}*10+${U}+${d}*0.1+${c}*0.01+${m}*0.001+${dm}*0.0001`,8)
      listeNombresOK.push(nombretemp)
    }
    for (let a=1;a<7;a++) {
      laby.nombres.push([0,0,0])
    }
    for (let a = 1; a < 7; a++) {
      for (let b = 0; b < 3; b++) {
        trouve = false
        for (let k = 0; k < monchemin.length; k++){
          if (monchemin[k][0] == a && monchemin[k][1] == b) trouve = true
        }
        if (!trouve) {
          laby.nombres[a - 1][b] = listeNombresOK[index+13]
        }
        else {
          laby.nombres[a - 1][b] = listeNombresOK[index]
          index++
        }
      }
    } // Le tableau de nombre Ã©tant fait, on place les objets nombres.
    laby.nombres2d = laby.placeNombres(laby.nombres,0.7)
    params = { xmin: -4, ymin: 0, xmax: 22, ymax: 11, pixelsParCm: 20, scale: 0.7 }
    texte += mathalea2d(params, laby.murs2d, laby.nombres2d)
    texte_corr += mathalea2d(params, laby.murs2d, laby.nombres2d, laby.chemin2d)
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this)
  }
//this.besoin_formulaire_case_a_cocher = ["Avec des dizaines de mille et des dix-milliÃ¨mes"]
//  this.besoin_formulaire2_numerique = ["CritÃ¨re de divisibilitÃ© supplÃ©mentaire ",6,'1 : Aucun\n2 : Par 2\n3 : Par 3\n4 : Par 4\n5 : Par 5\n6 : Par 9'];
 this.besoin_formulaire_numerique = ['Niveau de rapiditÃ©', 6, '1 : Escargot\n 2 : Tortue\n 3 : LiÃ¨vre\n 4 : Antilope\n 5 : GuÃ©pard\n 6 : Au hasard']
} // Fin de l'exercice.

function Test_main_levee() {
  "use strict";
  Exercice.call(this);

  this.titre = "Test de main levÃ©e";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = true;
  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []
    this.liste_corrections = []
    let A = point(0, 0)
    let B = point(5, 0)
    let D = point(5, -5)
    let C = point(1, 5)
    let a = codeAngle(B, A, C, 1, '', 'green')
    let s1 = segment(B, A, 'red')
    let s2 = segment(A, C, 'red')
    let s3 = segment(B, D, 'red')
    let b = codeAngle(A, B, D, 0.8, '', 'blue')
    let texte = mathalea2d({ xmin: -1, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 20, scale: 3, mainlevee: this.sup, amplitude: 1 }, a, s1, s2, s3, b)
    pixelsParCm = 20
    let texte_corr = ""
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this)
  }
  this.besoin_formulaire_case_a_cocher = ["main levee"];
}

/**
 * Exercice du test de positionnement 5e
 * Variantes Ã  venir...
 * @Auteur Jean-Claude Lhote
 * RÃ©fÃ©rence 6G10-2
 */
function Utiliser_le_codage_pour_decrire_6e() {
  Utiliser_le_codage_pour_decrire.call(this)
  this.classe = 6
}
// 5G30
function Utiliser_le_codage_pour_decrire_5e() {
  Utiliser_le_codage_pour_decrire.call(this)
  this.classe = 5
}
function Utiliser_le_codage_pour_decrire() {
  "use strict"
  Exercice.call(this);
  this.titre = "Utiliser le codage pour dÃ©crire une figure";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles;
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc = 20, sc, nom, sommets = [], params_enonce, params_correction, objets_enonce, objets_correction
    let A, B, C, D, E, F, s1, s2, s3, s4, s5, s6, s7, s8, medAC, medBC, dBD, dBC, dAC, dAF
    if (this.classe == 6) type_de_questions_disponibles = [1, 2, 3]
    else type_de_questions_disponibles = [1, 2, 3, 4]
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions)
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      objets_enonce = []
      objets_correction = []
      params_enonce = {}
      params_correction = {}
      nom = creerNomDePolygone(6, "PQ")
      for (let i = 0; i < 6; i++)
        sommets.push(nom[i])
      sommets = shuffle(sommets)

      A = point(0, 0, sommets[0], 'left')
      switch (liste_type_de_questions[i]) {
        case 1:
          C = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[2], 'right')
          s2 = segment(A, C)
          B = similitude(C, A, -85, randint(5, 7) / 10, sommets[1], 'below')
          s1 = segment(A, B)
          E = pointSurSegment(A, C, longueur(A, C) / 2.2, sommets[4], 'below')
          medBC = mediatrice(C, B)
          medAC = mediatrice(A, C)
          dBC = droite(C, B)
          dBD = rotation(dBC, B, randint(-40, -20))
          dAC = droite(A, C)
          dAF = rotation(dAC, A, randint(30, 40))
          D = pointIntersectionDD(dBD, medBC, sommets[3], 'below')
          D.x += randint(-2, 2, 0) / 5
          F = pointIntersectionDD(dAF, medAC, sommets[5], 'above')
          F.x += randint(-2, 2, 0) / 5
          s5 = segment(B, D)
          s6 = segment(C, D)
          s3 = segment(A, F)
          s7 = segment(C, F)
          s8 = segment(E, F)
          s4 = segment(B, C)
          params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1.5), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }
          objets_enonce.push(s1, s2, s4, s8, s7, s3, s6, s5, codageAngleDroit(B, A, C), codeSegments('//', 'black', A, F, F, C), codeSegments('|||', 'black', A, E, E, C), codeSegments('O', 'black', B, D, D, C), labelPoint(A, B, C, D, E, F), codageAngleDroit(A, E, F))
          texte = `<br>Ã l'aide du schÃ©ma ci-dessous, dÃ©terminer :<br>`
          texte += `- deux segments de mÃªme longueur ;<br>`
          texte += `- le milieu d'un segment ;<br>`
          texte += `- un triangle rectangle ;<br>`
          texte += `- un triangle isocÃ¨le ;<br>`
          texte_corr = `- Deux segments de mÃªme mesure : [$${sommets[0] + sommets[4]}$] et $[${sommets[4] + sommets[2]}]$ ou $[${sommets[0] + sommets[5]}]$ et $[${sommets[5] + sommets[2]}]$`
          texte_corr += ` ou $[${sommets[1] + sommets[3]}]$ et $[${sommets[3] + sommets[2]}]$.<br>`
          texte_corr += `- $${sommets[4]}$ est le milieu du segment $[${sommets[0] + sommets[2]}]$.<br>`
          texte_corr += `- $${sommets[0] + sommets[1] + sommets[2]}$ est un triangle rectangle en $${sommets[0]}$, $${sommets[0] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$ et $${sommets[2] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$.<br>`
          texte_corr += `- $${sommets[0] + sommets[5] + sommets[2]}$ est un triangle isocÃ¨le en $${sommets[5]}$ et $${sommets[1] + sommets[3] + sommets[2]}$ est un triangle isocÃ¨le en $${sommets[3]}$.<br>`
          break
        case 2:
          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above')
          C = similitude(A, B, randint(85, 90), 0.95, sommets[2], 'below')
          D = similitude(B, A, randint(-93, -87), 1, sommets[3], 'below')
          F = similitude(B, C, -55, 0.8, sommets[5], 'right')
          E = similitude(C, D, 57, randint(85, 115) / 100, sommets[4], 'right')
          s1 = segment(D, E)
          s2 = segment(C, E)
          s4 = segment(C, F)
          s5 = segment(B, F)
          s6 = polygone(A, B, C, D)
          params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }
          objets_correction.push(labelPoint(A, B, C, D, E, F), s1, s2, s4, s5, s6)
          objets_correction.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A))
          objets_correction.push(codeSegments('||', 'black', D, E, C, E), codeSegments('O', 'black', A, B, B, C, C, D, D, A), codeSegments('|||', 'black', F, C, B, F))
          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un carrÃ© et $${sommets[3] + sommets[2] + sommets[4]}$ est un triangle Ã©quilatÃ©ral ($${sommets[4]}$ est Ã  l'intÃ©rieur du carrÃ© $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`
          texte += ` $${sommets[1] + sommets[2] + sommets[5]}$ est un triangle isocÃ¨le en $${sommets[5]}$ ($${sommets[5]}$ est Ã  l'extÃ©rieur du carrÃ© $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`
          texte += `ReprÃ©senter cette configuration par un schÃ©ma Ã  main levÃ©e et ajouter les codages nÃ©cessaires.`
          texte_corr = `VoilÃ  ci-dessous un schÃ©ma qui pourrait convenir Ã  la situation.<br>`
          break
        case 3:
          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above')
          C = similitude(A, B, randint(85, 90), 0.5, sommets[2], 'below')
          D = similitude(B, A, randint(-93, -87), 0.53, sommets[3], 'below')
          s1 = segment(D, B)
          s2 = segment(A, C)
          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above')
          F = affiniteOrtho(E, droite(B, C), -1.1, sommets[5], 'right')
          s3 = polygone(A, B, C, D)
          s4 = segment(B, F)
          s5 = segment(C, F)
          params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }
          objets_correction.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5)
          objets_correction.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A))
          objets_correction.push(codeSegments('||', 'black', D, E, E, B, A, E, E, C, F, C, B, F), codeSegments('O', 'black', A, B, D, C), codeSegments('/', 'black', A, D, B, C))
          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`
          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`
          texte += `ReprÃ©senter cette configuration par un schÃ©ma Ã  main levÃ©e et ajouter les codages nÃ©cssaires.`
          texte_corr = `VoilÃ  ci-dessous un schÃ©ma qui pourrait convenir Ã  la situation.<br>`
          break
        case 4:
          B = pointAdistance(A, randint(6, 7), randint(-30, 30), sommets[1], 'above right')
          F = similitude(A, B, randint(-70, -50), randint(80, 90) / 100, sommets[5], 'left')
          D = similitude(B, A, angleOriente(A, B, F) + randint(3, 5), randint(15, 20) / 10, sommets[3], 'below')
          C = translation2Points(point(B.x + 1, B.y + 1), A, D, sommets[2], 'below right')
          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above right')
          s3 = polygone(A, B, C, D)
          s4 = segment(B, F)
          s5 = segment(A, F)
          s1 = segment(B, D)
          s2 = segment(A, C)
          params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 0.8 }
          objets_enonce.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5)
          objets_enonce.push(codeAngle(D, A, B, 2, '|', 'red', 2), codeAngle(B, C, D, 2, '|', 'red', 2), codeAngle(A, B, F, 2, '|', 'red', 2))
          objets_enonce.push(codeAngle(A, B, C, 2, '||', 'blue', 2), codeAngle(A, D, C, 2, '||', 'blue', 2))
          objets_enonce.push(codeAngle(B, A, F, 2, '///', 'green', 3), codeAngle(B, F, A, 2, '///', 'green', 3))

          objets_enonce.push(codeSegments('||', 'black', B, E, E, D), codeSegments('O', 'black', A, E, E, C))
          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`
          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`
          texte = `<br>Ã l'aide du schÃ©ma ci-dessous, dÃ©terminer :<br>`
          texte += `- la nature du triangle $${sommets[0] + sommets[1] + sommets[5]}$ ;<br>`
          texte += `- la nature du quadrilatÃ¨re $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ ;<br>`
          texte += `- la nature de l'angle $\\widehat{${sommets[5] + sommets[1] + sommets[2]}}$ ;<br>`
          texte_corr = `Le triangle $${sommets[0] + sommets[1] + sommets[5]}$ a deux angles de mÃªme mesure, c'est donc un triangle isocÃ¨le en $${sommets[1]}$.<br>`
          texte_corr += `Le quadrilatÃ¨re  $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ a des diagonales qui se coupent en leur milieu, c'est donc un parallÃ©logramme.<br>`
          texte_corr += `Dans un parallÃ©logramme, les angles consÃ©cutifs sont supplÃ©mentaires (leur somme vaut 180Â°).<br>`
          texte_corr += ` D'aprÃ¨s le codage, l'angle $\\widehat{${sommets[2] + sommets[1] + sommets[5]}}$ est la somme de deux angles supplÃ©mentaires. C'est donc un angle plat.<br>`


          break
      }
      if (objets_enonce.length > 0) texte += mathalea2d(params_enonce, objets_enonce)
      if (objets_correction.length > 0) texte_corr += mathalea2d(params_correction, objets_correction)
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
}
/**
 * Ref 6G14
 * @Auteur Jean-Claude Lhote
 * publiÃ© le 22/11/2020
 */
function Proprietes_paralleles_perpendiculaires() {
  "use strict";
  Exercice.call(this);
  this.titre = "Utiliser les propriÃ©tÃ©s des droites perpendiculaires";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 4;
  this.sup2 = 1;
  this.correction_detaillee_disponible = true;
  this.correction_detaillee = false;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles, questions_par_niveau = [];
    questions_par_niveau.push(range(3))
    questions_par_niveau.push(rangeMinMax(9, 15))
    questions_par_niveau.push(rangeMinMax(19, 31, 20))

    if (this.sup < 4) type_de_questions_disponibles = questions_par_niveau[parseInt(this.sup) - 1]
    else type_de_questions_disponibles = questions_par_niveau[0].concat(questions_par_niveau[1].concat(questions_par_niveau[2]))

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let droites = [], code, raisonnement, numDroites = [], phrases = [], textetemp
    let d = [], P = [], objets = [], num1, num2, couleurd = [], droiteP, PP, Inter
    let droitecolor = function (num) {
      let couleurs
      sortie_html ? couleurs = ['red', 'blue', 'green', 'black', 'magenta', 'orange'] : couleurs = ['black', 'black', 'black', 'black', 'black', 'black'];
      return couleurs[num]
    }
    if (sortie_html) {
      num1 = `<tspan dy="5" style="font-size:70%">`
      num2 = `</tspan><tspan dy="-5">)</tspan>`
    }
    else {
      num1 = `_`
      num2 = `)`
    }
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      texte = ""
      texte_corr = ""
      phrases.length = 0;
      droites.length = 0;
      objets.length = 0;
      d.length = 0;
      P.length = 0;
      couleurd.length = 0
      numDroites = shuffle([1, 2, 3, 4, 5]);
      raisonnement = liste_type_de_questions[i]

      switch (raisonnement) {
        case 0: // si 1//2 et 2//3 alors 1//3
          code = [[1, 2, 1], [2, 3, 1]];
          break;
        case 1: // si 1//2 et 2T3 alors 1T3
          code = [[1, 2, 1], [2, 3, -1]]
          break;
        case 2: // si 1T2 et 2T3 alors 1//3
          code = [[1, 2, -1], [2, 3, -1]]
          break;
        case 3: // si 1T2 et 2//3 alors 1T3
          code = [[1, 2, -1], [2, 3, 1]]
          break;
        case 8: // Si 1//2 et 2//3 et 3//4 alors 1//4
          code = [[1, 2, 1], [2, 3, 1], [3, 4, 1]];
          break;
        case 9: // Si 1//2 et 2//3 et 3T4 alors 1T4
          code = [[1, 2, 1], [2, 3, 1], [3, 4, -1]];
          break;
        case 10: // Si 1//2 et 2T3 et 3//4 alors 1T4
          code = [[1, 2, 1], [2, 3, 1], [3, 4, 1]];
          break;
        case 11: // Si 1//2 et 2T3 et 3T4 alors 1//4
          code = [[1, 2, 1], [2, 3, -1], [3, 4, -1]];
          break;
        case 12: // Si 1T2 et 2//3 et 3//4 alors 1T4
          code = [[1, 2, -1], [2, 3, 1], [3, 4, 1]];
          break;
        case 13: // Si 1T2 et 2//3 et 3T4 alors 1//4
          code = [[1, 2, -1], [2, 3, 1], [3, 4, -1]];
          break;
        case 14: // Si 1T2 et 2T3 et 3//4 alors 1//4
          code = [[1, 2, -1], [2, 3, -1], [3, 4, 1]];
          break;
        case 15: // Si 1T2 et 2T3 et 3T4 alors 1T4
          code = [[1, 2, -1], [2, 3, -1], [3, 4, -1]];
          break;
        case 16: // Si 1//2 et 2//3 et 3//4 et 4//5 alors 1//5
          code = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1]];
          break;
        case 17: // Si 1//2 et 2//3 et 3T4 et 4//5 alors 1T5
          code = [[1, 2, 1], [2, 3, 1], [3, 4, -1], [4, 5, 1]];
          break;
        case 18: // Si 1//2 et 2T3 et 3//4 et 4//5 alors 1T5
          code = [[1, 2, 1], [2, 3, -1], [3, 4, 1], [4, 5, 1]];
          break;
        case 19: // Si 1//2 et 2T3 et 3T4 et 4//5 alors 1//5
          code = [[1, 2, 1], [2, 3, -1], [3, 4, -1], [4, 5, 1]];
          break;
        case 20: // Si 1T2 et 2//3 et 3//4 et 4//5 alors 1T5
          code = [[1, 2, -1], [2, 3, 1], [3, 4, 1], [4, 5, 1]];
          break;
        case 21: // Si 1T2 et 2//3 et 3T4 et 4//5 alors 1//5
          code = [[1, 2, -1], [2, 3, 1], [3, 4, -1], [4, 5, 1]];
          break;
        case 22: // Si 1T2 et 2T3 et 3//4 et 4//5 alors 1//5
          code = [[1, 2, -1], [2, 3, -1], [3, 4, 1], [4, 5, 1]];
          break;
        case 23: // Si 1T2 et 2T3 et 3T4 et 4//5 alors 1T5
          code = [[1, 2, -1], [2, 3, -1], [3, 4, -1], [4, 5, 1]];
          break;
        case 24: // Si 1//2 et 2//3 et 3//4 et 4T5 alors 1T5
          code = [[1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, -1]];
          break;
        case 25: // Si 1//2 et 2//3 et 3T4 et 4T5 alors 1//5
          code = [[1, 2, 1], [2, 3, 1], [3, 4, -1], [4, 5, -1]];
          break;
        case 26: // Si 1//2 et 2T3 et 3//4 et 4T5 alors 1//5
          code = [[1, 2, 1], [2, 3, -1], [3, 4, 1], [4, 5, -1]];
          break;
        case 27: // Si 1//2 et 2T3 et 3T4 et 4T5 alors 1T5
          code = [[1, 2, 1], [2, 3, -1], [3, 4, -1], [4, 5, -1]];
          break;
        case 28: // Si 1T2 et 2//3 et 3//4 et 4T5 alors 1//5
          code = [[1, 2, -1], [2, 3, 1], [3, 4, 1], [4, 5, -1]];
          break;
        case 29: // Si 1T2 et 2//3 et 3T4 et 4T5 alors 1T5
          code = [[1, 2, -1], [2, 3, 1], [3, 4, -1], [4, 5, -1]];
          break;
        case 30: // Si 1T2 et 2T3 et 3//4 et 4T5 alors 1T5
          code = [[1, 2, -1], [2, 3, -1], [3, 4, 1], [4, 5, -1]];
          break;
        case 31: // Si 1T2 et 2T3 et 3T4 et 4T5 alors 1//5
          code = [[1, 2, -1], [2, 3, -1], [3, 4, -1], [4, 5, -1]];
          break;

      }

      // enoncÃ© mÃ©langÃ©
      texte += `On sait que `
      couleurd.push(randint(0, 5))
      for (let j = 0; j < code.length; j++) {
        textetemp = `$(d_${numDroites[code[j][0] - 1]})`;
        if (code[j][2] == 1) {
          textetemp += `//`
          couleurd.push(couleurd[j])
        }
        else {
          textetemp += `\\perp`
          couleurd.push((couleurd[j] + 1) % 6)
        }
        textetemp += `(d_${numDroites[code[j][1] - 1]})$`
        phrases.push(textetemp)
      }
      //phrases=shuffle(phrases)
      for (let j = 0; j < code.length - 1; j++) {
        texte += phrases[j]
        if (j != code.length - 2) texte += `, `
        else texte += ` et `
      }
      texte += phrases[code.length - 1]
      texte += `.<br>Que peut-on dire de $(d_${numDroites[code[0][0] - 1]})$ et $(d_${numDroites[code[code.length - 1][1] - 1]})$ ?`

      //construction de la figure

      P.push(point(0, 0))
      droiteP = droiteParPointEtPente(P[0], randint(-1, 1, 0) / 10, `(d${num1}${numDroites[code[0][0] - 1]}${num2}`, droitecolor(couleurd[0]))
      droiteP.epaisseur = 2
      droite.pointilles = false
      d.push(droiteP)
      objets.push(d[0])
      for (let x = 0; x < code.length; x++) {
        if (code[x][2] == 1) {
          P.push(point((x + 1) * 2, (x + 1) * 2))
          droiteP = droiteParPointEtParallele(P[x + 1], d[x], `(d${num1}${numDroites[code[x][1] - 1]}${num2}`, droitecolor(couleurd[x + 1]))
          droiteP.epaisseur = 2
          droiteP.pointilles = d[x].pointilles
          d.push(droiteP)
        }
        else {
          P.push(point((x + 1) * 2, (x + 1) * 2))
          droiteP = droiteParPointEtPerpendiculaire(P[x + 1], d[x], `(d${num1}${numDroites[code[x][1] - 1]}${num2}`, droitecolor(couleurd[x + 1]))
          droiteP.epaisseur = 2
          droiteP.pointilles = x % 3 + 1
          Inter = pointIntersectionDD(d[x], droiteP)
          PP = rotation(P[x + 1], Inter, 90)
          d.push(droiteP)
          objets.push(codageAngleDroit(PP, Inter, P[x + 1], 'black', 0.6))
        }
        objets.push(d[x + 1])
      }
      for (let i = 0; i < code.length; i++) { // on ajoute les angles droits

      }
      // correction raisonnement ordonnÃ©
      fenetreMathalea2d = [-2, -2, 15, 10]
      texte_corr = `Ã partir de l\'Ã©noncÃ©, on peut rÃ©aliser le schÃ©ma suivant (il en existe une infinitÃ©)<br> Les droites donnÃ©es parallÃ¨les dans l'Ã©noncÃ© sont de mÃªme couleur/style.<br>`
      texte_corr += mathalea2d({ xmin: -2, xmax: 15, ymin: -2, ymax: 10, pixelsParCm: 20, scale: 0.3, mainlevee: false, amplitude: 0.3 }, objets) + `<br>`
      for (let j = 0; j < code.length - 1; j++) {
        if (this.correction_detaillee) texte_corr += `On sait que : `
        else texte_corr += `Comme `
        texte_corr += `$(d_${numDroites[code[j][0] - 1]})`;
        if (code[j][2] == 1) texte_corr += `//`
        else texte_corr += `\\perp`
        texte_corr += `(d_${numDroites[code[j][1] - 1]})$ et `
        texte_corr += `$(d_${numDroites[code[j + 1][0] - 1]})`;
        if (code[j + 1][2] == 1) texte_corr += `//`
        else texte_corr += `\\perp`
        texte_corr += `(d_${numDroites[code[j + 1][1] - 1]})$`
        // quelle propriÃ©tÃ© ?
        if (code[j][2] * code[j + 1][2] == -1) { // Une parallÃ¨le et une perpendiculaire
          if (this.correction_detaillee) texte_corr += `.<br> Or Â«Si deux droites sont parallÃ¨les alors toute droite perpendiculaire Ã  l'une est aussi perpendiculaire Ã  l'autreÂ».<br>Donc`
          else texte_corr += `, on en dÃ©duit que `
          texte_corr += ` $(d_${numDroites[code[0][0] - 1]})\\perp(d_${numDroites[code[j + 1][1] - 1]})$.<br>`
          code[j + 1][0] = code[j][0]
          code[j + 1][2] = -1
        }
        else if (code[j][2] > 0) { // deux parallÃ¨les
          if (this.correction_detaillee) texte_corr += `.<br> Or Â«Si deux droites sont parallÃ¨les Ã  une mÃªme droite alors elles sont parallÃ¨les entre ellesÂ».<br>Donc`
          else texte_corr += `, on en dÃ©duit que `
          texte_corr += ` $(d_${numDroites[code[0][0] - 1]})//(d_${numDroites[code[j + 1][1] - 1]})$.<br>`
          code[j + 1][0] = code[j][0]
          code[j + 1][2] = 1

        }
        else { //deux perpendiculaires
          if (this.correction_detaillee) texte_corr += `.<br> Or Â«Si deux droites sont perpendiculaires Ã  une mÃªme droite alors elles sont parallÃ¨les entre ellesÂ».<br>Donc`
          else texte_corr += `, on en dÃ©duit que `
          texte_corr += ` $(d_${numDroites[code[0][0] - 1]})//(d_${numDroites[code[j + 1][1] - 1]})$.<br>`
          code[j + 1][0] = code[j][0]
          code[j + 1][2] = 1

        }


      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte + "<br>");
        this.liste_corrections.push(texte_corr + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Nombre d\'Ã©tapes de raisonnement :', 4, `1 : 1 Ã©tape\n 2 : 2 Ã©tapes\n 3 : 3 Ã©tapes\n4 : MÃ©lange alÃ©atoire`]
  // this.besoin_formulaire2_case_a_cocher = [
  //  "Avec figure ? ",false];
}

/**
 * Fonction gÃ©nÃ©rale pour exercices de constructions de parallÃ¨les et perpendiculaires
 * rÃ©fÃ©rences 6G11, 6G12 et 6G12-1
 * @Auteur Jean-Claude Lhote
 */
function Parallele_et_Perpendiculaires() {
  "use strict";
  Exercice.call(this);
  this.titre = "Tracer des parallÃ¨les et des perpendiculaires";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles;
    type_de_questions_disponibles = [parseInt(this.sup)]; // Le choix 1 ou 2 ou 3 : 1=perpendiculaires, 2=parallÃ¨les, 3=des perpendiculaires et des paralÃ¨lles
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc = 20, sc;

    let A,
      B,
      C,
      D,
      xE,
      E,
      F,
      CC,
      DD,
      EE,
      d,
      s1,
      s2,
      enonce,
      correction,
      dB,
      dC,
      dD,
      dE,
      g,
      lC,
      lD,
      lE,
      cB,
      cC,
      cD,
      cE,
      cF,
      cG,
      FF,
      BB,
      carreaux,
      k,
      objets_enonce = [],
      objets_correction = [],

      p;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      objets_enonce.splice(0)
      objets_correction.splice(0)
      if (this.sup2 == 2)
        k = 0.8;
      else
        k = 0.5;
      switch (liste_type_de_questions[i]) {
        case 1:
          A = point(0, 0, "A", "above left");
          B = point(10, randint(-4, 4, [-1, 0, 1]), "B", "above right");
          d = droite(A, B);
          d.isVisible = true;
          C = point(randint(2, 3), randint(3, 4), "C", "above left");
          D = point(randint(7, 8), randint(-7, -6), "D");
          dB = droiteParPointEtPerpendiculaire(B, d);
          xE = 11;
          E = pointSurDroite(dB, 11, "E", "left");
          while (!Number.isInteger(E.y)) {
            xE++;
            E = pointSurDroite(dB, xE, "E", "left");
          }
          F = point(E.x, B.y);
          s1 = segment(B, F, "red");
          s1.epaisseur = 2;
          s1.pointilles = true;
          s2 = segment(F, E, "blue");
          s2.epaisseur = 2;
          s2.pointilles = true;
          dC = droiteParPointEtPerpendiculaire(C, d);
          dD = droiteParPointEtPerpendiculaire(D, d);
          BB = rotation(A, B, 90);
          CC = pointIntersectionDD(dC, d, "M", "below right");
          DD = pointIntersectionDD(dD, d, "N", "above left");
          lC = arrondi(longueur(CC, A) * k, 1);
          lD = arrondi(longueur(DD, A) * k, 1);
          cB = codageAngleDroit(A, B, BB);
          cC = codageAngleDroit(C, CC, B);
          cD = codageAngleDroit(D, DD, B);
          objets_correction.push(s1,
            s2,
            dC,
            dD,
            dB,
            cB,
            cC,
            cD,
            d,
            tracePoint(A, B, C, D, E, CC, DD),
            labelPoint(A, B, C, D, E, CC, DD),
            afficheCoteSegment(
              segment(A, CC),
              `${tex_nombre(lC)} cm`,
              0.5,
              "red",
              1,
              0.5,
              "red"
            ),
            afficheCoteSegment(
              segment(A, DD),
              `${tex_nombre(lD)} cm`,
              -0.5,
              "red",
              1,
              -0.5,
              "red"
            )
          );
          objets_enonce.push(
            tracePoint(A, B, C, D),
            labelPoint(A, B, C, D),
            d,
          );
          if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
          else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
          enonce +=
            num_alpha(1) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $B$.<br>`;
          enonce +=
            num_alpha(2) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $C$ et nommer $M$ le point d'intersection de cette droite avec la droite $(AB)$.<br>`;
          enonce +=
            num_alpha(3) +
            ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $D$ et nommer $N$ le point d'intersection de cette droite avec la droite $(AB)$.<br>`;
          enonce +=
            num_alpha(4) +
            ` Mesurer ensuite les distances $AM$ et $AN$.<br> Pour l'auto-correction comparer ces mesures avec celles donnÃ©es dans la correction<br>`;
          correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm et $AN \\approx ${tex_nombre(lD)}$ cm.<br>`;
          correction += `Pour la perpendiculaire en $B$, contrÃ´le la position du point $E$.<br>`;
          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, CC.x, DD.x) - 1)
          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, CC.x, DD.x) + 1)
          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, CC.y, DD.y) - 1)
          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, CC.y, DD.y) + 1)
          break;
        case 2:
          A = point(2, 0, "A", 'below left');
          B = point(12, randint(-4, 4, 0), "B");
          d = droite(A, B);
          d.isVisible = true;
          C = point(0, randint(3, 4), "C", 'above');
          D = point(randint(7, 8), randint(-7, -6), "D", 'below right');
          E = point(randint(4, 5), randint(5, 6), "E", 'below right');
          F = point(2, -3, "F", "left");

          dE = droiteParPointEtParallele(E, d);
          dC = droiteParPointEtParallele(C, d);
          dD = droiteParPointEtParallele(D, d);
          p = droite(A, F);
          p.isVisible = true;
          CC = pointIntersectionDD(dC, p, 'M', 'above left');
          DD = pointIntersectionDD(dD, p, 'N', 'above left');
          EE = pointIntersectionDD(dE, p, 'O', 'above left');
          lC = arrondi(longueur(CC, A) * k, 1);
          lD = arrondi(longueur(DD, A) * k, 1);
          lE = arrondi(longueur(EE, A) * k, 1);
          objets_correction.push(dC, dD, dE, d, p, tracePoint(A, B, C, D, E, F), labelPoint(A, B, C, D, E, F, CC, DD, EE), afficheCoteSegment(segment(A, CC), `${tex_nombre(lC)} cm`, .2, 'red', 1, 0.5, 'red'), afficheCoteSegment(segment(DD, A), `${tex_nombre(lD)} cm`, -0.2, 'green', 1, -0.5, 'green'), afficheCoteSegment(segment(A, EE), `${tex_nombre(lE)} cm`, -0.2, 'blue', 1, -0.5, 'blue'))
          objets_enonce.push(tracePoint(A, B, C, D, E, F), labelPoint(A, B, C, D, E, F), d, p);

          if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
          else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
          enonce += num_alpha(1) + ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $C$ et nommer $M$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce += num_alpha(2) + ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $D$ et nommer $N$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce += num_alpha(3) + ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $E$ et nommer $O$, le point d'intersection de cette droite avec la droite $(AF)$.<br>`;
          enonce += num_alpha(4) + ` Mesurer les distances $AM$, $AN$ et $AO$. Pour l'auto-correction, comparer ces mesures avec celles donnÃ©es par  l'ordinateur dans la correction.<br>`;

          correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm, $AN \\approx ${tex_nombre(
            lD
          )}$ cm et $AO \\approx${tex_nombre(
            lE
          )}$ cm.<br>`;
          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) - 1)
          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) + 1)
          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) - 1)
          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) + 1)
          break;
        case 3:
          A = point(0, 0, "A", "above left");
          B = point(10, randint(-4, 4, [-1, 0, 1]), "B", "above right");
          d = droite(A, B);
          d.isVisible = true;
          C = point(randint(2, 3), randint(3, 4), "C", "above left");
          D = point(randint(7, 8), randint(-7, -6), "D");
          dB = droiteParPointEtPerpendiculaire(B, d);
          xE = 11;
          E = pointSurDroite(dB, 11, "E", "left");
          while (!Number.isInteger(E.y)) {
            xE++;
            E = pointSurDroite(dB, xE, "E", "left");
          }
          F = point(E.x, B.y);
          dE = droiteParPointEtParallele(E, d);
          dD = droiteParPointEtParallele(D, d);
          dC = droiteParPointEtPerpendiculaire(C, d)
          BB = rotation(A, B, 90);
          CC = pointIntersectionDD(dC, d, "M", "below right");
          DD = pointIntersectionDD(dD, dB, "N", "above left");
          EE = pointIntersectionDD(dC, dE, 'O', 'above left');
          FF = pointIntersectionDD(dD, dC)

          lC = arrondi(longueur(CC, A) * k, 1);
          lD = arrondi(longueur(DD, A) * k, 1);
          lE = arrondi(longueur(EE, A) * k, 1);
          cB = codageAngleDroit(A, B, BB);
          cC = codageAngleDroit(C, CC, B);
          cD = codageAngleDroit(D, DD, B, 'red');
          cE = codageAngleDroit(B, E, EE, 'red')
          cF = codageAngleDroit(C, EE, E, 'red')
          cG = codageAngleDroit(C, FF, D, 'red')

          objets_correction.push(dC, dD, dB, dE, cB, cC, cD, cE, cF, cG, d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), afficheCoteSegment(
            segment(A, CC),
            `${tex_nombre(lC)} cm`,
            0.5,
            "red",
            1,
            0.5,
            "red"
          ),
            afficheCoteSegment(
              segment(A, DD),
              `${tex_nombre(lD)} cm`,
              0,
              "blue",
              1,
              -0.5,
              "blue"
            ),
            afficheCoteSegment(
              segment(A, EE),
              `${tex_nombre(lE)} cm`,
              0,
              "green",
              1,
              -0.5,
              "green"
            ));
          objets_enonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d);
          if (sortie_html) enonce = num_alpha(0) + ` Reproduire la figure ci-dessous.<br>`;
          else enonce = num_alpha(0) + ` Utiliser un crayon Ã  papier afin de pouvoir gommer si besoin.<br>`;
          enonce += num_alpha(1) + ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $B$.<br>`;
          enonce += num_alpha(2) + ` Tracer la droite perpendiculaire Ã  $(AB)$ passant par $C$ et nomme $M$, le point d'intersection de cette droite avec la droite $(AB)$.<br>`
          enonce += num_alpha(3) + ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $D$ et nomme $N$, le point d'intersection de cette droite avec la droite $(BE)$.<br>`;
          enonce += num_alpha(4) + ` Tracer la droite parallÃ¨le Ã  $(AB)$ passant par $E$ et nomme $O$, le point d'intersection de cette droite avec la droite $(CM)$.<br>`
          enonce += num_alpha(5) + ` Mesurer les distances $AM$, $AN$ et $AO$. Pour l'auto-correction, comparer ces mesures avec celles donnÃ©es par  l'ordinateur dans la correction.<br>`;

          correction = `<br>$AM \\approx ${tex_nombre(
            lC
          )}$ cm, $AN \\approx ${tex_nombre(
            lD
          )}$ cm et $AO \\approx${tex_nombre(
            lE
          )}$ cm.<br>`;
          correction += `Les angle droits en rouge se justifient par la propriÃ©tÃ© :<br> ${texte_en_couleur(`Si deux droites sont parallÃ¨les, alors toute droite perpendiculaire Ã  l'une est aussi perpendiculaire Ã  l'autre`, 'red')}.<br>`
          correction += `VÃ©rifier les angles droits Ã  l'Ã©querre.<br>`
          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) - 1)
          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) + 1)
          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) - 1)
          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) + 1)

          break
      }
      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        sc = 0.8;
        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
      } else {
        sc = 0.5;
        carreaux = "";
      }
      objets_enonce.push(g, carreaux)
      objets_correction.push(g, carreaux)

      enonce += mathalea2d(
        {
          xmin: Xmin,
          ymin: Ymin,
          xmax: Xmax,
          ymax: Ymax,
          pixelsParCm: ppc,
          scale: sc,
        },
        objets_enonce
      );
      correction += mathalea2d(
        {
          xmin: Xmin,
          ymin: Ymin,
          xmax: Xmax,
          ymax: Ymax,
          pixelsParCm: ppc,
          scale: sc,
        },
        objets_correction
      );
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(enonce + "<br>");
        this.liste_corrections.push(correction + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  //	this.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\n 2 : ParallÃ¨les\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}


/**
 * Produire une forme littÃ©rale en introduisant une lettre pour dÃ©signer une valeur inconnue
 * * 6P11-1
 * @author SÃ©bastien Lozano
 */
function Proportionnalite_par_linearite_bis() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 3;
  } else {
    this.nb_questions = 1;
  };

  this.titre = "RÃ©soudre un problÃ¨me relevant de la proportionnalitÃ© avec les propriÃ©tÃ©s de linÃ©aritÃ©.";
  this.consigne = "";
  sortie_html ? this.spacing = 1.5 : this.spacing = 1;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  //sortie_html? this.spacing = 3 : this.spacing = 2; 
  //sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [1];
    } else {
      type_de_questions_disponibles = [1];
    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    type_de_questions_disponibles = [1];
    let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    //let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

      // une fonction pour gÃ©rer le pluriel 
      function pluriel(n, obj) {
        if (n > 1) {
          return obj.achat_plur
        } else {
          return obj.achat_sing
        };
      };

      // une fonction pour gÃ©rer la chaine de sortie et supprimer le coeff 1 !
      function sliceUn(n) {
        if (n == 1) {
          return ``;
        } else {
          return `${n}`;
        };
      };

      //une fonction pour calculer la diffÃ©rence positive entre deux entiers
      function diffInt(n, p) {
        if (n > p) {
          return calcul(n - p);
        } else if (n < p) {
          return calcul(p - n);
        } else {
          return 0;
        }
      };

      // un compteur pour les sous-questions
      let k = 0;
      let k_corr = 0;
      // on crÃ©e un tableau d'objets pour les situations possibles
      let n1, n2, n3, n4, n_max;
      do {
        n1 = randint(1, 9);
        n2 = randint(1, 9, [n1]);
        n3 = n1 + n2;
        n4 = diffInt(n1, n2);
        n_max = randint(10, 19, [n3]);
      } while (n4 == 1);
      //n1 sera toujours le plus grand sinon on intervertit les deux
      let temp;
      if (n1 < n2) {
        temp = n1;
        n1 = n2;
        n2 = temp;
      };
      let situations = [
        { lieu: `la boulangerie "Au bon pain"`, achat_sing: `pain au chocolat`, achat_plur: `pains au chocolat`, prenom1: prenom(), prenom2: prenom(), prenom3: prenom(), prenom4: prenom(), prenom_max: prenom(), n1: n1, n2: n2, n3: n3, n4: n4, n_max: n_max, pu: 0.9 }
      ]
      let enonces = [];
      let situation = situations[randint(0, situations.length - 1)];

      enonces.push({
        enonce: `
          Dans ${situation.lieu}, ${situation.prenom1} achÃ¨te $${situation.n1}$ ${pluriel(situation.n1, situation)} et paie $${tex_prix(situation.pu * situation.n1)}$ â¬.
          <br>${situation.prenom2} achÃ¨te $${situation.n2}$ ${pluriel(situation.n2, situation)} et paie $${tex_prix(situation.pu * situation.n2)}$ â¬.
          <br>
          <br>${num_alpha(k++)} Combien paiera ${situation.prenom3} pour $${situation.n3}$ ${pluriel(situation.n3, situation)} ?
          <br>${num_alpha(k++)} Combien paiera ${situation.prenom4} pour $${situation.n4}$ ${pluriel(situation.n4, situation)} ?
          <br>${num_alpha(k++)} Quel est le nombre maximum de ${situation.achat_plur} que ${situation.prenom_max} peut acheter avec $${tex_prix(situation.pu * situation.n_max)}$ â¬ ?
          `,
        question: ``,
        correction: `
        C'est une situation de proportionnalitÃ©. Nous pouvons donc utiliser les propriÃ©tÃ©s de linÃ©aritÃ© de la proportionnalitÃ©.
        <br>C'est ce que nous allons faire pour les deux premiÃ¨res questions.
        <br>
        <br>${num_alpha(k_corr++)} Pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${tex_prix(situation.pu * situation.n1)}$ â¬.
        <br> Pour $${situation.n2}$ ${pluriel(situation.n2, situation)}, on paie $${tex_prix(situation.pu * situation.n2)}$ â¬.
        <br> Donc pour $${situation.n1}+${situation.n2}$ ${pluriel(situation.n3, situation)}, on paie $${tex_prix(situation.pu * situation.n1)}$ â¬ + $${tex_prix(situation.pu * situation.n2)}$ â¬.
        <br> ${texte_en_couleur(`${situation.prenom3} paiera donc $${tex_prix(situation.pu * situation.n3)}$ â¬ pour $${situation.n3}$ ${pluriel(situation.n3, situation)}.`)}
        <br>
        <br>${num_alpha(k_corr++)} Pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${tex_prix(situation.pu * situation.n1)}$ â¬.
        <br> Pour $${situation.n2}$ ${pluriel(situation.n2, situation)}, on paie $${tex_prix(situation.pu * situation.n2)}$ â¬.
        <br> Donc pour $${situation.n1}-${situation.n2}$ ${pluriel(situation.n4, situation)}, on paie $${tex_prix(situation.pu * situation.n1)}$ â¬ - $${tex_prix(situation.pu * situation.n2)}$ â¬.
        <br> ${texte_en_couleur(`${situation.prenom4} paiera donc $${tex_prix(situation.pu * situation.n4)}$ â¬ pour $${situation.n4}$ ${pluriel(situation.n4, situation)}.`)}
        <br>
        <br>${num_alpha(k_corr++)} On peut utiliser l'une ou l'autre des informations de l'Ã©noncÃ© pour rÃ©pondre en revenant Ã  l'unitÃ©.
        <br> Par exemple pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${tex_prix(situation.pu * situation.n1)}$ â¬.
        <br> Donc $1$ ${situation.achat_sing} coÃ»te $${tex_prix(situation.pu * situation.n1)}\\div ${situation.n1} = ${tex_prix(situation.pu)}$ â¬.
        <br> Pour $${tex_prix(situation.pu * situation.n_max)}$ â¬ nous aurons donc $${tex_prix(situation.pu * situation.n_max)}\\div ${tex_prix(situation.pu)}$ â¬ $= ${situation.n_max}$ ${pluriel(situation.n_max, situation)}.
        <br> ${texte_en_couleur(`Avec $${tex_prix(situation.pu * situation.n_max)}$ â¬, ${situation.prenom_max} pourra donc acheter $${situation.n_max}$ ${pluriel(situation.n_max, situation)}.`)}
        `
      })
      switch (liste_type_de_questions[i]) {
        case 1:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
      }

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  }
}


/**
 * Lire un diagramme en barre
 * @Auteur Erwan Duplessy
 * RÃ©fÃ©rence 6S10
 */

function Lecture_diagramme_barre() {

  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Lire un diagramme en barre";
  this.consigne = "RÃ©pondre aux questions Ã  l'aide du graphique.";
  this.nb_questions = 3;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;

  this.nouvelle_version = function () {
    this.liste_questions = []; // vide la liste de questions
    this.liste_corrections = []; // vide la liste de questions corrigÃ©es   

    let lstAnimaux = ['girafes', 'zÃ¨bres', 'gnous', 'buffles', 'gazelles', 'crocodiles', 'rhinocÃ©ros', 'lÃ©opards', 'guÃ©pards', 'hyÃ¨nes', 'lycaons', 'servals', 'phacochÃ¨res'];
    let nbAnimaux = 4; // nombre d'animaux diffÃ©rents dans l'Ã©noncÃ©
    switch (parseInt(this.sup)) {
      case 1: nbAnimaux = 4; break;
      case 2: nbAnimaux = 5; break;
      case 3: nbAnimaux = 6; break;
      default: nbAnimaux = 4;
    }
    let lstAnimauxExo = []; //liste des animaux uniquement citÃ©s dans l'exercice
    let lstNombresAnimaux = []; // liste des effectifs de chaque animal
    let lstVal = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]; // liste des valeurs Ã  Ã©viter pour les effectifs
    let N = 0;

    switch (parseInt(this.sup2)) {
      case 1:
        for (let i = 0; i < nbAnimaux; i++) {
          N = randint(2, 100, lstVal); // choisit un nombre entre 2 et 100 sauf dans les valeurs Ã  Ã©viter
          lstNombresAnimaux.push(N);
          lstVal = lstVal.concat([N - 1, N, N + 1]); // valeurs Ã  supprimer pour Ã©viter des valeurs proches
        }
        break;
      case 2:
        for (let i = 0; i < nbAnimaux; i++) {
          N = randint(2, 100, lstVal); // choisit un nombre entre 2 et 100 sauf dans les valeurs Ã  Ã©viter
          lstNombresAnimaux.push(10 * N);
          lstVal = lstVal.concat([N - 1, N, N + 1]); // valeurs Ã  supprimer pour Ã©viter des valeurs proches
        }
        break;
    }

    for (let i = 0; i < nbAnimaux; i++) {
      nom = choice(lstAnimaux, lstAnimauxExo); // choisit un animal au hasard sauf parmi ceux dÃ©jÃ  utilisÃ©s
      lstAnimauxExo.push(nom);
    }

    let nMin = Math.min(...lstNombresAnimaux);
    let nMax = Math.max(...lstNombresAnimaux);

    let lstNomParc = ['Dramve', 'Fatenmin', 'Batderfa', 'Vihi', 'Genser', 'Barbetdou', 'Dramrendu', 'Secai', 'Cipeudram', 'Cigel', 'Lisino', 'Fohenlan',
      'Farnfoss', 'Kinecardine', 'Zeffari', 'Barmwich', 'Swadlincote', 'Swordbreak', 'Loshull', 'Ruyron', 'Fluasall', 'Blueross', 'Vlane'];

    texte = 'Dans le parc naturel de ' + choice(lstNomParc) + ', il y a beaucoup dâanimaux. Voici un diagramme en bÃ¢tons qui donne le nombre dâindividus pour chaque espÃ¨ce.<br>';
    texte += num_alpha(0) + ` Quels sont les animaux les plus nombreux ?<br>`;
    texte += num_alpha(1) + ` Quels sont les animaux les moins nombreux ?<br>`;

    let numAnimal = randint(0, nbAnimaux - 1);
    switch (parseInt(this.sup2)) {
      case 1: texte += num_alpha(2) + ` Donner un encadrement Ã  la dizaine du nombre de ` + lstAnimauxExo[numAnimal] + ' ?<br>';
        break;
      case 2: texte += num_alpha(2) + ` Donner un encadrement Ã  la centaine du nombre de ` + lstAnimauxExo[numAnimal] + ' ?<br>';
        break;
    }
    texte += '<br>'

    // coefficient pour gÃ©rer les deux types d'exercices (entre 1 et 100) ou (entre 10 et 1000)
    let coef = 1;
    switch (parseInt(this.sup2)) {
      case 1:
        coef = 1;
        break;
      case 2:
        coef = 10;
        break;
    }

    let r = repere2({
      grilleX: false,
      grilleY: 'pointilles',
      xThickListe: [],
      xLabelListe: [],
      yUnite: .1 / coef,
      yThickDistance: 10 * coef,
      yMax: 110 * coef,
      xMin: 0,
      xMax: 10,
      yMin: 0,
      axeXStyle: '',
      yLegende: "Nombre d'individus"
    });

    let lstElementGraph = []
    for (let i = 0; i < nbAnimaux; i++) {
      lstElementGraph.push(traceBarre((((r.xMax - r.xMin) / (nbAnimaux + 1)) * (i + 1)), lstNombresAnimaux[i], premiere_lettre_en_majuscule(lstAnimauxExo[i]), { unite: .1 / coef }))
    }

    texte += mathalea2d({ xmin: -5, xmax: 11, ymin: -4, ymax: 11, pixelsParCm: 30, scale: .5 }, r, lstElementGraph)
    // debut de la correction
    // question 1
    texte_corr = num_alpha(0) + ` Les animaux les plus nombreux sont les ` + lstAnimauxExo[lstNombresAnimaux.indexOf(nMax)] + '.<br>';
    // question 2
    texte_corr += num_alpha(1) + ` Les animaux les moins nombreux sont les ` + lstAnimauxExo[lstNombresAnimaux.indexOf(nMin)] + '.<br>';
    // question 3
    let reponse = lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[numAnimal])];
    reponseinf = 10 * coef * Math.floor(reponse / (10 * coef))
    reponsesup = reponseinf + 10 * coef
    texte_corr += num_alpha(2) + ' Il y a entre ' + reponseinf + ' et ' + reponsesup + ' ' + lstAnimauxExo[numAnimal] + '.<br>';

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  }
  this.besoin_formulaire_numerique = [`Nombre d'espÃ¨ces diffÃ©rentes`, 3, ` choix 1 : 4 espÃ¨ces\n choix 2 : 5 espÃ¨ces\n choix 3 : 6 espÃ¨ces`];
  this.besoin_formulaire2_numerique = [`Valeurs numÃ©riques`, 2, ` choix 1 : entre 1 et 100\n choix 2 : entre 100 et 1 000`];
}


/**
 * Organiser donnees depuis texte
 * @Auteur Erwan Duplessy
 * RÃ©fÃ©rence 6S11
 */

// source : http://www.ac-grenoble.fr/savoie/pedagogie/docs_pedas/ogd_c2_c3/ogd_c2_c3.pdf

function Organiser_donnees_depuis_texte() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Organiser des donnÃ©es dans un tableau";
  this.consigne = "RÃ©pondre aux questions Ã  l'aide du texte.";
  this.nb_questions = 4;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = false; // false -> effectif ; true -> masse
  this.sup2 = 4; // paramÃ¨tre nombre de fruit
  sortie_html ? this.spacing = 2 : this.spacing = 1;
  sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

  this.nouvelle_version = function () {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    let nbAmis = 4; // min = 2
    let nbFruits = parseInt(this.sup2); // min = 2
    let lstPrenomExo = []
    let k = 0;
    while (lstPrenomExo.length < nbAmis) {
      let p = prenom();
      if (!lstPrenomExo.includes(p)) {
        lstPrenomExo.push(p);
      }
    }

    let lstFruit = ['pomme', 'poire', 'kiwi', 'pÃªche', 'coing', 'melon', 'citron', 'banane', 'mangue'];
    let lstFruitExo = [];
    // Choisir les fruits : 
    for (let i = 0; i < nbFruits; i++) {
      lstFruitExo.push(choice(lstFruit, lstFruitExo));
    }
    // Choisir les quantitÃ©s de fruits pour chaque prÃ©noms : 
    let lstTabVal = []; // tableau i : amis et j : fruits
    let L = []; // tab temporaire
    for (let i = 0; i < nbAmis; i++) {
      for (let j = 0; j < nbFruits; j++) {
        if (this.sup) {
          if (randint(0, 8) > 0) {
            L.push(randint(0, 100) / 10);
          } else {
            L.push(0);
          }

        } else {
          L.push(randint(0, 10));
        }
      }
      lstTabVal.push(L);
      L = [];
    }
    // Affiche l'Ã©noncÃ© :
    texte = `Plusieurs amis reviennent du marchÃ©. Il s'agit de `;
    for (let i = 0; i < nbAmis - 2; i++) {
      texte += lstPrenomExo[i] + ', '
    }
    texte += lstPrenomExo[nbAmis - 2] + ' et ' + lstPrenomExo[nbAmis - 1] + '.<br>';
    let N;
    //boucle sur les phrases. 1 phrase par personne.
    for (let i = 0; i < nbAmis; i++) {
      texte += lstPrenomExo[i] + ' rapporte ';
      L = []; // ne contient que les fruits d'effectifs strictement positifs
      for (let j = 0; j < nbFruits; j++) {
        N = lstTabVal[i][j];
        if (N > 0) {
          L.push([N, lstFruitExo[j]])
        }
      }
      m = L.length
      L = shuffle(L); // mÃ©lange l'ordre des fruits
      for (let k = 0; k < m; k++) {
        if (this.sup) {
          texte += tex_nombre(L[k][0]) + ' kg de ' + L[k][1] + 's';
        } else {
          texte += tex_nombre(L[k][0]) + ' ' + L[k][1];
          if (L[k][0] > 1) { texte += 's' }
        }
        if (k < m - 2) { texte += ', ' }
        if (k == m - 2) { texte += ' et ' }
      }
      texte += '. <br>'
    }
    texte += '<br>'
    texte += num_alpha(0) + ` Remplir le tableau suivant. <br>`;

    if (this.sup) {
      texte += num_alpha(1) + ` Quel est la masse totale de fruits achetÃ©s par les amis ? <br>`;
    } else {
      texte += num_alpha(1) + ` Quel est le nombre total de fruits achetÃ©s par les amis ? <br>`;
    }
    texte += num_alpha(2) + ` Qui a rapportÃ© le plus de fruits ? <br>`;
    texte += num_alpha(3) + ` Quel fruit a Ã©tÃ© rapportÃ© en la plus grosse quantitÃ© ? <br><br>`;

    texte += `$\\begin{array}{|l|` + `c|`.repeat(nbFruits + 1) + `}\n`;
    texte += `\\hline\n`;
    texte += ` `;
    for (let j = 0; j < nbFruits; j++) {
      texte += ` & \\textbf{\\text{` + premiere_lettre_en_majuscule(lstFruitExo[j]) + `}}`;
    }
    texte += '& \\textbf{TOTAL}';
    texte += `\\\\\\hline\n`;
    for (let i = 0; i < nbAmis; i++) {
      texte += `\\textbf{\\text{${lstPrenomExo[i]}}}` + `& `.repeat(nbFruits) + ` & `;
      texte += `\\\\\\hline\n`;
    }
    texte += '\\textbf{TOTAL}' + '& '.repeat(nbFruits) + ` & `;
    texte += `\\\\\\hline\n`;
    texte += `\\end{array}\n$`;

    //CORRECTION
    // Question 1 :
    texte_corr = num_alpha(0) + ` Voici le tableau complet. <br>`;
    texte_corr += `$\\begin{array}{|l|` + `c|`.repeat(nbFruits + 1) + `}\n`;
    texte_corr += `\\hline\n`;
    texte_corr += ` `;
    for (let j = 0; j < nbFruits; j++) {
      texte_corr += ` & \\text{${lstFruitExo[j]}}`;
    }
    texte_corr += '& TOTAL';
    texte_corr += `\\\\\\hline\n`;
    for (let i = 0; i < nbAmis; i++) {
      texte_corr += `\\text{${lstPrenomExo[i]}}`;
      let S = 0; // pour calculer les sommes
      for (let j = 0; j < nbFruits; j++) {
        texte_corr += '& ' + tex_nombre(lstTabVal[i][j]); //valeur dans le tableau
        S += lstTabVal[i][j]; // somme d'une ligne
      }
      texte_corr += '& ' + arrondi_virgule(S);
      texte_corr += `\\\\\\hline\n`;
    }
    texte_corr += 'TOTAL';
    let S_total = 0; // somme totale de tous les fruits
    for (let j = 0; j < nbFruits; j++) {
      S = 0;
      for (let i = 0; i < nbAmis; i++) {
        S += lstTabVal[i][j]; // somme d'une colonne
      }
      //texte_corr += '& ' + Math.round(S*10)/10;
      texte_corr += '& ' + arrondi_virgule(S, 1);
      //texte_corr += '& ' + tex_nombre(S,1);
      S_total += S;
    }
    texte_corr += '& ' + arrondi_virgule(S_total);
    texte_corr += `\\\\\\hline\n`;
    texte_corr += `\\end{array}\n$`;
    texte_corr += `<br>`

    // Question 2 :
    S_total = arrondi_virgule(S_total);
    if (this.sup) {
      texte_corr += num_alpha(1) + ` La masse totale de fruits est : ${S_total} kg. <br>`;
    } else {
      texte_corr += num_alpha(1) + ` Le nombre total de fruits est : ${S_total}. <br>`;
    }

    // Question 3 :
    texte_corr += num_alpha(2) + ` On regarde la derniÃ¨re colonne du tableau. `;
    let lstmax = []; //liste des prÃ©noms solutions
    let nmax = 0; // nombre max de fruit pour une personne
    for (let i = 0; i < nbAmis; i++) {
      S = 0;
      for (let j = 0; j < nbFruits; j++) {
        S += lstTabVal[i][j]; // somme d'une ligne
      }
      if (S == nmax) {
        lstmax.push(lstPrenomExo[i]);
      }
      if (S > nmax) {
        nmax = S;
        lstmax = [lstPrenomExo[i]];
      }
    }
    nmax = arrondi_virgule(nmax, 1);
    if (lstmax.length > 1) {
      texte_corr += `Les personnes qui ont rapportÃ© le plus de fruits sont : `;
      texte_corr += lstmax[0];
      for (let k = 1; k < lstmax.length; k++) {
        texte_corr += ` et ${lstmax[k]}`;
      }
      if (this.sup) {
        texte_corr += `. La masse maximale rapportÃ©e est de ${nmax} kg.<br>`;
      } else {
        texte_corr += `. Le nombre maximal de fruits rapportÃ© par une personne est de ${nmax}.<br>`;
      }
    } else {
      if (this.sup) {
        texte_corr += `La personne qui a rapportÃ© le plus de fruits est ${lstmax}. Cette masse maximale est de ${nmax} kg.<br>`;
      } else {
        texte_corr += `La personne qui a rapportÃ© le plus de fruits est ${lstmax}. Ce nombre maximal de fruits est de ${nmax}.<br>`;
      }
    }

    // Question 4 :
    texte_corr += num_alpha(3) + ` On regarde la derniÃ¨re ligne du tableau. `;
    let fmax = []; //liste des fruits apportÃ© en quantitÃ© max
    nmax = 0; // nombre max par type de fruit 
    for (let j = 0; j < nbFruits; j++) {
      S = 0;
      for (let i = 0; i < nbAmis; i++) {
        S += lstTabVal[i][j]; // somme d'une colonne
      }
      if (S == nmax) {
        fmax.push(lstFruitExo[j])
      }
      if (S > nmax) {
        nmax = S;
        fmax = [lstFruitExo[j]];
      }
    }
    nmax = arrondi_virgule(nmax, 1);
    if (fmax.length > 1) {
      if (this.sup) {
        texte_corr += `Les fruits prÃ©sents en la plus grosse quantitÃ© sont : `;
      } else {
        texte_corr += `Les fruits les plus nombreux sont : `;
      }
      texte_corr += `Les fruits les plus nombreux sont : `;
      texte_corr += `les ${fmax[0]}s`;
      for (let k = 1; k < fmax.length; k++) {
        texte_corr += ` et les ${fmax[k]}s`;
      }
      texte_corr += `. Il y en a ${nmax} de chaque sorte.<br>`;
    } else {
      if (this.sup) {
        texte_corr += `Il y a plus de ${fmax}s que d'autres fruits. Il y en a ${nmax} kg.`;
      } else {
        texte_corr += `Il y a plus de ${fmax}s que d'autres fruits. Il y en a ${nmax}.`;
      }
    }

    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this);
  }
  this.besoin_formulaire2_numerique = ['Nombre de fruits diffÃ©rents', 8];
  this.besoin_formulaire_case_a_cocher = ['Pour utiliser des nombres dÃ©cimaux et des masses', false];
}

/**
 * Un nombre Ã  2 chiffres (non multiple de 10) + 9
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6G23-2
 */
function Tracer_triangle_2_angles() {
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Tracer un triangle dont on connait une longueur et 2 angles";
  this.consigne = "";
  this.nb_questions = 3;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;

  this.nouvelle_version = function (numero_de_l_exercice) {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let c = calcul(randint(30, 70) / 10);
      let angle1 = randint(20, 70);
      let angle2 = randint(20, 70);
      let p = creerNomDePolygone(3);
      texte = `Tracer un triangle $${p}$ tel que $${p[0] + p[1]}=${tex_nombre(
        c
      )}$ cm, $\\widehat{${p[1] + p[0] + p[2]
        }}=${angle1}\\degree$ et $\\widehat{${p[0] + p[1] + p[2]
        }}=${angle2}\\degree$.`;
      texte += `<br> Mesurer $${p[0] + p[2]}$ et $${p[1] + p[2]}$.`;
      let A0 = point(0, 0, p[0], "left");
      let B0 = point(c, 0, p[1], "right");
      let s0 = segmentAvecExtremites(A0, B0);
      let t1 = afficheLongueurSegment(B0, A0);

      let A1 = point(B0.x + 4, 0, p[0], "left");
      let B1 = point(A1.x + c, 0, p[1], "right");
      let s1 = segment(A1, B1);
      s1.styleExtremites = "-|";
      let c1 = rotation(B1, A1, angle1);
      let C1 = pointSurSegment(c1, A1, -3);
      let s2 = segment(A1, C1);
      let t2 = afficheMesureAngle(B1, A1, C1);

      let A2 = point(B1.x + 4, 0, p[0], "left");
      let B2 = point(A2.x + c, 0, p[1], "right");
      let s3 = segment(A2, B2);
      let c2 = rotation(B2, A2, angle1);
      let C2 = pointSurSegment(c2, A2, -3);
      let s4 = segment(A2, C2);
      let c3 = rotation(A2, B2, -angle2);
      let C3 = pointSurSegment(c3, B2, -3);
      let t3 = afficheMesureAngle(A2, B2, C3);
      let s5 = segment(B2, C3);
      let d1 = droite(A2, C2);
      d1.isVisible = false;
      let d2 = droite(B2, C3);
      d2.isVisible = false;
      let C = pointIntersectionDD(d1, d2, p[2]);
      let l = labelPoint(A0, B0, A1, B1, A2, B2, C);

      if (sortie_html) {
        texte_corr = mathalea2d(
          { xmin: -1, xmax: 3 * c + 10, ymin: -1, ymax: 10 },
          s0,
          s1,
          s2,
          s3,
          s4,
          s5,
          t1,
          t2,
          t3,
          l
        );
        texte_corr += '<br><br>'
      } else {
        texte_corr = "";
      }
      texte_corr += `$${p[0] + p[2]}\\approx${tex_nombre(
        longueur(A2, C, 1)
      )}$ cm et $${p[1] + p[2]}\\approx${tex_nombre(longueur(B2, C, 1))}$ cm.`;

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',3];
}

/**
 * fonction servant Ã  complÃ©ter des solides, inspirÃ©e des fonctions de 6G42 et 6G43
 * rÃ©fÃ©rence : 6G41
 * @Auteur Mireille Gain, s'inspirant fortement de Jean-Claude Lhote
 */
function Representer_un_solide() {
  "use strict";
  Exercice.call(this);// HÃ©ritage de la classe Exercice ()
  this.titre = "ComplÃ©ter une reprÃ©sentation en perspective cavaliÃ¨re";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles;

    if (this.sup == 3) type_de_questions_disponibles = [1, 2]
    else if (this.sup == 5) type_de_questions_disponibles = [1, 2, 4]
    else if (this.sup == 7) type_de_questions_disponibles = [1, 2, 4, 6]
    else type_de_questions_disponibles = [parseInt(this.sup)];

    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );// Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc;

    if (this.classe == 6) type_de_questions_disponibles = [1, 2];
    // sixiÃ¨me : cube et pavÃ© droit
    else if (this.classe == 5) type_de_questions_disponibles = [1, 2, 4];
    // cinquiÃ¨me : on ajoute le prisme
    else if (this.classe == 4) type_de_questions_disponibles = [1, 2, 4, 6]
    // QuatriÃ¨me : on ajoute la pyramide


    if (this.sup2 == 1) sc = 0.5;
    else sc = 0.8;

    let A, B, C, D, E, F, G, H, I,
      AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, IA, IB, IE, IF, BD, FH,
      coeffpersp,
      enonce,
      correction,
      carreaux, g,
      objets_enonce = [],
      objets_correction = [], p,
      matrace = tracePoint(I)
      ;

    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;) {
      let nom = creerNomDePolygone(8, "PQ"),
        anglepersp = choice([30, 45, -30, -45, 150, 135, -150, -135])
      if (anglepersp % 10 == 0) coeffpersp = 0.6
      else coeffpersp = 0.4
      objets_correction = []
      objets_enonce = []

      switch (liste_type_de_questions[i]) {
        case 1: //cube
          enonce = `$${nom}$ est un cube.<br>`
          if (sortie_html) enonce += `Reproduire et complÃ©ter la figure ci-dessous, en repassant de la mÃªme couleur les segments parallÃ¨les et de mÃªme longueur.<br>`;
          correction = `Figure complÃ©tÃ©e :<br>`
          break;

        case 2: //pavÃ© droit
          enonce = `$${nom}$ est un pavÃ© droit.<br>`
          if (sortie_html) enonce += `Reproduire et complÃ©ter la figure ci-dessous, en repassant de la mÃªme couleur les segments parallÃ¨les et de mÃªme longueur.<br>`;
          correction = `Figure complÃ©tÃ©e :<br>`
          break;

        case 4: //prisme
          enonce = `On considÃ¨re un prisme Ã  base triangulaire.<br>Reproduire et complÃ©ter la figure ci-dessous, en repassant de la mÃªme couleur les segments parallÃ¨les et de mÃªme longueur.<br>`;
          correction = `Figure complÃ©tÃ©e :<br>`
          break;

        case 6: //pyramide
          enonce = `On considÃ¨re une pyramide Ã  base rectangulaire.<br>Reproduire et complÃ©ter la figure ci-dessous, en repassant de la mÃªme couleur les segments parallÃ¨les et de mÃªme longueur.<br>`;
          correction = `Figure complÃ©tÃ©e :<br>`
          break;
      }

      switch (liste_type_de_questions[i] % 2) {
        case 1:
          A = point(6, 0, nom[0], "left");
          B = point(11, 0, nom[1], "right");
          C = point(11, 5, nom[2], "right");
          D = point(6, 5, nom[3], "left");
          E = similitude(B, A, anglepersp, coeffpersp, nom[4], 'left')
          E.x = Math.round(E.x)
          E.y = Math.round(E.y)
          break;

        case 0:
          A = point(5, 0, nom[0], "left");
          B = point(9 + randint(1, 3), 0, nom[1], "right");
          C = point(B.x, randint(3, 7), nom[2], "right");
          D = point(A.x, C.y, nom[3], "left");
          E = similitude(B, A, anglepersp, coeffpersp * randint(5, 12) / 10, nom[4], 'left')
          E.x = Math.round(E.x)
          E.y = Math.round(E.y)
          break;
      }

      F = translation2Points(E, A, B, nom[5], 'right')
      G = translation2Points(F, B, C, nom[6], 'right')
      H = translation2Points(G, C, D, nom[7], 'left')
      I = milieu(D, G)
      matrace.taille = 4
      matrace.opacite = 0.9
      matrace.epaisseur = 5
      matrace.style = 'x'
      AB = segment(A, B)
      BC = segment(B, C)
      CD = segment(C, D)
      DA = segment(D, A)
      EF = segment(E, F)
      FG = segment(F, G)
      GH = segment(G, H)
      HE = segment(H, E)
      AE = segment(A, E)
      BF = segment(B, F)
      CG = segment(C, G)
      DH = segment(D, H)
      IA = segment(A, I)
      IB = segment(B, I)
      IE = segment(E, I)
      IF = segment(F, I)
      BD = segment(B, D)
      FH = segment(F, H)
      AB.epaisseur = 2
      BC.epaisseur = 2
      CD.epaisseur = 2
      DA.epaisseur = 2
      EF.epaisseur = 2
      FG.epaisseur = 2
      GH.epaisseur = 2
      HE.epaisseur = 2
      AE.epaisseur = 2
      BF.epaisseur = 2
      CG.epaisseur = 2
      DH.epaisseur = 2
      IA.epaisseur = 1
      IB.epaisseur = 1
      IE.epaisseur = 1
      IF.epaisseur = 1
      BD.epaisseur = 2
      FH.epaisseur = 2
      AB.color = 'black'
      BC.color = 'black'
      CD.color = 'black'
      DA.color = 'black'
      EF.color = 'black'
      FG.color = 'black'
      GH.color = 'black'
      HE.color = 'black'
      AE.color = 'black'
      BF.color = 'black'
      CG.color = 'black'
      IA.color = 'black'

      if (G.y < C.y && G.x < C.x) {
        CG.pointilles = true
        GH.pointilles = true
        FG.pointilles = true
        IF.pointilles = true
        FH.pointilles = true
        CG.color = 'gray'
        GH.color = 'gray'
        FG.color = 'gray'
        CG.opacite = 0.7
        GH.opacite = 0.7
        FG.opacite = 0.7
      }
      else if (E.y > A.y && E.x > A.x) {
        AE.pointilles = true
        EF.pointilles = true
        HE.pointilles = true
        IE.pointilles = true
        FH.pointilles = true
        AE.color = 'gray'
        EF.color = 'gray'
        HE.color = 'gray'
        AE.opacite = 0.7
        EF.opacite = 0.7
        HE.opacite = 0.7
      }
      else if (F.x < B.x && F.y > B.y) {
        BF.pointilles = true
        FG.pointilles = true
        EF.pointilles = true
        IF.pointilles = true
        FH.pointilles = true
        BF.color = 'gray'
        FG.color = 'gray'
        EF.color = 'gray'
        BF.opacite = 0.7
        FG.opacite = 0.7
        EF.opacite = 0.7
      }
      else if (H.x > D.x && H.y < D.y) {
        DH.pointilles = true
        GH.pointilles = true
        HE.pointilles = true
        IE.pointilles = true
        FH.pointilles = true
        DH.color = 'gray'
        GH.color = 'gray'
        HE.color = 'gray'
        DH.opacite = 0.7
        GH.opacite = 0.7
        HE.opacite = 0.7
      }
      Xmin = Math.min(A.x, E.x) - 1;
      Ymin = Math.min(A.y, E.y) - 1;
      Xmax = Math.max(B.x, F.x) + 2;
      Ymax = Math.max(D.y, H.y) + 1;
      ppc = 20;

      if (this.sup2 < 3) { g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7); }
      else g = "";
      if (this.sup2 == 2) { carreaux = seyes(Xmin, Ymin, Xmax, Ymax); sc = 0.8 }
      else { carreaux = ""; sc = 0.5 }

      let params = {
        xmin: Xmin,
        ymin: Ymin,
        xmax: Xmax,
        ymax: Ymax,
        pixelsParCm: ppc,
        scale: sc,
      }

      if (liste_type_de_questions[i] == 1) {
        objets_enonce.push(AB, BC, CD, DA, AE, labelPoint(A, B, C, D, E),
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 2) {
        objets_enonce.push(AB, BC, CD, DA, AE, labelPoint(A, B, C, D, E),
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 4) {
        objets_enonce.push(AB, DA, BD, AE,
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 6) {
        objets_enonce.push(AB, BF, tracePoint(I, .5, 'red'), labelPoint(I),
          g,
          carreaux
        );
      }

      enonce += mathalea2d(params, objets_enonce);
      if (liste_type_de_questions[i] == 1) {
        AB.color = 'green'
        BC.color = 'red'
        CD.color = 'green'
        DA.color = 'red'
        EF.color = 'green'
        FG.color = 'red'
        GH.color = 'green'
        HE.color = 'red'
        AE.color = 'blue'
        BF.color = 'blue'
        CG.color = 'blue'
        DH.color = 'blue'
        objets_correction.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H),
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 2) {
        AB.color = 'green'
        BC.color = 'red'
        CD.color = 'green'
        DA.color = 'red'
        EF.color = 'green'
        FG.color = 'red'
        GH.color = 'green'
        HE.color = 'red'
        AE.color = 'blue'
        BF.color = 'blue'
        CG.color = 'blue'
        DH.color = 'blue'
        objets_correction.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H),
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 4) {
        AB.color = 'green'
        BC.color = 'red'
        CD.color = 'green'
        DA.color = 'red'
        EF.color = 'green'
        FG.color = 'red'
        GH.color = 'green'
        HE.color = 'red'
        AE.color = 'blue'
        BF.color = 'blue'
        CG.color = 'blue'
        DH.color = 'blue'
        objets_correction.push(AB, DA, BD, EF, HE, AE, BF, DH, FH,
          g,
          carreaux
        );
      }

      if (liste_type_de_questions[i] == 6) {
        AB.color = 'green'
        BC.color = 'red'
        CD.color = 'green'
        DA.color = 'red'
        EF.color = 'green'
        FG.color = 'red'
        GH.color = 'green'
        HE.color = 'red'
        AE.color = 'blue'
        BF.color = 'blue'
        CG.color = 'blue'
        DH.color = 'blue'
        objets_correction.push(AB, EF, AE, BF, IA, IB, IE, IF, tracePoint(I),
          g,
          carreaux
        );
      }

      correction += mathalea2d(params, objets_correction);
      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(enonce + "<br>");
        this.liste_corrections.push(correction + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  if (this.classe == 6) this.besoin_formulaire_numerique = ['Type de solides', 3, `1 : Cubes\n 2 : PavÃ©s droits\n 3 : MÃ©lange cubes et pavÃ©s`]
  if (this.classe == 5) this.besoin_formulaire_numerique = ['Type de solides', 5, `1 : Cubes\n 2 : PavÃ©s droits\n 3 : MÃ©lange cubes et pavÃ©s\n 4 : Prismes\n 5 : MÃ©lange cubes, pavÃ©s, prismes`]
  if (this.classe == 4) this.besoin_formulaire_numerique = ['Type de solides', 7, `1 : Cubes\n 2 : PavÃ©s droits\n 3 : MÃ©lange cubes et pavÃ©s\n 4 : Prismes\n 5 : MÃ©lange cubes, pavÃ©s, prismes\n 6 : Pyramides\n 7 : MÃ©lange cubes, pavÃ©s, prismes, pyramides`]

  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}


// RÃ©fÃ©rence 6G41
function Representer_un_solide_6e() {
  this.sup = 1;
  this.classe = 6;
  Representer_un_solide.call(this);
}

// 5G51
function Representer_un_solide_5e() {
  this.sup = 4;
  this.classe = 5;
  Representer_un_solide.call(this);
}

// 4G51
function Representer_un_solide_4e() {
  this.sup = 6;
  this.classe = 4;
  Representer_un_solide.call(this);
}

/**
 * fonction servant Ã  plusieurs exercice autour du cube et du pavÃ© droit
 * rÃ©fÃ©rences : 6G42 et 6G43
 * @Auteur Jean-Claude Lhote
 */
function Solide_6e() {
  "use strict";
  Exercice.call(this);
  this.titre = "ConnaÃ®tre les propriÃ©tÃ©s du cube et du pavÃ© droit";
  this.nb_questions = 1;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = 1;
  this.nouvelle_version = function (numero_de_l_exercice) {
    let type_de_questions_disponibles;
    if (this.sup == 3) type_de_questions_disponibles = [1, 2]
    else type_de_questions_disponibles = [parseInt(this.sup)];

    if (this.titre == "Utiliser le vocabulaire associÃ© au pavÃ© droit")
      for (let n = 0; n < type_de_questions_disponibles.length; n++)
        type_de_questions_disponibles[n] += 2
    let liste_type_de_questions = combinaison_listes(
      type_de_questions_disponibles,
      this.nb_questions
    );
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es
    let Xmin, Xmax, Ymin, Ymax, ppc, sc;

    if (this.sup2 == 1) sc = 0.5;
    else sc = 0.8;

    let A, B, C, D, E, F, G, H,
      AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH,
      lAB, lBC, lAE, anglepersp, coeffpersp,
      codesseg = [],
      enonce,
      correction,
      carreaux, g,
      objets_enonce = [],
      objets_correction = [],
      k,
      p;
    for (
      let i = 0, texte, texte_corr, cpt = 0;
      i < this.nb_questions && cpt < 50;

    ) {
      let nom = creerNomDePolygone(8, "PQ"),
        anglepersp = choice([30, 45, -30, -45, 150, 135, -150, -135])
      if (anglepersp % 10 == 0) coeffpersp = 0.6
      else coeffpersp = 0.4
      objets_correction = []
      objets_enonce = []
      switch (liste_type_de_questions[i]) {
        case 1: //cube
          enonce = `${nom} est un cube.<br>`
          if (sortie_html) enonce += ` Reproduire la figure ci-dessous sur le cahier.<br>`;
          enonce += ` Repasse tous les segments de mÃªme longueur dans une mÃªme couleur.<br>`;
          correction = `Le cube ${nom}.<br>`
          break;

        case 2:
          enonce = `${nom} est un pavÃ© droit.<br>`
          if (sortie_html) enonce += ` Reproduire la figure ci-dessous sur le cahier.<br>`;
          enonce += ` Repasse tous les segments de mÃªme longueur dans une mÃªme couleur.<br>`;
          correction = `Le pavÃ© droit ${nom}.<br>`
          break;

        case 3:
          enonce = `${nom} est un cube.<br>`
          break;

        case 4:
          enonce = `${nom} est un pavÃ© droit.<br>`
          break;
      }
      let aretes_paralleles = [[[0, 1], [3, 2], [4, 5], [7, 6]], [[0, 3], [1, 2], [4, 7], [5, 6]], [[0, 4], [1, 5], [2, 6], [3, 7]]]
      let faces_paralleles = [[[0, 1, 2, 3], [4, 5, 6, 7]], [[0, 4, 7, 3], [1, 5, 6, 2]], [[0, 1, 5, 4], [3, 2, 6, 7]]]
      let aretes_perp = [[[0, 1], [0, 4], [0, 3], [1, 5], [1, 2]], [[0, 4], [0, 1], [0, 3], [4, 5], [4, 7]], [[0, 3], [0, 1], [0, 4], [3, 2], [3, 7]], [[1, 2], [1, 0], [1, 5], [2, 3], [2, 6]], [[1, 5], [1, 0], [1, 2],
      [5, 4], [5, 6]], [[5, 4], [5, 1], [5, 6], [4, 0], [4, 7]], [[5, 6], [5, 1], [5, 4], [6, 2], [6, 7]]
        , [[6, 2], [6, 5], [6, 7], [2, 1], [2, 3]], [[2, 3], [2, 1], [2, 6], [3, 0], [3, 7]], [[3, 7], [3, 2], [3, 0], [7, 4], [7, 6]], [[7, 4], [4, 0], [4, 5], [7, 3], [7, 6]], [[7, 6], [6, 2], [6, 5], [7, 3], [7, 4]]]
      let faces_perp = [[[0, 1, 2, 3], [1, 5, 6, 2], [2, 6, 7, 3], [3, 7, 4, 0], [0, 1, 5, 4]], [[1, 5, 6, 2], [0, 1, 2, 3], [2, 6, 7, 3], [5, 6, 7, 4], [1, 5, 4, 0]], [[0, 1, 5, 4], [1, 5, 6, 2], [4, 5, 6, 7], [0, 4, 7, 3], [0, 1, 2, 3]],
      [[4, 5, 6, 7], [0, 1, 5, 4], [1, 5, 6, 2], [2, 6, 7, 3], [0, 4, 7, 3]], [[0, 4, 7, 3], [0, 1, 2, 3], [0, 1, 5, 4], [4, 5, 6, 7], [3, 2, 6, 7]], [[3, 2, 6, 7], [0, 1, 2, 3], [1, 5, 6, 2], [4, 5, 6, 7], [0, 4, 7, 3]]]
      let k, l, s

      switch (randint(1, 4)) {

        case 1: // citer les arÃªtes parallÃ¨les Ã  une arrÃªte donnÃ©e
          [k, l, s] = [randint(0, 2), randint(0, 3), randint(0, 1)]
          enonce += `Citer toutes les arÃªtes parallÃ¨les Ã  [$${nom[aretes_paralleles[k][l][s]] + nom[aretes_paralleles[k][l][(s + 1) % 2]]}$].<br>`
          correction = `Les arÃªtes parallÃ¨les Ã  [$${nom[aretes_paralleles[k][l][s]] + nom[aretes_paralleles[k][l][(s + 1) % 2]]}$] sont [$${nom[aretes_paralleles[k][(l + 1) % 4][s]] + nom[aretes_paralleles[k][(l + 1) % 4][(s + 1) % 2]]}$], [$${nom[aretes_paralleles[k][(l + 2) % 4][s]] + nom[aretes_paralleles[k][(l + 2) % 4][(s + 1) % 2]]}$] et [$${nom[aretes_paralleles[k][(l + 3) % 4][s]] + nom[aretes_paralleles[k][(l + 3) % 4][(s + 1) % 2]]}$].<br>`
          break;

        case 2: // citer la face parallÃ¨le Ã  une face donnÃ©e
          [k, l, s] = [randint(0, 2), randint(0, 1), randint(0, 3)]
          enonce += `Quelle est la face parallÃ¨le Ã  $${nom[faces_paralleles[k][l][s]] + nom[faces_paralleles[k][l][(s + 1) % 4]] + nom[faces_paralleles[k][l][(s + 2) % 4]] + nom[faces_paralleles[k][l][(s + 3) % 4]]}$ ?<br>`
          correction = `La face parallÃ¨le Ã  $${nom[faces_paralleles[k][l][s]] + nom[faces_paralleles[k][l][(s + 1) % 4]] + nom[faces_paralleles[k][l][(s + 2) % 4]] + nom[faces_paralleles[k][l][(s + 3) % 4]]}$ est la face $${nom[faces_paralleles[k][(l + 1) % 2][s]] + nom[faces_paralleles[k][(l + 1) % 2][(s + 1) % 4]] + nom[faces_paralleles[k][(l + 1) % 2][(s + 2) % 4]] + nom[faces_paralleles[k][(l + 1) % 2][(s + 3) % 4]]}$.<br>`
          break;

        case 3: // citer les arÃªtes perpendiculaires Ã  une arÃªte donnÃ©e
          [k, l, s] = [randint(0, 11), 0, randint(0, 1)]
          enonce += `Quelles sont les arÃªtes peprendiculaires Ã  l'arÃªte [$${nom[aretes_perp[k][l][s]] + nom[aretes_perp[k][l][(s + 1) % 2]]}$] ?<br>`
          correction = `Les arÃªtes perpendiculaires Ã  l'arÃªte [$${nom[aretes_perp[k][l][s]] + nom[aretes_perp[k][l][(s + 1) % 2]]}$] sont [$${nom[aretes_perp[k][1][s]] + nom[aretes_perp[k][1][(s + 1) % 2]]}$], [$${nom[aretes_perp[k][2][s]] + nom[aretes_perp[k][2][(s + 1) % 2]]}$], [$${nom[aretes_perp[k][3][s]] + nom[aretes_perp[k][3][(s + 1) % 2]]}$] et [$${nom[aretes_perp[k][4][s]] + nom[aretes_perp[k][4][(s + 1) % 2]]}$].`
          break;

        case 4: // citer les faces perpendiculaires Ã  une face donnÃ©e
          [k, l, s] = [randint(0, 5), 0, randint(0, 3)]
          enonce += `Quelles sont les faces perpendiculaires Ã  la face $${nom[faces_perp[k][l][s]] + nom[faces_perp[k][l][(s + 1) % 4]] + nom[faces_perp[k][l][(s + 2) % 4]] + nom[faces_perp[k][l][(s + 3) % 4]]}$ ?<br>`
          correction = `Les faces perpendiculaires Ã  la face $${nom[faces_perp[k][l][s]] + nom[faces_perp[k][l][(s + 1) % 4]] + nom[faces_perp[k][l][(s + 2) % 4]] + nom[faces_perp[k][l][(s + 3) % 4]]}$ `
          correction += `sont les faces $${nom[faces_perp[k][l + 1][s]] + nom[faces_perp[k][l + 1][(s + 1) % 4]] + nom[faces_perp[k][l + 1][(s + 2) % 4]] + nom[faces_perp[k][l + 1][(s + 3) % 4]]}$, `
          correction += `$${nom[faces_perp[k][l + 2][s]] + nom[faces_perp[k][l + 2][(s + 1) % 4]] + nom[faces_perp[k][l + 2][(s + 2) % 4]] + nom[faces_perp[k][l + 2][(s + 3) % 4]]}$, `
          correction += `$${nom[faces_perp[k][l + 3][s]] + nom[faces_perp[k][l + 3][(s + 1) % 4]] + nom[faces_perp[k][l + 3][(s + 2) % 4]] + nom[faces_perp[k][l + 3][(s + 3) % 4]]}$ et `
          correction += `$${nom[faces_perp[k][l + 4][s]] + nom[faces_perp[k][l + 4][(s + 1) % 4]] + nom[faces_perp[k][l + 4][(s + 2) % 4]] + nom[faces_perp[k][l + 4][(s + 3) % 4]]}$.`
          break;
      }

      switch (liste_type_de_questions[i] % 2) {
        case 1:
          A = point(6, 0, nom[0], "left");
          B = point(11, 0, nom[1], "right");
          C = point(11, 5, nom[2], "right");
          D = point(6, 5, nom[3], "left");
          p = polygone(A, B, C, D)
          E = similitude(B, A, anglepersp, coeffpersp, nom[4], 'left')
          E.x = Math.round(E.x)
          E.y = Math.round(E.y)
          break;

        case 0:
          A = point(5, 0, nom[0], "left");
          B = point(9 + randint(1, 3), 0, nom[1], "right");
          C = point(B.x, randint(3, 7), nom[2], "right");
          D = point(A.x, C.y, nom[3], "left");
          p = polygone(A, B, C, D)
          E = similitude(B, A, anglepersp, coeffpersp * randint(5, 12) / 10, nom[4], 'left')
          E.x = Math.round(E.x)
          E.y = Math.round(E.y)
          break;
      }

      p = polygone(A, B, C, D)
      F = translation2Points(E, A, B, nom[5], 'right')
      G = translation2Points(F, B, C, nom[6], 'right')
      H = translation2Points(G, C, D, nom[7], 'left')
      AB = segment(A, B)
      BC = segment(B, C)
      CD = segment(C, D)
      DA = segment(D, A)
      EF = segment(E, F)
      FG = segment(F, G)
      GH = segment(G, H)
      HE = segment(H, E)
      AE = segment(A, E)
      BF = segment(B, F)
      CG = segment(C, G)
      DH = segment(D, H)
      AB.epaisseur = 2
      BC.epaisseur = 2
      CD.epaisseur = 2
      DA.epaisseur = 2
      EF.epaisseur = 2
      FG.epaisseur = 2
      GH.epaisseur = 2
      HE.epaisseur = 2
      AE.epaisseur = 2
      BF.epaisseur = 2
      CG.epaisseur = 2
      DH.epaisseur = 2
      AB.color = 'black'
      BC.color = 'black'
      CD.color = 'black'
      DA.color = 'black'
      EF.color = 'black'
      FG.color = 'black'
      GH.color = 'black'
      HE.color = 'black'
      AE.color = 'black'
      BF.color = 'black'
      CG.color = 'black'
      if (G.y < C.y && G.x < C.x) {
        CG.pointilles = true
        CG.color = 'gray'
        CG.opacite = 0.7
        GH.pointilles = true
        GH.color = 'gray'
        GH.opacite = 0.7
        FG.pointilles = true
        FG.color = 'gray'
        FG.opacite = 0.7
      }
      else if (E.y > A.y && E.x > A.x) {
        AE.pointilles = true
        EF.pointilles = true
        HE.pointilles = true
        AE.color = 'gray'
        EF.color = 'gray'
        HE.color = 'gray'
        AE.opacite = 0.7
        EF.opacite = 0.7
        HE.opacite = 0.7
      }
      else if (F.x < B.x && F.y > B.y) {
        BF.pointilles = true
        FG.pointilles = true
        EF.pointilles = true
        BF.color = 'gray'
        FG.color = 'gray'
        EF.color = 'gray'
        BF.opacite = 0.7
        FG.opacite = 0.7
        EF.opacite = 0.7
      }
      else if (H.x > D.x && H.y < D.y) {
        DH.pointilles = true
        GH.pointilles = true
        HE.pointilles = true
        DH.color = 'gray'
        GH.color = 'gray'
        HE.color = 'gray'
        DH.opacite = 0.7
        GH.opacite = 0.7
        HE.opacite = 0.7
      }
      Xmin = Math.min(A.x, E.x) - 1;
      Ymin = Math.min(A.y, E.y) - 1;
      Xmax = Math.max(B.x, F.x) + 2;
      Ymax = Math.max(D.y, H.y) + 1;
      ppc = 20;

      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, "gray", 0.7);
      else g = "";
      if (this.sup2 == 2) {
        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);
        sc = 0.8
      }
      else {
        carreaux = "";
        sc = 0.5
      }
      objets_enonce.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H), p,
        g,
        carreaux
      );

      let params = {
        xmin: Xmin,
        ymin: Ymin,
        xmax: Xmax,
        ymax: Ymax,
        pixelsParCm: ppc,
        scale: sc,
      }

      enonce += mathalea2d(params, objets_enonce);
      if (liste_type_de_questions[i] == 1) {
        codesseg = [codeSegments('||', 'green', [A, B, C, D, A, E, F, G, H, E]), codeSegments('||', 'green', B, F, C, G, D, H)]
        AB.color = 'green'
        BC.color = 'green'
        CD.color = 'green'
        DA.color = 'green'
        EF.color = 'green'
        FG.color = 'green'
        GH.color = 'green'
        HE.color = 'green'
        AE.color = 'green'
        BF.color = 'green'
        CG.color = 'green'
        DH.color = 'green'
      }
      else {
        codesseg = [codeSegments('||', 'green', A, B, C, D, E, F, G, H), codeSegments('O', 'red', A, E, B, F, C, G, D, H), codeSegments('Ã', 'blue', D, A, B, C, F, G, H, E)]
        AB.color = 'green'
        BC.color = 'blue'
        CD.color = 'green'
        DA.color = 'blue'
        EF.color = 'green'
        FG.color = 'blue'
        GH.color = 'green'
        HE.color = 'blue'
        AE.color = 'red'
        BF.color = 'red'
        CG.color = 'red'
        DH.color = 'red'
      }

      objets_correction.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H),
        g,
        carreaux
      );

      if (liste_type_de_questions[i] < 3) correction += mathalea2d(params, objets_correction, codesseg);

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(enonce + "<br>");
        this.liste_corrections.push(correction + "<br>");
        i++;
      }
      cpt++;
    }

    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type de solides', 3, `1 : Cubes\n 2 : PavÃ©s droits\n 3 : MÃ©lange`]
  this.besoin_formulaire2_numerique = [
    "Type de cahier",
    3,
    `1 : Cahier Ã  petits careaux\n 2 : Cahier Ã  gros carreaux (Seyes)\n 3 : Feuille blanche`,
  ];
}

/** 
 * * Calculer le produit de deux dÃ©cimaux Ã  partir d'un produit de deux entiers
 * * 6C30-2
 * @author SÃ©bastien Lozano
 */

function Produit_de_decimaux_a_partir_d_un_produit_connu() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 3;
  } else {
    this.nb_questions = 3;
  };

  this.titre = "Calculer le produit de deux dÃ©cimaux connaissant le produit de deux entiers";
  this.consigne = ``;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1, 2];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0, 1, 2]);

    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 --> (d1u1xp1)xd2u2
          d1: randint(1, 9),
          u1: randint(1, 9),
          d2: randint(1, 9),
          u2: randint(1, 9),
          p1: randint(-3, 3, [0]),
          p2: randint(-3, 3, [0]),
        },
      ];
      let enonces = [];
      //for (let k=0;k<3;k++) {
      enonces.push({
        enonce: `
            Sachant que $${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (10 ** situations[0].p1)))}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)}$.
					`,
        question: ``,
        correction: `
					$${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (10 ** situations[0].p1)))}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)} = ${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${tex_nombrec(10 ** situations[0].p1)} \\times ${calcul(situations[0].d2 * 10 + situations[0].u2)} = ${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)}\\times ${tex_nombrec(10 ** situations[0].p1)} =  ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}\\times ${tex_nombrec(10 ** situations[0].p1)} = ${tex_nombrec(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)) * calcul(10 ** situations[0].p1))}$
					`
      });
      enonces.push({
        enonce: `
            Sachant que $${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1)))}\\times ${tex_nombre(calcul((situations[0].d2 * 10 + situations[0].u2) * (10 ** situations[0].p2)))}$.
					`,
        question: ``,
        correction: `
					$${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1)))}\\times ${tex_nombre(calcul((situations[0].d2 * 10 + situations[0].u2) * (10 ** situations[0].p2)))} = ${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)}\\times ${tex_nombrec(10 ** situations[0].p2)} = ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}\\times ${tex_nombrec(10 ** situations[0].p2)} = ${tex_nombrec(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)) * calcul(10 ** situations[0].p2))}$
					`
      });
      enonces.push({
        enonce: `
            Sachant que $${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)} = ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}$,
            calculer $${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (10 ** situations[0].p1)))}\\times ${tex_nombre(calcul((situations[0].d2 * 10 + situations[0].u2) * (10 ** situations[0].p2)))}$.
					`,
        question: ``,
        correction: `
					$${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (10 ** situations[0].p1)))}\\times ${tex_nombre(calcul((situations[0].d2 * 10 + situations[0].u2) * (10 ** situations[0].p2)))} = ${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${tex_nombrec(10 ** situations[0].p1)} \\times ${calcul(situations[0].d2 * 10 + situations[0].u2)}\\times ${tex_nombrec(10 ** situations[0].p2)} = ${calcul(situations[0].d1 * 10 + situations[0].u1)}\\times ${calcul(situations[0].d2 * 10 + situations[0].u2)}\\times ${tex_nombrec(10 ** situations[0].p1)}\\times ${tex_nombrec(10 ** situations[0].p2)} = ${tex_nombre(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)))}\\times ${tex_nombrec(10 ** situations[0].p1)}\\times ${tex_nombrec(10 ** situations[0].p2)} = ${tex_nombrec(calcul((situations[0].d1 * 10 + situations[0].u1) * (situations[0].d2 * 10 + situations[0].u2)) * calcul(10 ** situations[0].p1) * calcul(10 ** situations[0].p2))}$
					`
      });

      //};

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
        case 2:
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;
      };
      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  }
};


/** 
 * * Encadrer_un_decimal_par_deux_entiers_consecutifs
 * * 6N31-1
 * @author SÃ©bastien Lozano
 */

function Encadrer_un_decimal_par_deux_entiers_consecutifs() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 3;
  } else {
    this.nb_questions = 3;
  };

  this.titre = "Encadrer un dÃ©cimal par deux entiers consÃ©cutifs";
  this.consigne = `Encadrer chaque nombre proposÃ© par deux nombres entiers consÃ©cutifs.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1, 2];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0, 1, 2]);

    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      let m = randint(1, 9),
        c = randint(1, 9),
        d = randint(1, 9),
        u = randint(1, 9),
        di = randint(1, 9),
        ci = randint(1, 9),
        mi = randint(1, 9);

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 -->
        },
      ];

      let enonces = [];
      //for (let k=0;k<3;k++) {
      enonces.push({
        enonce: `
          $\\ldots < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001))} < \\ldots$          
					`,
        question: ``,
        correction: `
					$${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001))} < ${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$					`
      });
      enonces.push({
        enonce: `
          $\\ldots < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01))} < \\ldots$          
					`,
        question: ``,
        correction: `
					$${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01))} < ${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$					`
      });
      enonces.push({
        enonce: `
          $\\ldots < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1))} < \\ldots$          
					`,
        question: ``,
        correction: `
					$${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1))} < ${mise_en_evidence(tex_nombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$					`
      });

      //};

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
        case 2:
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;
      };
      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  }
};

/**
 * Intercaler un nombre dÃ©cimal entre deux dÃ©cimaux
 * @Auteur RÃ©mi Angot
 * RÃ©fÃ©rence 6N31-4
*/
function Intercaler_decimal_entre_2_decimaux() {
    Exercice.call(this); // HÃ©ritage de la classe Exercice()
    this.titre = "Intercaler un nombre dÃ©cimal entre deux nombres dÃ©cimaux";
    this.consigne = "ComplÃ©ter avec un nombre dÃ©cimal";
    this.nb_questions = 6;
    this.nb_cols = 2; // Nombre de colonnes pour la sortie LaTeX
    this.nb_cols_corr = 2; // Nombre de colonnes dans la correction pour la sortie LaTeX
  
    this.nouvelle_version = function (numero_de_l_exercice) {
      this.liste_questions = []; // Liste de questions
      this.liste_corrections = []; // Liste de questions corrigÃ©es

      let liste_type_de_questions_disponibles = ["a,b1", "a,b2", "a,9", "a,bc", "a,b9", "a,99", "a,b0c", "a,1", "a,01", "a"];
      let liste_type_de_questions = combinaison_listes(liste_type_de_questions_disponibles, this.nb_questions);
      for (let i = 0, texte, texte_corr, a, b, r, u, u1, u2, d1, d2, c1, c2, cpt = 0; i < this.nb_questions && cpt < 50; ) {
          switch (liste_type_de_questions[i]) {
              case "a,b1":
                  d1 = randint(1, 6);
                  u = randint(1, 39);
                  a = calcul(u + d1 / 10);
                  b = calcul(u + randint(d1 + 2, 9) / 10);
                  r = calcul(a + 1 / 10);
                  break;
              case "a,b2":
                  d1 = randint(1, 8);
                  u = randint(1, 39);
                  a = calcul(u + d1 / 10);
                  b = calcul(u + (d1 + 1) / 10);
                  r = calcul(a + 5 / 100);
                  break;
              case "a,9":
                  a = calcul(randint(1, 39) + 9 / 10);
                  b = calcul(a + 1 / 10);
                  r = calcul(a + 5 / 100);
                  break;
              case "a,bc":
                  u = randint(1, 39);
                  d1 = randint(1, 9);
                  c1 = randint(1, 8);
                  c2 = c1 + 1;
                  a = calcul(u + d1 / 10 + c1 / 100);
                  b = calcul(u + d1 / 10 + c2 / 100);
                  r = calcul(a + 5 / 1000);
                  break;
              case "a,b9":
                  u = randint(1, 39);
                  d1 = randint(1, 9);
                  c1 = 9;
                  a = calcul(u + d1 / 10 + c1 / 100);
                  b = calcul(u + (d1 + 1) / 10);
                  r = calcul(a + 5 / 1000);
                  break;
              case "a,99":
                  u = randint(1, 39);
                  a = calcul(u + 99 / 100);
                  b = u + 1;
                  r = calcul(a + 5 / 1000);
                  break;
              case "a,b0c":
                  u = randint(1, 39);
                  d1 = randint(1, 6);
                  c1 = randint(1, 8);
                  c2 = c1 + 1;
                  a = calcul(u + d1 / 10 + c1 / 1000);
                  b = calcul(u + randint(d1+1,9)/ 10);
                  if (calcul(b-a)>.1){
                    r = calcul(u + (d1+1)/10);
                  }else {
                    r = calcul(u + (d1)/10+1/100);
                  }
                  break;
              case "a,1":
                  u = randint(1, 39);
                  d1 = 1;
                  a = calcul(u);
                  b = calcul(u + d1 / 10);
                  r = calcul(u + 5 / 100);
                  break;

              case "a,01":
                  u = randint(1, 39);
                  c1 = 1;
                  a = calcul(u);
                  b = calcul(u + c1 / 100);
                  r = calcul(u + 5 / 1000);
                  break;

              case "a":
                  a = randint(1, 39);
                  b = a + 1;
                  r = calcul(a + 1 / 10);
                  break;
          }
          texte = `$${tex_nombre(a)}<\\ldots\\ldots<${tex_nombre(b)}$`;
          texte_corr = `$${tex_nombre(a)}<${tex_nombre(r)}<${tex_nombre(b)}$`;

          if (this.liste_questions.indexOf(texte) == -1) {
              // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
              this.liste_questions.push(texte);
              this.liste_corrections.push(texte_corr);
              i++;
          }
          cpt++;
      }
      liste_de_question_to_contenu(this);
      if (sortie_html){
        this.contenu_correction = info_message({ titre: "Remarque", texte: "Il y a une infinitÃ© de solutions. La correction ne montre qu'une possibilitÃ©.", couleur: "black" }) + this.contenu_correction;
      }
    };
  }


/** 
 * * Ordre de grandeur d'une opÃ©ration entre dÃ©cimaux
 * * 6N31-2
 * @author SÃ©bastien Lozano
 */

function Ordre_de_grandeur_operations_decimaux() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 1;
  } else {
    this.nb_questions = 1;
  };

  this.titre = "Ordre de grandeur et opÃ©rations sur les dÃ©cimaux";
  this.consigne = `Pour chaque opÃ©ration proposÃ©e dans la premiÃ¨re colonne, cocher la case correspondant Ã  l'ordre de grandeur du rÃ©sultat.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);
      type_de_questions_disponibles = shuffle([0]);

    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

      let ligne_entete = ['\\text{OpÃ©ration}', `\\phantom{000}` + tex_nombre('1') + `\\phantom{000}`, `\\phantom{00}` + tex_nombre('10') + `\\phantom{00}`, `\\phantom{00}` + tex_nombre('100') + `\\phantom{00}`, `\\phantom{0}` + tex_nombre('1000') + `\\phantom{0}`, tex_nombre('10000'), tex_nombre('100000')];
      let ligne_entete_corr = ['\\text{OpÃ©ration}', `\\phantom{000}` + tex_nombre('1') + `\\phantom{000}`, `\\phantom{00}` + tex_nombre('10') + `\\phantom{00}`, `\\phantom{00}` + tex_nombre('100') + `\\phantom{00}`, `\\phantom{0}` + tex_nombre('1000') + `\\phantom{0}`, tex_nombre('10000'), tex_nombre('100000')];

      let m = randint(1, 9, [4, 5, 6]),
        c = randint(1, 9),
        c1 = randint(1, 9),
        c2 = randint(1, 9),
        c3 = randint(1, 9, [4, 5, 6]),
        c4 = randint(1, 4),
        d = randint(1, 9),
        d1 = randint(1, 9),
        d2 = randint(1, 9),
        d3 = randint(1, 9),
        u = randint(1, 9),
        u1 = randint(1, 9),
        u2 = randint(1, 9),
        u3 = randint(1, 9);

      let cbis, d1bis;
      do {
        cbis = randint(2, 9);
        d1bis = randint(2, 9);
      } while (cbis * d1bis > 3 && cbis * d1bis < 7);

      let div_aleatoire_ope_3 = choice([10, 100]);
      let div_aleatoire_ope_5 = choice([1, 10, 100, 1000]);
      let mult_aleatoire_ope_4 = choice([0.1, 0.01, 0.001]);

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 1
      function myOrdreOpe1(c, d) {
        if (c * d >= 60) {
          return ['', '', '', '', '', mise_en_evidence(`X`)];
        } else {
          return ['', '', '', '', mise_en_evidence(`X`), ''];
        };
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 2
      function myOrdreOpe2(c1, c2) {
        if (c1 + c2 / 10 >= 600) {
          return ['', '', '', mise_en_evidence(`X`), '', ''];
        } else {
          return ['', '', mise_en_evidence(`X`), '', '', ''];
        };
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 3
      function myOrdreOpe3(n) {
        if (n >= 7) {
          return ['', '', '', mise_en_evidence(`X`), '', ''];
        } else {
          return ['', '', mise_en_evidence(`X`), '', '', ''];
        };
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 4
      function myOrdreOpe4(d, n) {
        let sortie;
        switch (d) {
          case 0.1:
            if (n >= 7) {
              sortie = ['', '', '', mise_en_evidence(`X`), '', ''];
            } else {
              sortie = ['', '', mise_en_evidence(`X`), '', '', ''];
            };
            break;
          case 0.01:
            if (n >= 7) {
              sortie = ['', '', mise_en_evidence(`X`), '', '', ''];
            } else {
              sortie = ['', mise_en_evidence(`X`), '', '', '', ''];
            };
            break;
          case 0.001:
            if (n >= 7) {
              sortie = ['', mise_en_evidence(`X`), '', '', '', ''];
            } else {
              sortie = [mise_en_evidence(`X`), '', '', '', '', ''];
            };
            break;
        }
        return sortie;
      };

      // une fonction pour ordre de grandeur en fonction de ... opÃ©ration 5
      function myOrdreOpe5(mult) {
        let sortie;
        switch (mult) {
          case 1:
            return sortie = ['', '', '', mise_en_evidence(`X`), '', ''];
            break;
          case 10:
            return sortie = ['', '', mise_en_evidence(`X`), '', '', ''];
            break;
          case 100:
            return sortie = ['', mise_en_evidence(`X`), '', '', '', ''];
            break;
          case 1000:
            return sortie = [mise_en_evidence(`X`), '', '', '', '', ''];
            break;
        };
        return sortie;
      };

      let situations = [
        {
          operation: `${cbis * 100 + d * 10 + u * 1}\\times ${d1bis * 10 + u1 * 1}`,
          operation_corr: `${cbis * 100 + d * 10 + u * 1}\\times ${d1bis * 10 + u1 * 1} \\simeq  ${(cbis * 100)}\\times ${(d1bis * 10)} \\text{ soit } ${tex_nombre((cbis * 100) * (d1bis * 10))}`,
          operation_coche: myOrdreOpe1(cbis, d1bis),
        },
        {
          operation: `${tex_nombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1}`,
          operation_corr: `${tex_nombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1} \\simeq ${c2 * 100 / 10}+${c1 * 100} \\text{ soit } ${c2 * 100 / 10 + c1 * 100}`,
          operation_coche: myOrdreOpe2(c1 * 100, c2 * 100),
        },
        {
          operation: `${c3 * 100 + d3 * 10 + u3 * 1}-${tex_nombre((c2 * 100 + d2 * 10 + u2 * 1) / div_aleatoire_ope_3)}`,
          operation_corr: `${c3 * 100 + d3 * 10 + u3 * 1}-${tex_nombre((c2 * 100 + d2 * 10 + u2 * 1) / div_aleatoire_ope_3)} \\simeq ${c3 * 100 + d3 * 10}-${tex_nombre((c2 * 100) / div_aleatoire_ope_3)} \\text{ soit } ${c3 * 100 + d3 * 10 - (c2 * 100) / div_aleatoire_ope_3}`,
          operation_coche: myOrdreOpe3(c3),
        },
        {
          operation: `${tex_nombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\times ${tex_nombre(mult_aleatoire_ope_4)}`,
          operation_corr: `${tex_nombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\times ${tex_nombre(mult_aleatoire_ope_4)} \\simeq ${tex_nombre(m * 1000)}\\times ${tex_nombre(mult_aleatoire_ope_4)} \\text{ soit } ${tex_nombre(m * 1000 * mult_aleatoire_ope_4)}`,
          operation_coche: myOrdreOpe4(mult_aleatoire_ope_4, m),
        },
        {
          operation: `${tex_nombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / div_aleatoire_ope_5)}\\div ${m}`,
          operation_corr: `${tex_nombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / div_aleatoire_ope_5)}\\div ${m} \\simeq ${tex_nombre((m * 1000) / div_aleatoire_ope_5)}\\div ${m} \\text{ soit } ${tex_nombre((m * 1000) / div_aleatoire_ope_5 / m)}`,
          operation_coche: myOrdreOpe5(div_aleatoire_ope_5),
        },

      ];

      situations = shuffle(situations);

      let enonces = [];
      for (let k = 0; k < 1; k++) {
        enonces.push({
          enonce: `
          ${tab_C_L(ligne_entete, [situations[0].operation, situations[1].operation, situations[2].operation, situations[3].operation, situations[4].operation],
            [
              '', '', '', '', '', '',
              '', '', '', '', '', '',
              '', '', '', '', '', '',
              '', '', '', '', '', '',
              '', '', '', '', '', '',
            ]
          )}
          `,
          question: ``,
          correction: `
          CommenÃ§ons par calculer un ordre de grandeur du rÃ©sultat de chaque opÃ©ration dans la premiÃ¨re colonne du tableau.
          <br>
          ${tab_C_L(ligne_entete_corr, [situations[0].operation_corr, situations[1].operation_corr, situations[2].operation_corr, situations[3].operation_corr, situations[4].operation_corr,],
            [
              situations[0].operation_coche[0], situations[0].operation_coche[1], situations[0].operation_coche[2], situations[0].operation_coche[3], situations[0].operation_coche[4], situations[0].operation_coche[5],
              situations[1].operation_coche[0], situations[1].operation_coche[1], situations[1].operation_coche[2], situations[1].operation_coche[3], situations[1].operation_coche[4], situations[1].operation_coche[5],
              situations[2].operation_coche[0], situations[2].operation_coche[1], situations[2].operation_coche[2], situations[2].operation_coche[3], situations[2].operation_coche[4], situations[2].operation_coche[5],
              situations[3].operation_coche[0], situations[3].operation_coche[1], situations[3].operation_coche[2], situations[3].operation_coche[3], situations[3].operation_coche[4], situations[3].operation_coche[5],
              situations[4].operation_coche[0], situations[4].operation_coche[1], situations[4].operation_coche[2], situations[4].operation_coche[3], situations[4].operation_coche[4], situations[4].operation_coche[5],
            ]
          )}				
          `
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
      };

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);

  }
};
/** 
 * * Encadrer_puis_arrondir_une_valeur
 * * 6N31-3
 * @author Mireille Gain, s'inspirant de 6N31-1 de SÃ©bastien Lozano
 */

function Arrondir_une_valeur() {
  "use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.titre = "Arrondir une valeur";
  this.consigne = "Encadrer chaque nombre Ã  l'unitÃ©, puis au dixiÃ¨me, puis au centiÃ¨me.<br>Dans chaque cas, mettre ensuite en Ã©vidence son arrondi.";
  this.nb_questions = 3;
  this.nb_cols = 3;
  this.nb_cols_corr = 1;
  this.sup = 1;
  this.sup2 = false;

  sortie_html ? (this.spacing_corr = 2.5) : (this.spacing_corr = 3.5);

  this.nouvelle_version = function () {
    this.liste_questions = [];
    this.liste_corrections = [];
    let m, c, d, u, di, ci, mi, me, ce, de, n, den, num, nb, rac;

    for (let i = 0, texte = "", texte_corr = "", cpt = 0; i < this.nb_questions && cpt < 50;) {
      if (this.sup == 1) {
        m = randint(0, 9);
        c = randint(0, 9);
        d = randint(0, 9);
        u = randint(0, 9);
        di = randint(1, 9);
        ci = randint(1, 9);
        mi = randint(1, 9, 5);
        me = randint(0, 1);
        ce = randint(0, 1);
        de = randint(0, 1);
        n = me * m * 1000 + ce * c * 100 + de * d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001);
        nb = tex_nombre(n);
      } else if (this.sup == 2) {
        den = choice([7, 9, 11, 13]);
        num = randint(1, 50, [7, 9, 11, 13, 14, 18, 21, 22, 26, 27, 28, 33, 35, 36, 39, 42, 44, 45, 49]);
        n = num / den;
        nb = tex_fraction(num, den);
        di = troncature(n - troncature(n, 0), 1);
        ci = troncature(n - troncature(n, 1), 2);
        mi = troncature(n - troncature(n, 2), 3);
      } else if (this.sup == 3) {
        rac = randint(3, 99, [4, 9, 16, 25, 36, 49, 64, 81]);
        n = Math.sqrt(rac);
        nb = `\\sqrt{${rac}}`;
        di = troncature(n - troncature(n, 0), 1);
        ci = troncature(n - troncature(n, 1), 2);
        mi = troncature(n - troncature(n, 2), 3);
      }

      texte = `$${nb}$`;
      if (this.sup2) {
        if (this.sup == 1) texte += ``;
        else if (this.sup == 2) texte += `$\\phantom{1234567}$[Quand on Ã©crit sur la calculatrice $${num}\\div ${den}$, elle affiche : $${tex_nombre(n)}$.]`;
        else if (this.sup == 3) texte += `$\\phantom{1234567}$[Quand on Ã©crit sur la calculatrice $${nb}$, elle affiche : $${tex_nombre(n)}$.]`;
      }
      texte_corr = "Encadrement et arrondi Ã  l'unitÃ© : ";
      if (di < 5) {
        texte_corr += `$\\phantom{1234567}${mise_en_evidence(tex_nombre(troncature(n, 0)))} < ${nb} < ${tex_nombre(troncature(n + 1, 0))}$`;
      } else {
        texte_corr += `$\\phantom{1234567}${tex_nombre(troncature(n, 0))} < ${nb} < ${mise_en_evidence(tex_nombre(troncature(n + 1, 0)))}$`;
      }

      texte_corr += "<br>Encadrement et arrondi au dixiÃ¨me : ";
      if (ci < 5) {
        texte_corr += `$\\phantom{123}${mise_en_evidence(tex_nombre(troncature(n, 1)))} < ${nb} < ${tex_nombre(troncature(n + 0.1, 1))}$`;
      } else {
        texte_corr += `$\\phantom{123}${tex_nombre(troncature(n, 1))} < ${nb} < ${mise_en_evidence(tex_nombre(troncature(n + 0.1, 1)))}$`;
      }

      texte_corr += "<br>Encadrement et arrondi au centiÃ¨me : $~$";
      if (mi < 5) {
        texte_corr += `$${mise_en_evidence(tex_nombre(troncature(n, 2)))} < ${nb} < ${tex_nombre(troncature(n + 0.01, 2))}$`;
      } else {
        texte_corr += `$${tex_nombre(troncature(n, 2))} < ${nb} < ${mise_en_evidence(tex_nombre(troncature(n + 0.01, 2)))}$`;
      }

      if (this.liste_questions.indexOf(texte) == -1) {
        // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©Ã© une autre
        this.liste_questions.push(texte); // Sinon on enregistre la question dans liste_questions
        this.liste_corrections.push(texte_corr); // On fait pareil pour la correction
        i++; // On passe Ã  la question suivante
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Type de nombre', 2, `1 : Nombre dÃ©cimal\n 2 : Fraction`];
  this.besoin_formulaire2_case_a_cocher = ["Affichage de la valeur donnÃ©e Ã  la calculatrice", false];
}

function Arrondir_une_valeur_6e() {
  Arrondir_une_valeur.call(this);
  this.sup = 1;
}

function Arrondir_une_valeur_5e() {
  Arrondir_une_valeur.call(this);
  this.sup = 2;
  this.besoin_formulaire_numerique = ['Type de nombre', 2, `1 : Nombre dÃ©cimal\n 2 : Fraction`];
}

function Arrondir_une_valeur_4e() {
  this.sup = 3;
  Arrondir_une_valeur.call(this);
  this.besoin_formulaire_numerique = ['Type de nombre', 3, `1 : Nombre dÃ©cimal\n 2 : Fraction\n 3 : Racine carrÃ©e`];
}
/** 
 * * Donner le chiffre des ... le nombre de ...
 * * 6N10-3
 * @author SÃ©bastien Lozano
 */

function chiffre_nombre_de() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 6;
  } else {
    this.nb_questions = 6;
  };

  this.titre = "Chiffre des ... Nombre de ...";
  this.consigne = ``;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1, 2, 3, 4, 5];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
      type_de_questions_disponibles = shuffle([0, 1, 2, 3, 4, 5]);

    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      let u, d, c, mu, md, mc, mmu, mmd, mmc;
      mmc = randint(0, 9, [0]);
      mmd = randint(0, 9, [mmc]);
      mmu = randint(0, 9, [mmc, mmd]);
      mc = randint(0, 9, [mmu, mmd, mmc]);
      md = randint(0, 9, [mmu, mmd, mmc, mc]);
      mu = randint(0, 9, [mmu, mmd, mmc, mc, md]);
      c = randint(0, 9, [mmu, mmd, mmc, mu, md, mc]);
      d = randint(0, 9, [mmu, mmd, mmc, mu, md, mc, c]);
      u = randint(0, 9, [mmu, mmd, mmc, mu, md, mc, c, d]);
      //let nb = randint(100000000,999999999);
      //let nb_str = nb.toString();
      let nb_str = mmc.toString() + mmd.toString() + mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
      let nb = Number(nb_str);
      let tranches = ['unites', 'milliers', 'millions'];
      let cdu = ['unites', 'dizaines', 'centaines'];
      let chiffre_nombre = {
        chiffre: {
          unites: {
            unites: { determinant: `des`, cdu: ['unitÃ©s', ''], rangs: [8] },
            dizaines: { determinant: `des`, cdu: ['dizaines', ''], rangs: [7] },
            centaines: { determinant: `des`, cdu: ['centaines', ''], rangs: [6] },
          },
          milliers: {
            unites: { determinant: `des`, cdu: ['unitÃ©s de milliers', ''], rangs: [5] },
            dizaines: { determinant: `des`, cdu: ['dizaines de milliers', ''], rangs: [4] },
            centaines: { determinant: `des`, cdu: ['centaines de milliers', ''], rangs: [3] },
          },
          millions: {
            unites: { determinant: `des`, cdu: ['unitÃ©s de millions', ''], rangs: [2] },
            dizaines: { determinant: `des`, cdu: ['dizaines de millions', ''], rangs: [1] },
            centaines: { determinant: `des`, cdu: ['centaines de millions', ''], rangs: [0] },
          },
        },
        nombre: {
          unites: {
            unites: { determinant: `d'`, cdu: ['unitÃ©s', 1], rangs: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
            dizaines: { determinant: `de`, cdu: ['dizaines', 10], rangs: [0, 1, 2, 3, 4, 5, 6, 7] },
            centaines: { determinant: `de`, cdu: ['centaines', 100], rangs: [0, 1, 2, 3, 4, 5, 6] },
          },
          milliers: {
            unites: { determinant: `d'`, cdu: ['unitÃ©s de milliers', 1000], rangs: [0, 1, 2, 3, 4, 5] },
            dizaines: { determinant: `de`, cdu: ['dizaines de milliers', 10000], rangs: [0, 1, 2, 3, 4] },
            centaines: { determinant: `de`, cdu: ['centaines de milliers', 100000], rangs: [0, 1, 2, 3] },
          },
          millions: {
            unites: { determinant: `d'`, cdu: ['unitÃ©s de millions', 1000000], rangs: [0, 1, 2] },
            dizaines: { determinant: `de`, cdu: ['dizaines de millions', 10000000], rangs: [0, 1] },
            centaines: { determinant: `de`, cdu: ['centaines de millions', 100000000], rangs: [0] },
          },
        },
      };

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 --> chiffre des
          type: 'chiffre',
          tranche: 'unites',
          cdu: choice(cdu),
        },
        {//case 1 --> chiffre des
          type: 'chiffre',
          tranche: 'milliers',
          cdu: choice(cdu),
        },
        {//case 2 --> chiffre des
          type: 'chiffre',
          tranche: 'millions',
          cdu: choice(cdu),
        },
        {//case 3 --> nombre de
          type: 'nombre',
          tranche: 'unites',
          cdu: choice(cdu),
        },
        {//case 4 --> nombre de
          type: 'nombre',
          tranche: 'milliers',
          cdu: choice(cdu),
        },
        {//case 5 --> nombre de
          type: 'nombre',
          tranche: 'millions',
          cdu: choice(cdu),
        },
      ];

      //une fonction pour la correction selon le type de question
      function chiffre_nombre_corr(type, str, rang) {
        let sortie;
        if (type == 'chiffre') {
          sortie = str.split('')[rang[0]];
        };
        if (type == 'nombre') {
          sortie = str.split('')[rang[0]];
          for (let k = 1; k < rang.length; k++) {
            sortie += str.split('')[rang[k]]
          };
        };
        return sortie;
      };

      // une fonction pour la justification supplÃ©mentaire dans le cas nombre de ...
      function nombre_de_justif(type, str, rang, cdu_num) {
        let sortie;
        if (type == 'chiffre') {
          sortie = '';
        };
        if (type == 'nombre') {
          let nb_de = str.split('')[rang[0]];
          for (let k = 1; k < rang.length; k++) {
            nb_de += str.split('')[rang[k]]
          };
          let j = rang[rang.length - 1];
          j++;
          let nb_de_reste = '';
          while (j != 9) {
            nb_de_reste += str.split('')[j];
            j++;
          };
          sortie = `comme $${tex_nombre(str)} = ${tex_nombre(nb_de)}\\times ${tex_nombre(cdu_num)}+${tex_nombre(nb_de_reste)}$ alors `;
        };
        return sortie;
      };

      let enonces = [];
      for (let k = 0; k < situations.length; k++) {
        enonces.push({
          enonce: `
          Dans $${tex_nombre(nb)}$, quel est le ${situations[k].type} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].determinant} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[0]} ?					
					`,
          question: ``,
          correction: `
          Dans $${tex_nombre(nb)}$,           
          ${nombre_de_justif(situations[k].type, nb_str, chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].rangs, chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[1])}          
          le ${situations[k].type} ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].determinant}  ${chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].cdu[0]} est 
          $${mise_en_evidence(tex_nombre(chiffre_nombre_corr(situations[k].type, nb_str, chiffre_nombre[situations[k].type][situations[k].tranche][situations[k].cdu].rangs)))}$					
					`
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
        case 2:
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;
        case 3:
          texte = `${enonces[3].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[3].correction}`;
          };
          break;
        case 4:
          texte = `${enonces[4].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[4].correction}`;
          };
          break;
        case 5:
          texte = `${enonces[5].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[5].correction}`;
          };
          break;
      };

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);

  }
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/** 
* * Encadrer un nombre entier par deux entier consÃ©cutifs
* * 6N11-3
* @author SÃ©bastien Lozano
*/

function Encadrer_un_entier_par_deux_entiers_consecutifs() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 6;
  } else {
    this.nb_questions = 3;
  };

  this.titre = "Encadrer un entier entre deux entiers consÃ©cutifs";
  this.consigne = ``;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1, 2, 3, 4, 5];
    } else {
      type_de_questions_disponibles = shuffle([choice([0, 1]), choice([2, 3]), choice([4, 5])]);
    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      // on dÃ©clare des variables pour avoir des nombres entre 1000 et 9999 puis 10000 et 99999 etc ...
      let m, dm, cm, mi, dmi, cmi;
      //pour la prÃ©cision d'encadrement
      let precision;

      //selon la precision on veut certains chiffres plus souvant que d'autres ...
      function myNombres(nb_chiffres) {
        let sortie = '';
        // on fabrique le nombre Ã  partir de ses chiffres et on veut des cas limites
        let u, d, c, mu, md, mc, mmu, mmd, mmc;
        let N = choice([[randint(0, 9, [0]), 0, 0, 0, 0, 0, 0, 0, 0], [randint(0, 9, [0]), 9, 9, 9, 9, 9, 9, 9, 9], [randint(0, 9, [0]), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9)]]);
        mmc = N[0];
        mmd = N[1];
        mmu = N[2];
        mc = N[3];
        md = N[4];
        mu = N[5];
        c = N[6];
        d = N[7];
        u = N[8];
        switch (nb_chiffres) {
          case 4:
            mu = randint(0, 9, [0]);
            sortie = mu.toString() + c.toString() + d.toString() + u.toString();
            break;
          case 5:
            md = randint(0, 9, [0]);
            sortie = md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
            break;
          case 6:
            mc = randint(0, 9, [0]);
            sortie = mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
            break;
          case 7:
            mmu = randint(0, 9, [0]);
            sortie = mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
            break;
          case 8:
            mmd = randint(0, 9, [0]);
            sortie = mmd.toString() + mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
            break;
          case 9:
            mmc = randint(0, 9, [0]);
            sortie = mmc.toString() + mmd.toString() + mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();
            break;

        };
        return sortie;
      };

      this.sup = Number(this.sup); // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !
      switch (this.sup) {
        case 1:
          this.consigne = `ComplÃ©ter avec le nombre entier qui prÃ©cÃ¨de et le nombre entier qui suit.`;
          precision = 1;
          break;
        case 2:
          this.consigne = `ComplÃ©ter avec le multiple de 10 qui prÃ©cÃ¨de et le multiple de 10 qui suit.`;
          precision = 10;
          break;
        case 3:
          this.consigne = `ComplÃ©ter avec le multiple de 100 qui prÃ©cÃ¨de et le multiple de 100 qui suit.`;
          precision = 100;
          break;
      };

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 -->
          nombre: Number(myNombres(4)),
        },
        {//case 1 -->
          nombre: Number(myNombres(5)),
        },
        {//case 2 -->
          nombre: Number(myNombres(6)),
        },
        {//case 3 -->
          nombre: Number(myNombres(7)),
        },
        {//case 4 -->
          nombre: Number(myNombres(8)),
        },
        {//case 5 -->
          nombre: Number(myNombres(9)),
        },
      ];

      // une fonction pour les correction Ã  la precision prÃ¨s
      function encadrement_corr(nb, precision) {
        if (precision == 1) {
          return `$${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision - precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision + precision))}$`;
        } else if (precision == 10 || precision == 100) {
          if (nb % precision == 0) {
            return `$${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision - precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision + precision))}$`;
          } else {
            return `$${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision))} < ${tex_nombre(nb)} < ${mise_en_evidence(tex_nombre(Math.trunc(nb / precision) * precision + precision))}$`;
          };
        };
      };

      let enonces = [];
      for (let k = 0; k < situations.length; k++) {
        enonces.push({
          enonce: `
          $\\ldots < ${tex_nombre(situations[k].nombre)} < \\ldots$		
          `,
          question: ``,
          correction: `
          ${encadrement_corr(situations[k].nombre, precision)}
          `
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
        case 2:
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;
        case 3:
          texte = `${enonces[3].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[3].correction}`;
          };
          break;
        case 4:
          texte = `${enonces[4].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[4].correction}`;
          };
          break;
        case 5:
          texte = `${enonces[5].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[5].correction}`;
          };
          break;
      };
      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  };
  this.besoin_formulaire_numerique = ['Niveau de difficultÃ©', 3, "1 : Encadrer entre deux entiers consÃ©cutifs\n2 : Encadrer entre deux multiples consÃ©cutifs de dix\n3 : Encadrer entre deux multiples consÃ©cutifs de cent"];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	

};

/** 
* * Ranger une liste de nombres dans l'odre croissant ou dÃ©croissant
* * 6N11-4
* @author SÃ©bastien Lozano
*/

function Ranger_ordre_croissant_decroissant() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 2;
  } else {
    this.nb_questions = 2;
  };

  this.titre = "Ranger une liste de nombres entiers dans l'ordre croissant ou dÃ©croissant";
  //this.consigne = `Classer les nombres suivants dans l'ordre indiquÃ©.`;	

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
      type_de_questions_disponibles = [0, 1];
    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      // les chiffres
      let c1 = randint(1, 9);
      let c2 = randint(1, 9, [c1]);
      let c3 = randint(1, 9, [c1, c2]);
      let c4 = randint(1, 9, [c1, c2, c3]);
      let c5 = randint(1, 9, [c1, c2, c3, c4]);

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 -->
          ordre: 'croissant',
          symbole: `$${mise_en_evidence('<')}$`,
          n1: Number(c1.toString() + c2.toString() + c3.toString() + c4.toString() + c5.toString()),
          n2: Number(c1.toString() + c3.toString() + c2.toString() + c4.toString() + c5.toString()),
          n3: Number(c1.toString() + c2.toString() + c5.toString() + c4.toString() + c3.toString()),
          n4: Number(c1.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
          n5: Number('1'.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
          n6: Number(c1.toString() + c2.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
        },
        {//case 1 -->
          ordre: 'dÃ©croissant',
          symbole: `$${mise_en_evidence('>')}$`,
          n1: Number(c1.toString() + c2.toString() + c3.toString() + c4.toString() + c5.toString()),
          n2: Number(c1.toString() + c3.toString() + c2.toString() + c4.toString() + c5.toString()),
          n3: Number(c1.toString() + c2.toString() + c5.toString() + c4.toString() + c3.toString()),
          n4: Number(c1.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
          n5: Number('1'.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
          n6: Number(c1.toString() + c2.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),
        },
      ];

      // une fonction pour gÃ©rer l'ordre
      function myOrdre(ordre, tab) {
        tab.sort((a, b) => a - b);
        switch (ordre) {
          case 'croissant':
            return tab;
          case 'dÃ©croissant':
            return tab.reverse();
        };
      };

      let enonces = [];
      let nombres = [];
      let nombres_ranges = [];
      for (let k = 0; k < situations.length; k++) {
        nombres = shuffle([situations[k].n1, situations[k].n2, situations[k].n3, situations[k].n4, situations[k].n5, situations[k].n6]);
        nombres_ranges = [];
        nombres.forEach(element => {
          nombres_ranges.push(element);
        });
        myOrdre(situations[k].ordre, nombres_ranges);
        enonces.push({
          enonce: `Classer les nombres suivants dans l'ordre ${situations[k].ordre} :<br>
        $${tex_nombre(nombres[0])}$   ;   $${tex_nombre(nombres[1])}$   ;   $${tex_nombre(nombres[2])}$   ;   $${tex_nombre(nombres[3])}$   ;   $${tex_nombre(nombres[4])}$   ;   $${tex_nombre(nombres[5])}$          
        `,
          question: ``,
          correction: `Les nombres rangÃ©s dans l'ordre ${texte_en_couleur_et_gras(situations[k].ordre)} :<br>
        $${tex_nombre(nombres_ranges[0])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[1])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[2])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[3])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[4])}$   ${situations[k].symbole}   $${tex_nombre(nombres_ranges[5])}$
        `
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
      };

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);
  }
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};


/** 
 * * Exo test pour quand j'en ai besoin
 * * pas de numÃ©ro
 * * Tests
 * @author SÃ©bastien Lozano
 */

function Tests_du_Seb() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = true;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 2;
  } else {
    this.nb_questions = 2;
  };

  this.titre = "Exo test pour quand j'en ai besoin";
  this.consigne = `Consigne `;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
      type_de_questions_disponibles = [0, 1];
    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 -->
        },
        {//case 1 -->
        },
      ];

      let enonces = [];
      for (let k = 0; k < situations.length; k++) {
        enonces.push({
          enonce: `
          Type ${k}<br>	
          ${JSON.stringify(decomp_fact_prem_array(238))}<br>			
          ${typeof decomp_fact_prem_array(238)}<br>
          ${JSON.stringify(obtenir_liste_facteurs_premiers(238))}<br>
          ${typeof obtenir_liste_facteurs_premiers(238)}<br>
					`,
          question: ``,
          correction: `
					Correction type ${k}
					`
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.debug) {
            texte += `<br>`;
            texte += `<code class="b">score</code> pour ...`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;

      };

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);

  }
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/** 
 * * Exprimer un rapport de longueurs sur un segment
 * * 6N22-1
 * @author SÃ©bastien Lozano
 */

function Rapports_sur_un_segment() {
  'use strict';
  Exercice.call(this); // HÃ©ritage de la classe Exercice()
  this.beta = false;
  this.sup = 1;
  if (this.beta) {
    this.nb_questions = 2;
  } else {
    this.nb_questions = 2;
  };

  this.titre = "Rapport de deux longueurs sur un segment";
  this.consigne = `Sur tous les axes, les graduations sont rÃ©guliÃ¨res.`;

  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  //this.nb_questions_modifiable = false;
  sortie_html ? this.spacing = 2.5 : this.spacing = 1.5;
  sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;

  let type_de_questions_disponibles;

  this.nouvelle_version = function (numero_de_l_exercice) {
    if (this.beta) {
      type_de_questions_disponibles = [0, 1];
    } else {
      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      			
      type_de_questions_disponibles = [0, 1];
    };

    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es

    //let liste_type_de_questions  = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posÃ©es mais l'ordre diffÃ¨re Ã  chaque "cycle"
    let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posÃ©es --> Ã  remettre comme ci dessus		

    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {
      // une fonction pour le singulier pluriel
      function sing_plur(nombre, singulier, pluriel) {
        if (nombre > 1) {
          return pluriel
        } else {
          return singulier
        };
      };

      // on choisit deux entiers pour former les fractions
      let entier_max = 9;
      let m = randint(1, entier_max);
      let n = randint(1, entier_max, m); // on Ã©vite l'autre pour Ã©viter la fraction 1
      let params = {
        xmin: -0.4,
        ymin: -2,
        xmax: 15 * entier_max,// pour Ã©viter un cadrage trop large
        ymax: 1,
        pixelsParCm: 20,
        scale: 1,
      }
      // on colle la figure Ã  l'Ã©noncÃ©
      let y_enonce = -1.2;

      // on a parfois des figure trop petites ou trop grandes
      //
      let rayon;
      rayon = 5;
      // if (m<n) {
      //   rayon = 15
      // } else {
      //   rayon = 15/Math.ceil(m/n)
      // };

      //on choisit de faÃ§on alÃ©atoire un triplet de noms pour les points
      let noms_choix = [['A', 'B', 'C'], ['D', 'E', 'F'], ['I', 'J', 'K'], ['L', 'M', 'N']]
      let noms = noms_choix[randint(0, noms_choix.length - 1)];

      // pour les situations, autant de situations que de cas dans le switch !
      let situations = [
        {//case 0 --> m < n
          m: Math.min(m, n),
          n: Math.max(m, n),
          rapport: `\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,
          rapport_inverse: `\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,
          fig: mathalea2d(
            params,
            fraction(Math.min(m, n), Math.max(m, n)).representation(0, 0, rayon, 0, 'segment', '', noms[0], noms[1], 1, noms[2]),
          ),
          segment_corr1: `\\textcolor{red}{[${noms[0] + noms[2]}]}`,
          longueur_corr1: `\\textcolor{red}{${noms[0] + noms[2]}}`,
          m_color_corr: `\\textcolor{red}{${Math.min(m, n)}}`,
          n_color_corr: `\\textcolor{blue}{${Math.max(m, n)}}`,
          fig_corr1: mathalea2d(
            params,
            fraction(Math.min(m, n), Math.max(m, n)).representation(0, y_enonce, rayon, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2]),
          ),
          segment_corr2: `\\textcolor{blue}{[${noms[0] + noms[1]}]}`,
          longueur_corr2: `\\textcolor{blue}{${noms[0] + noms[1]}}`,
          fig_corr2: mathalea2d(
            params,
            fraction(Math.max(m, n), Math.min(m, n)).representation(0, y_enonce, (Math.min(m, n) / Math.max(m, n)) * rayon, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1]),
          )
        },
        {//case 1 --> m > n
          m: Math.max(m, n),
          n: Math.min(m, n),
          rapport: `\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,
          rapport_inverse: `\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,
          fig: mathalea2d(
            params,
            fraction(Math.max(m, n), Math.min(m, n)).representation(0, 0, 5, 0, 'segment', '', noms[0], noms[1], 1, noms[2]),
          ),
          segment_corr1: `\\textcolor{red}{[${noms[0] + noms[2]}]}`,
          longueur_corr1: `\\textcolor{red}{${noms[0] + noms[2]}}`,
          m_color_corr: `\\textcolor{red}{${Math.max(m, n)}}`,
          n_color_corr: `\\textcolor{blue}{${Math.min(m, n)}}`,
          fig_corr1: mathalea2d(
            params,
            fraction(Math.max(m, n), Math.min(m, n)).representation(0, y_enonce, 5, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2]),
          ),
          segment_corr2: `\\textcolor{blue}{[${noms[0] + noms[1]}]}`,
          longueur_corr2: `\\textcolor{blue}{${noms[0] + noms[1]}}`,
          fig_corr2: mathalea2d(
            params,
            fraction(Math.min(m, n), Math.max(m, n)).representation(0, y_enonce, (Math.max(m, n) / Math.min(m, n)) * 5, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1]),
          )
        },

      ];

      let enonces = [];
      for (let k = 0; k < situations.length; k++) {
        enonces.push({
          enonce: `
          Exprimer les rapports suivants $${situations[k].rapport}$ et $${situations[k].rapport_inverse}$.
          <br>
          ${situations[k].fig}     			
					`,
          question: ``,
          correction: `
          Les graduations Ã©tant rÃ©guliÃ¨res, comptons le nombre de graduations pour chaque segment :<br>
          ${situations[k].fig_corr1}<br>
          Le segment $${situations[k].segment_corr1}$ compte $${situations[k].m_color_corr}$ ${sing_plur(situations[k].m, 'graduation', 'graduations')}.<br>
          ${situations[k].fig_corr2}<br>
          Le segment $${situations[k].segment_corr2}$ compte $${situations[k].n_color_corr}$ ${sing_plur(situations[k].n, 'graduation', 'graduations')}.<br><br>
          Donc $\\dfrac{${situations[k].longueur_corr2}}{${situations[k].longueur_corr1}}=\\dfrac{${situations[k].n_color_corr}}{${situations[k].m_color_corr}}$
          et $\\dfrac{${situations[k].longueur_corr1}}{${situations[k].longueur_corr2}}=\\dfrac{${situations[k].m_color_corr}}{${situations[k].n_color_corr}}$<br><br>
          $\\textbf{D'oÃ¹ $\\mathbf{${situations[k].rapport}=}${fraction(situations[k].n, situations[k].m).texFractionSimplifiee()}$ et $\\mathbf{${situations[k].rapport_inverse}=}${fraction(situations[k].m, situations[k].n).texFractionSimplifiee()}$}$<br>

					`
        });
      };

      // autant de case que d'elements dans le tableau des situations
      switch (liste_type_de_questions[i]) {
        case 0:
          texte = `${enonces[0].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;
            texte += `             `
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[0].correction}`;
          };
          break;
        case 1:
          texte = `${enonces[1].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[1].correction}`;
          };
          break;
        case 2:
          texte = `${enonces[2].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[2].correction}`;
          };
          break;
        case 3:
          texte = `${enonces[3].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[3].correction}`;
          };
          break;
        case 4:
          texte = `${enonces[4].enonce}`;
          if (this.beta) {
            texte += `<br>`;
            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;
            texte_corr = ``;
          } else {
            texte_corr = `${enonces[4].correction}`;
          };
          break;
      };

      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais Ã©tÃ© posÃ©e, on en crÃ©e une autre
        this.liste_questions.push(texte);
        this.liste_corrections.push(texte_corr);
        i++;
      }
      cpt++;
    }
    liste_de_question_to_contenu(this);

  }
  //this.besoin_formulaire_numerique = ['Niveau de difficultÃ©',2,"1 : Entiers naturels\n2 : Entiers relatifs"];
  //this.besoin_formulaire2_case_a_cocher = ["Avec des Ã©quations du second degrÃ©"];	
};

/**
 * @Auteur RÃ©mi Angot
 */
function LaTeX_static() {
  // Classe parente de tous les exercices qui seront crÃ©Ã©s
  this.titre = "Fichier statique";
  this.pas_de_version_HMTL = false;
  this.consigne = "";
  this.consigne_correction = "";
  this.liste_questions = [];
  this.liste_corrections = [];
  this.contenu = "";
  this.contenu_correction = "";
  this.nb_questions = 10;
  this.nb_cols = 2;
  this.nb_cols_corr = 2;
  this.spacing = 1;
  this.spacing_corr = 1;
  this.beamer = false;
  this.sup = "Nom du fichier";

  this.consigne_modifiable = false;
  this.nb_questions_modifiable = false;
  this.nb_cols_modifiable = false;
  this.nb_cols_corr_modifiable = false;
  this.spacing_modifiable = false;
  this.spacing_corr_modifiable = false;

  this.besoin_formulaire_numerique = false; // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];
  this.besoin_formulaire_texte = [
    "url du fichier",
    "nom du fichier sans l'extension",
  ]; // Sinon this.besoin_formulaire_texte = [texte,tooltip];
  //this.besoin_formulaire2_texte = ['Code LaTeX correction','Par exemple : \\input{mon_fichier_corr}'];

  this.nouvelle_version = function (numero_de_l_exercice) {
    //this.contenu_correction = '%Â£tex/probleme_altitude_corrÂ£'
    //this.contenu = '%Â£tex/probleme_altitudeÂ£'
    this.contenu = "%Â£" + this.sup + "Â£";
    this.contenu_correction = "%Â£" + this.sup + "_corrÂ£";
    //liste_des_exercices_statiques.push(this.sup)
  };
}

// FIN DES EXERCICES
// Gestion des listes d'exercices

jQuery(document).ready(function () {
  // Ne se fait qu'aprÃ¨s que le DOM soit entiÃ¨rement dÃ©fini

  // Trie par ordre alphabÃ©tique les exercices disponibles
  liste_des_exercices_disponibles = tridictionnaire(
    liste_des_exercices_disponibles
  );

  // DÃ©termine le nombre d'exercices par niveaux
  let nombre_d_exercices_disponibles_c3 = 0;
  let nombre_d_exercices_disponibles_6 = 0;
  let nombre_d_exercices_disponibles_5 = 0;
  let nombre_d_exercices_disponibles_4 = 0;
  let nombre_d_exercices_disponibles_3 = 0;
  let nombre_d_exercices_disponibles_2 = 0;
  let nombre_d_exercices_disponibles_1 = 0;
  let nombre_d_exercices_disponibles_T = 0;
  let nombre_d_exercices_disponibles_CM = 0;
  let nombre_d_exercices_disponibles_prof = 0;
  let nombre_d_exercices_disponibles_PE = 0;
  let nombre_d_exercices_disponibles_beta = 0;
  for (var id in liste_des_exercices_disponibles) {
    if (id[0] == "c" && id[1] == "3") {
      nombre_d_exercices_disponibles_c3 += 1;
    }
    if (id[0] == 6) {
      nombre_d_exercices_disponibles_6 += 1;
    }
    if (id[0] == 5) {
      nombre_d_exercices_disponibles_5 += 1;
    }
    if (id[0] == 4) {
      nombre_d_exercices_disponibles_4 += 1;
    }
    if (id[0] == 3) {
      nombre_d_exercices_disponibles_3 += 1;
    }
    if (id[0] == 2) {
      nombre_d_exercices_disponibles_2 += 1;
    }
    if (id[0] == 1) {
      nombre_d_exercices_disponibles_1 += 1;
    }
    if (id[0] == "T") {
      nombre_d_exercices_disponibles_T += 1;
    }
    if (id[0] == "C") {
      nombre_d_exercices_disponibles_CM += 1;
    }
    if (id[0] == "P" && id[1] == "0") {
      nombre_d_exercices_disponibles_prof += 1;
    }
    if (id[0] == "P" && id[1] == "E") {
      nombre_d_exercices_disponibles_PE += 1;
    }
    if (id[0] == "b" && id[1] == "e") {
      nombre_d_exercices_disponibles_beta += 1;
    }
  }

  //
  let liste_html_des_exercices_c3 = [];
  let liste_html_des_exercices_6 = [];
  let liste_html_des_exercices_5 = [];
  let liste_html_des_exercices_4 = [];
  let liste_html_des_exercices_3 = [];
  let liste_html_des_exercices_2 = [];
  let liste_html_des_exercices_1 = [];
  let liste_html_des_exercices_T = [];
  let liste_html_des_exercices_CM = [];
  let liste_html_des_exercices_prof = [];
  let liste_html_des_exercices_PE = [];
  let liste_html_des_exercices_beta = [];

  // Affiche de la liste des exercices disponibles
  let liste_html_des_exercices =
    '<h3 class="ui block header">Exercices disponibles</h3>\n\n';

  function liste_html_des_exercices_d_un_theme(theme) {
    let liste = '';
    let dictionnaire = filtreDictionnaire(liste_des_exercices_disponibles, theme);
    for (let id in dictionnaire) {
      let exercice_tmp = new dictionnaire[id]();
      liste +=
        `<span class="id_exercice">${id}</span> - <a class="lien_id_exercice" numero="${id}">${exercice_tmp.titre}</a></br>\n`;
    }
    return liste;
  }

  function liste_html_des_exercices_d_un_niveau(liste_de_themes) { // liste_de_themes = [['6N1','6N1 - NumÃ©rations et fractions niveau 1'] , [' ',' '] ]
    let liste = '';
    for (let theme of liste_de_themes) {
      liste += `<h3>${theme[1]}</h3>`;
      liste += liste_html_des_exercices_d_un_theme(theme[0]);
    }
    return liste;
  }

  liste_html_des_exercices_c3 = liste_html_des_exercices_d_un_niveau([
    ['c3C1', 'c3C1 - Calculs niveau 1'], ['c3N1', 'c3N1 - NumÃ©ration Niveau 1'], ['c3N2', 'c3N2 - NumÃ©ration Niveau 2']])

  liste_html_des_exercices_6 = liste_html_des_exercices_d_un_niveau([
    ['6C1', '6C1 - Calculs niveau 1'], ['6C2', '6C2 - Calculs niveau 2'], ['6C3', '6C3 - Calculs niveau 3'],
    ['6D1', '6D1 - Les durÃ©es'],
    ['6G1', '6G1 - GÃ©omÃ©trie niveau 1'], ['6G2', '6G2 - GÃ©omÃ©trie niveau 2'], ['6G3', '6G3 - GÃ©omÃ©trie niveau 3'], ['6G4', '6G4 - GÃ©omÃ©trie niveau 4'],
    ['6M1', '6M1 - Grandeurs et mesures niveau 1'], ['6M2', '6M2 - Grandeurs et mesures niveau 2'], ['6M3', '6M3 - Volumes'],
    ['6N1', '6N1 - NumÃ©ration et fractions niveau 1'], ['6N2', '6N2 - NumÃ©ration et fractions niveau 2'], ['6N3', '6N3 - NumÃ©ration et fractions niveau 3'], ['6N4', '6N4 - NumÃ©ration et fractions niveau 4'],
    ['6P1', '6P1 - ProportionnalitÃ©'], ['6S1', '6S1 - Statistiques'],
    ['6Algo1', '6A - Algorithmique']
  ])
  liste_html_des_exercices_5 = liste_html_des_exercices_d_un_niveau([
    ['5A1', '5A1 - Arithmetique'], ['5C1', '5C1 - Calculs'],
    ['5G1', '5G1 - SymÃ©tries'], ['5G2', '5G2 - Triangles'], ['5G3', '5G3 - Angles'], ['5G4', '5G4 - ParallÃ©logrammes'], ['5G5', '5G5 - Espace'],
    ['5L1', '5L1 - Calcul littÃ©ral'],
    ['5M1', '5M1 - PÃ©rimÃ¨tres et aires'], ['5M2', '5M2 - Volumes'], ['5M3', '5M3 - DurÃ©es'],
    ['5N1', '5N1 - NumÃ©ration et fractions niveau 1'], ['5N2', '5N2 - Calculs avec les fractions'],
    ['5P1', '5P1 - ProportionnalitÃ©'], ['5R1', '5R1 - Relatifs niveau 1'], ['5R2', '5R2 - Relatifs niveau 2'],
    ['5S1', '5S1 - Statistiques'], ['5S2', '5S2 - ProbabilitÃ©s']
  ])
  liste_html_des_exercices_4 = liste_html_des_exercices_d_un_niveau([
    ['4C1', '4C1 - Relatifs'], ['4C2', '4C2 - Fractions'], ['4C3', '4C3 - Puissances'],
    ['4F1', '4F1 - Notion de fonction'],
    ['4G1', '4G1 - Translation et rotation'], ['4G2', '4G2 - ThÃ©orÃ¨me de Pythagore'], ['4G3', '4G3 - ThÃ©orÃ¨me de ThalÃ¨s'], ['4G4', "4G4 - Cosinus d'un angle"], ['4G5', "4G5 - Espace"],
    ['4L1', '4L1 - Calcul littÃ©ral'], ['4L2', '4L2 - Ãquation'], ['4P1', '4P1 - ProportionnalitÃ©'], ['4S1', '4S1 - Statistiques'], ['4S2', '4S2 - ProbabilitÃ©s'],
    ['4Algo1', '4A1 - Algorithmique']
  ])
  liste_html_des_exercices_3 = liste_html_des_exercices_d_un_niveau([
    ['3A1', '3A1 - Arithmetique'],
    ['3F1', '3F1 - GÃ©nÃ©ralitÃ©s sur les fonctions'], ['3F2', '3F2 - Fonctions affines et linÃ©aires'],
    ['3G1', '3G1 - HomothÃ©tie et rotation'], ['3G2', '3G2 - ThÃ©orÃ¨me de ThalÃ¨s'], ['3G3', '3G3 - TrigonomÃ©trie'], ['3G4', "3G4 - Espace"],
    ['3L1', '3L1 - Calcul littÃ©ral'], ['3P1', '3P1 - ProportionnalitÃ©'], ['3S1', '3S1 - Statistiques'], ['3S2', '3S2 - ProbabilitÃ©s']
  ])

  for (var id in liste_des_exercices_disponibles) {
    let exercice_tmp = new liste_des_exercices_disponibles[id]();

    if (id[0] == 2) {
      liste_html_des_exercices_2 +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == 1) {
      liste_html_des_exercices_1 +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == 'T') {
      liste_html_des_exercices_T +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "P" && id[1] == "E") {
      liste_html_des_exercices_PE +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "C") {
      liste_html_des_exercices_CM +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "P" && id[1] == "0") {
      liste_html_des_exercices_prof +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
    if (id[0] == "b" && id[1] == "e") {
      liste_html_des_exercices_beta +=
        '<span class="id_exercice">' +
        id +
        '</span> - <a class="lien_id_exercice" numero="' +
        id +
        '">' +
        exercice_tmp.titre +
        "</a></br>\n";
    }
  }

  // Change l'ordre des exercices suivant l'URL
  if (window.location.href.indexOf("beta") > 0) {
    liste_html_des_exercices += `<div class="ui accordion"><div class="active title"><i class="dropdown icon"></i>Beta (${nombre_d_exercices_disponibles_beta})</div><div class="active content">`;
    liste_html_des_exercices += liste_html_des_exercices_beta;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `</div>`;
  } else if (window.location.href.indexOf("outils") > 0) {
    liste_html_des_exercices += `<div class="ui accordion"><div class="active title"><i class="dropdown icon"></i>Outils pour le professeur (${nombre_d_exercices_disponibles_prof})</div><div class="active content">`;
    liste_html_des_exercices += liste_html_des_exercices_prof;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `</div>`;
  } else if (window.location.href.indexOf("cm.html") > 0) {
    liste_html_des_exercices += `<div class="ui accordion"><div class="active title"><i class="dropdown icon"></i>Calcul mental (${nombre_d_exercices_disponibles_CM})</div><div class="active content">`;
    liste_html_des_exercices += liste_html_des_exercices_CM;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Cours Moyen(${nombre_d_exercices_disponibles_c3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_c3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>SixiÃ¨me (${nombre_d_exercices_disponibles_6})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_6;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CinquiÃ¨me (${nombre_d_exercices_disponibles_5})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_5;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>QuatriÃ¨me (${nombre_d_exercices_disponibles_4})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_4;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>TroisiÃ¨me (${nombre_d_exercices_disponibles_3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Seconde (${nombre_d_exercices_disponibles_2})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_2;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>PremiÃ¨re (${nombre_d_exercices_disponibles_1})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_1;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Terminale (${nombre_d_exercices_disponibles_T})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_T;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CRPE (${nombre_d_exercices_disponibles_PE})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_PE;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `</div>`;
  } else {
    liste_html_des_exercices += `<div class="ui accordion"><div class="title"><i class="dropdown icon"></i>Cours Moyen (${nombre_d_exercices_disponibles_c3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_c3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>SixiÃ¨me (${nombre_d_exercices_disponibles_6})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_6;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CinquiÃ¨me (${nombre_d_exercices_disponibles_5})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_5;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>QuatriÃ¨me (${nombre_d_exercices_disponibles_4})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_4;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>TroisiÃ¨me (${nombre_d_exercices_disponibles_3})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_3;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Seconde (${nombre_d_exercices_disponibles_2})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_2;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>PremiÃ¨re (${nombre_d_exercices_disponibles_1})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_1;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Terminale (${nombre_d_exercices_disponibles_T})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_T;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>CRPE (${nombre_d_exercices_disponibles_PE})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_PE;
    liste_html_des_exercices += `</div>`;
    liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Calcul mental (${nombre_d_exercices_disponibles_CM})</div><div class="content">`;
    liste_html_des_exercices += liste_html_des_exercices_CM;
    liste_html_des_exercices += `</div>`;
    // Ajoute les outils prof sur mathalealatex
    if (window.location.href.indexOf("mathalealatex.html") > 0) {
      liste_html_des_exercices += `<div class="title"><i class="dropdown icon"></i>Outils pour le professeur (${nombre_d_exercices_disponibles_prof})</div><div class="content">`;
      liste_html_des_exercices += liste_html_des_exercices_prof;
      liste_html_des_exercices += `</div>`;
    }
    liste_html_des_exercices += `</div>`;
  }

  $("#liste_des_exercices").html(liste_html_des_exercices);
  renderMathInElement(document.body, {
    delimiters: [
      { left: "\\[", right: "\\]", display: true },
      { left: "$", right: "$", display: false },
    ],
    throwOnError: true,
    errorColor: "#CC0000",
    strict: "warn",
    trust: false,
  });

  // GÃ¨re le clic sur un exercice de la liste
  $(".lien_id_exercice").click(function () {
    let numero = $(this).attr("numero");
    if ($("#choix_des_exercices").val() == "") {
      $("#choix_des_exercices").val($("#choix_des_exercices").val() + numero);
    } else {
      $("#choix_des_exercices").val(
        $("#choix_des_exercices").val() + "," + numero
      );
    }
    liste_des_exercices = $("#choix_des_exercices")
      .val()
      .replace(/\s/g, "")
      .replace(";", ",")
      .split(",");
    mise_a_jour_de_la_liste_d_exercice();

    // Actualise KaTeX pour les titres d'exercices utilisant LaTeX
    renderMathInElement(document.body, {
      delimiters: [
        { left: "\\[", right: "\\]", display: true },
        { left: "$", right: "$", display: false },
      ],
      throwOnError: true,
      errorColor: "#CC0000",
      strict: "warn",
      trust: false,
    });
  });
});

/** 
 * * Exo test pour quand j'en ai besoin
 * * pas de numÃ©ro
 * * Tests
 * @author Erwan DUPLESSY
 */

function AfficherSVG() {
  //"use strict";
  Exercice.call(this); // HÃ©ritage de la classe Exercice()

  this.titre = "Test d'affichage d'icone SVG";
  this.consigne = `On utilise awesomefont. `;
  this.nb_questions = 1;
  this.nb_questions_modifiable = false;
  this.nb_cols = 1;
  this.nb_cols_corr = 1;
  sortie_html ? this.spacing = 1 : this.spacing = 1;
  sortie_html ? this.spacing_corr = 2 : this.spacing_corr = 1;

  this.nouvelle_version = function () {
    this.liste_questions = []; // Liste de questions
    this.liste_corrections = []; // Liste de questions corrigÃ©es    

    texte = `Directement dans le html avec la font : `;
    texte += `
        <i class="orange users icon"></i>
        <i class="yellow users icon"></i>
        <i class="olive users icon"></i>
        <i class="green users icon"></i>
        <i class="teal users icon"></i>
        <i class="blue users icon"></i>
        <i class="violet users icon"></i>
        <i class="purple users icon"></i>
        <i class="pink users icon"></i>
        <i class="brown users icon"></i><br>
        <i class="grey users icon"></i>
        <i class="black users icon"></i>
        <i class="horizontally flipped cloud icon"></i>
        <i class="vertically flipped cloud icon"></i>
        <i class="clockwise rotated cloud icon"></i>
        <i class="counterclockwise rotated cloud icon"></i>
        <i class="chess icon"></i>
        <i class="orange chess bishop icon"></i>
        <i class="chess board icon"></i>
        <i class="chess king icon"></i>
        <i class="chess knight icon"></i>
        <i class="chess pawn icon"></i>
        <i class="chess queen icon"></i>
        <i class="chess rook icon"></i>
        <i class="square full icon"></i>`;

    texte += `<br> Ou bien en SVG. Attention Ã  l'utilisation des repÃ¨res de coordonnÃ©es !<br>`;
    texte += `<svg xmlns="http://www.w3.org/2000/svg">
      <!-- Font Awesome Free 5.15.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) -->
      <defs>
        <symbol id="plane" viewBox="0 0 576 512">
         <path d="M480 192H365.71L260.61 8.06A16.014 16.014 0 0 0 246.71 0h-65.5c-10.63 0-18.3 10.17-15.38 20.39L214.86 192H112l-43.2-57.6c-3.02-4.03-7.77-6.4-12.8-6.4H16.01C5.6 128-2.04 137.78.49 147.88L32 256 .49 364.12C-2.04 374.22 5.6 384 16.01 384H56c5.04 0 9.78-2.37 12.8-6.4L112 320h102.86l-49.03 171.6c-2.92 10.22 4.75 20.4 15.38 20.4h65.5c5.74 0 11.04-3.08 13.89-8.06L365.71 320H480c35.35 0 96-28.65 96-64s-60.65-64-96-64z"/>
        </symbol>
      </defs>
      </svg>`;

    texte += `
    <svg width="50%" viewBox="0 0 300 300" style="border: 3px solid #333333;">
      <use preserveAspectRatio="xMidYMid meet" viewBox="-50 50 50 50" height="100" width="100" x="0" y="0" fill="red" transform="rotate(0 0 0)"xlink:href="#plane"/>
      <use width="35" x="70" y="0" transform="rotate(15, 70, 70)" xlink:href="#plane"/>
      <use xlink:href="#plane" transform="rotate(-30 70 70)" width="35" x="70" y="0" />
       <use width="38" x="92" y="80" xlink:href="#plane"/>
      <use width="23" x="50" y="30" xlink:href="#plane"/ fill-opacity="0%" stroke="green" stroke-width="8">   
      <use width="50" x="0" y="0" fill="blue" xlink:href="#plane"/>
      <use width="50" x="0" y="0" fill="blue" xlink:href="#Port"/>
    </svg>`;

    //let element = document.getElementById('#exercices')
    let draw = SVG().addTo('body').size('50%', '50%');
    draw.rect(100, 100).attr({ fill: '#f06' });
    draw.use('plane').move(20, 20).size(50, 50);
    draw.use('plane').move(70, 20).size(50, 50).rotate(90);

    texte_corr = ``;
    this.liste_questions.push(texte);
    this.liste_corrections.push(texte_corr);
    liste_de_question_to_contenu(this); //Espacement de 2 em entre chaque question.

  }
}
